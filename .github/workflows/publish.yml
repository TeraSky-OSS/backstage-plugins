name: NodeJS CI And Plugin Publishing

on:
  push:
    tags:
      - '*'
      - '!CLI-*'

jobs:
  build:
    permissions:
      contents: write
      id-token: write
      packages: write
    env:
      NODE_OPTIONS: --max-old-space-size=4096
      NPM_CONFIG_PROVENANCE: true
      
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'
          scope: '@terasky'

      - run: yarn workspaces foreach -A install
      - run: yarn lint --since origin/main
      - run: yarn tsc
        continue-on-error: true
      - run: yarn workspaces foreach -W --include 'plugins/**' run build
      - run: yarn tsc
      - run: yarn test
      - run: yarn build
      - run: ./publish.sh
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - run: yarn build:backend

      - id: docker_meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ghcr.io/terasky-oss/kubestage
          tags: type=sha,format=long
      
      - name: Build and Push container images
        uses: docker/build-push-action@v4.0.0
        id: build-and-push
        with:
          context: .
          sbom: true
          provenance: mode=max
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
      
      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
          mkdir -p dist
          for tag in ${TAGS}; do
            image="${tag}@${DIGEST}"
            cosign sign --yes --output-signature "dist/${DIGEST}.sig" --output-certificate "dist/${DIGEST}.cert" --oidc-issuer=https://token.actions.githubusercontent.com ${image}
          done

      - name: Generate release notes
        run: |
          cp ./hack/plugin-release-notes.md RELEASE_NOTES.md
          ./hack/generate-version-table.sh >> RELEASE_NOTES.md
          sed -i 's/RELEASE_VERSION/${{ github.ref_name }}/g' RELEASE_NOTES.md
          echo "  " >> RELEASE_NOTES.md
          echo "## Published Container Images" >> RELEASE_NOTES.md
          echo "| Image | Version |" >> RELEASE_NOTES.md
          echo "| ----- | ------- |" >> RELEASE_NOTES.md
          for tag in ${{ steps.docker_meta.outputs.tags }}; do
            echo "| ${tag} | ${{ github.ref_name }} |" >> RELEASE_NOTES.md
          done
          echo "  " >> RELEASE_NOTES.md
          echo "## Validating Signatures" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          for tag in ${{ steps.docker_meta.outputs.tags }}; do
            echo "\"${tag}\": " >> RELEASE_NOTES.md
            echo 'cosign verify \' >> RELEASE_NOTES.md
            echo '  --certificate-oidc-issuer https://token.actions.githubusercontent.com \' >> RELEASE_NOTES.md
            echo "  --certificate-identity-regexp=\"https://github.com/TeraSky-OSS/backstage-plugins/\.github/workflows.+\" \\" >> RELEASE_NOTES.md
            echo "  ${tag}" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          done
          echo '```' >> RELEASE_NOTES.md
      - name: Create GitHub Release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: RELEASE_NOTES.md
          artifacts: dist/*
