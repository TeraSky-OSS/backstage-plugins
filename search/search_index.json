{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TeraSky's Backstage Plugin Collection! \ud83d\ude80","text":"<p>Welcome to our comprehensive collection of Backstage plugins! We've created these plugins to enhance your Backstage experience and make your development workflow more efficient and enjoyable. All our plugins are thoroughly tested and compatible with Backstage version 1.44.1.</p>"},{"location":"#our-plugin-categories","title":"\ud83d\udd27 Our Plugin Categories","text":""},{"location":"#kubernetes","title":"Kubernetes","text":"<ol> <li>Kubernetes Ingestor  - Automatically create catalog entities from Kubernetes resources, with support for custom GVKs, Crossplane claims, and KRO resources. It also create GitOps friendly Software Templates for Crossplane Claims/Composites, CRDs, and KRO Instances.</li> <li>Crossplane Suite  - Complete Crossplane integration for cloud resource management.</li> <li>KRO Suite  - Complete KRO integration for Kubernetes resource orchestration.</li> <li>Kyverno Policy Reports  - Policy compliance monitoring for Kubernetes.</li> <li>Kubernetes Resources  - Visual graph representation of Kubernetes resources and their dependencies with simple Backstage permission and RBAC management.</li> </ol>"},{"location":"#infrastructure-as-code","title":"Infrastructure As Code","text":"<ol> <li>GitOps Manifest Updater  - Update GitOps manifests and create PRs with ease.</li> <li>Terraform Scaffolder  - Generate Input forms in software templates for terraform module variables.</li> </ol>"},{"location":"#training-education","title":"Training &amp; Education","text":"<ol> <li>Educates Platform  - Complete training platform with workshop management.</li> </ol>"},{"location":"#development-tools","title":"Development Tools","text":"<ol> <li>DevPod Plugin  - Quick development environment setup with IDE integration.</li> </ol>"},{"location":"#resource-and-cost-optimization","title":"Resource And Cost Optimization","text":"<ol> <li>ScaleOps Frontend  - Cost optimization insights and recommendations.</li> </ol>"},{"location":"#cloud-infrastructure","title":"Cloud Infrastructure","text":"<ol> <li>VCF Automation Suite  - Comprehensive VMware Cloud Foundation Automation integration.</li> <li>VCF Operations Suite  - Comprehensive VMware Cloud Foundation Operations observability integration.</li> </ol>"},{"location":"#ai","title":"AI","text":"<ol> <li>AI Coding Rules  - Comprehensive visualization and management of AI coding rules from Cursor, GitHub Copilot, and Cline.</li> </ol>"},{"location":"#general-utilities","title":"General Utilities","text":"<ol> <li>Scaffolder Actions  - Powerful actions for automation:  <ul> <li>Crossplane claim template creation  </li> <li>CRD template creation  </li> <li>Catalog info cleaning  </li> </ul> </li> <li>Entity Scaffolder Plugin  - Embbed scaffolder templates in component pages.</li> </ol>"},{"location":"#getting-started","title":"\ud83d\udca1 Getting Started","text":"<p>Each plugin includes comprehensive documentation with: - Detailed installation instructions - Configuration examples - Best practices - Troubleshooting guides</p>"},{"location":"#need-help","title":"\ud83d\udd0d Need Help?","text":"<ul> <li>Check each plugin's documentation for specific guides</li> <li>Look for examples in the installation guides</li> <li>Review the troubleshooting sections</li> <li>Contact our support team for assistance</li> </ul>"},{"location":"#latest-releases","title":"\ud83d\udce6 Latest Releases","text":"<p>All our plugins are actively maintained and regularly updated. Check the npm badge on each plugin for the latest version information.</p> <p>Built with \u2764\ufe0f by TeraSky for the Backstage Community</p>"},{"location":"plugins/ai-rules-plugin/overview/","title":"AI Coding Rules Plugin","text":"<p>The AI Coding Rules plugin for Backstage provides comprehensive visualization and management of AI coding rules from various sources like Cursor, GitHub Copilot, Cline, and Claude Code. It enables teams to discover, view, and manage their AI coding guidelines directly within the Backstage interface with clickable links to open rule files in their git repositories.</p>"},{"location":"plugins/ai-rules-plugin/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/ai-rules-plugin/overview/#frontend-plugin","title":"Frontend Plugin","text":"<p>The frontend plugin provides two main components:</p>"},{"location":"plugins/ai-rules-plugin/overview/#aiinstructionscomponent-top-level-component","title":"AiInstructionsComponent (Top-Level Component)","text":"<p>A tabbed interface that integrates both AI rules and MCP server functionality: - \"Agent Rules\" tab for AI coding rules management - \"MCP Servers\" tab for MCP server configuration visualization - Unified navigation between both features - Configurable title prop</p>"},{"location":"plugins/ai-rules-plugin/overview/#airulescomponent","title":"AIRulesComponent","text":"<p>Provides visualization and management of AI coding rules: - Visualizing Cursor rules from <code>.mdc</code> files in <code>.cursor/rules/</code> directories - Displaying GitHub Copilot rules from <code>.github/copilot-instructions.md</code> and <code>*.instructions.md</code> files - Showing Cline rules from <code>.clinerules/*.md</code> files - Displaying Claude Code rules from <code>CLAUDE.md</code> files - Manual filtering with configurable default rule types - Clickable links to open rule files directly in git repositories - Viewing rule metadata and content in expandable cards - Statistics and overview of rule counts - Apply Filter functionality for controlled rule searches</p>"},{"location":"plugins/ai-rules-plugin/overview/#mcpserverscomponent","title":"MCPServersComponent","text":"<p>Dedicated interface for MCP server configuration management: - Groups servers by source (Cursor, VSCode, Claude) - Displays server counts per source - Shows server type (local/remote) and command information - Expandable view of environment variables - Raw configuration display with syntax highlighting - Support for both local (stdio) and remote server configurations</p> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/ai-rules-plugin/overview/#backend-plugin","title":"Backend Plugin","text":"<p>The backend plugin handles:</p> <ul> <li>Integration with Backstage SCM integrations</li> <li>Fetching rules from Git repositories with retry logic and exponential backoff</li> <li>Parsing frontmatter metadata in rule files</li> <li>API endpoints for rule data retrieval</li> <li>Support for multiple rule types and formats</li> <li>Rate limiting protection for large repositories</li> <li>Multi-provider git support (GitHub, GitLab, etc.)</li> <li>Discovery and parsing of MCP server configurations from multiple sources:</li> <li>Cursor MCP configs from <code>.cursor/mcp.json</code></li> <li>VSCode MCP configs from <code>.vscode/mcp.json</code></li> <li>Claude MCP configs from <code>.mcp.json</code></li> <li>Support for both local (stdio) and remote MCP servers</li> </ul> <p>Learn more about the backend plugin</p>"},{"location":"plugins/ai-rules-plugin/overview/#features","title":"Features","text":"<ul> <li>Multi-Source Support: Support for Cursor, GitHub Copilot, Cline, and Claude Code rules</li> <li>Modern UI: Clean and intuitive interface with manual filtering and Apply Filter controls</li> <li>Clickable Git Links: Direct links to open rule files in git repositories in new tabs</li> <li>Rule Discovery: Automatic detection of rule files in repositories</li> <li>Configurable Defaults: Separate configuration for allowed and default rule types</li> <li>Manual Filtering: Users control when to search with Apply Filter functionality</li> <li>Metadata Parsing: Extract and display rule metadata from frontmatter</li> <li>Repository Integration: Seamless integration with all Backstage SCM integrations</li> <li>Rate Limiting Protection: Retry logic with exponential backoff for large repositories</li> <li>Multi-Provider Support: Works with GitHub, GitLab, and other git providers</li> <li>MCP Server Discovery: Automatic detection of MCP configurations from Cursor, VSCode, and Claude</li> <li>Flexible Server Support: Support for both local (stdio) and remote MCP server configurations</li> <li>Configuration Visualization: Display and inspect MCP server configurations with syntax highlighting</li> </ul>"},{"location":"plugins/ai-rules-plugin/overview/#screenshots","title":"Screenshots","text":""},{"location":"plugins/ai-rules-plugin/overview/#ai-rules-overview","title":"AI Rules Overview","text":"<p> AI Rules component showing no rule types selected</p> <p> AI Rules component showing rule statistics and filtering options</p> <p> Detailed view of AI coding rules from cursor with expandable cards</p> <p> Detailed view of AI coding rules from Claude Code project rules</p> <p> Detailed view of AI coding rules from copilot project rules</p> <p> Detailed view of AI coding rules from cline with expandable cards</p>"},{"location":"plugins/ai-rules-plugin/overview/#documentation-structure","title":"Documentation Structure","text":"<p>Frontend Plugin - About - Installation - Configuration </p> <p>Backend Plugin - About - Installation - Configuration </p>"},{"location":"plugins/ai-rules-plugin/overview/#supported-rule-types","title":"Supported Rule Types","text":"<p>The plugin supports the following AI coding rule sources:</p> <ul> <li>Cursor Rules: <code>.mdc</code> files in <code>.cursor/rules/</code> directories with frontmatter metadata support</li> <li>GitHub Copilot Rules: <code>.github/copilot-instructions.md</code> files with automatic section splitting</li> <li>Cline Rules: <code>.md</code> files in <code>.clinerules/</code> directories with markdown section extraction</li> <li>Claude Code Rules: <code>CLAUDE.md</code> files in repository root with markdown content and title extraction</li> </ul>"},{"location":"plugins/ai-rules-plugin/overview/#mcp-actions-integration","title":"MCP Actions Integration","text":"<p>The plugin provides MCP (Model Control Protocol) actions that can be used to interact with AI coding rules and MCP servers. To enable these actions:</p> <ol> <li> <p>First, ensure you have the MCP actions backend plugin installed and configured. See the MCP Actions Backend Plugin documentation for setup instructions.</p> </li> <li> <p>Add the plugin to your actions configuration in <code>app-config.yaml</code>:</p> </li> </ol> <pre><code>backend:\n  actions:\n    pluginSources:\n      - 'catalog'\n      - 'ai-rules'\n      # ... other action sources\n</code></pre>"},{"location":"plugins/ai-rules-plugin/overview/#available-mcp-actions","title":"Available MCP Actions","text":"<p>The plugin provides the following MCP actions:</p> <ul> <li><code>get_ai_rules</code>: Fetch AI coding rules from a Git repository</li> <li>Input: Git repository URL and rule types to fetch (cursor, copilot, cline, claude-code)</li> <li> <p>Output: List of rules with metadata, content, and file locations</p> </li> <li> <p><code>get_mcp_servers</code>: Get configured MCP servers from a Git repository</p> </li> <li>Input: Git repository URL</li> <li>Output: List of MCP server configurations with their settings and metadata</li> </ul>"},{"location":"plugins/ai-rules-plugin/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the AI Coding Rules plugin:</p> <ol> <li>Install and configure the backend plugin</li> <li>Set up the frontend components</li> <li>Configure rule types in your app-config.yaml</li> <li>Configure MCP actions in your app-config.yaml</li> <li>Add the component to entity pages</li> <li>Start discovering and managing AI coding rules</li> </ol> <p>For detailed installation and configuration instructions, refer to the individual plugin documentation linked above.</p>"},{"location":"plugins/ai-rules-plugin/backend/about/","title":"AI Coding Rules Backend Plugin","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#overview","title":"Overview","text":"<p>The AI Coding Rules backend plugin provides the server-side functionality required to fetch and parse AI coding rules from Git repositories. It handles integration with Backstage's SCM integrations, parses various rule file formats, includes retry logic with exponential backoff for rate limiting protection, and exposes REST API endpoints for the frontend plugin to consume.</p>"},{"location":"plugins/ai-rules-plugin/backend/about/#features","title":"Features","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#repository-integration","title":"Repository Integration","text":"<ul> <li>Seamless integration with all Backstage SCM integrations</li> <li>Support for GitHub, GitLab, Bitbucket, and Azure DevOps</li> <li>Handles both public and private repositories</li> <li>Retry logic with exponential backoff for rate limiting</li> <li>Efficient file fetching with network resilience</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#rule-type-support","title":"Rule Type Support","text":"<ul> <li>Cursor Rules: Parse <code>.mdc</code> files from <code>.cursor/rules/</code> directories</li> <li>GitHub Copilot Rules: Process <code>.github/copilot-instructions.md</code> files  </li> <li>Cline Rules: Extract content from <code>.clinerules/*.md</code> files</li> <li>Claude Code Rules: Process <code>CLAUDE.md</code> files from repository root</li> <li>Configurable rule type filtering</li> <li>Support for all rule types by default</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#content-processing","title":"Content Processing","text":"<ul> <li>Frontmatter metadata parsing for Cursor rules</li> <li>Automatic section splitting for Copilot instructions</li> <li>Markdown section extraction for Cline rules</li> <li>Content validation and error handling</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#rate-limiting-and-resilience","title":"Rate Limiting and Resilience","text":"<ul> <li>Automatic retry logic with exponential backoff</li> <li>Protection against GitLab and other provider rate limits</li> <li>Jitter to prevent thundering herd problems</li> <li>Graceful handling of network failures and timeouts</li> <li>Detailed logging for debugging rate limit issues</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#api-endpoints","title":"API Endpoints","text":"<ul> <li>RESTful API for rule data retrieval</li> <li>Entity-based rule fetching</li> <li>Configurable rule type filtering</li> <li>Structured JSON responses with git URLs</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage SCM integrations</li> <li>Catalog client for entity resolution</li> <li>Configuration service for rule type settings</li> <li>Logging service for debugging and monitoring</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#supported-file-patterns","title":"Supported File Patterns","text":"<ul> <li>Cursor: <code>.cursor/rules/*.mdc</code> with frontmatter support</li> <li>Copilot: <code>.github/copilot-instructions.md</code> with automatic parsing</li> <li>Cline: <code>.clinerules/*.md</code> with section extraction</li> <li>Claude Code: <code>CLAUDE.md</code> in repository root with title extraction</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#content-parsing","title":"Content Parsing","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#cursor-rules","title":"Cursor Rules","text":"<p>Parses frontmatter metadata including: <pre><code>---\ndescription: \"Rule description\"\nglobs: [\"*.ts\", \"*.tsx\"]\nalwaysApply: true\n---\n</code></pre></p>"},{"location":"plugins/ai-rules-plugin/backend/about/#copilot-rules","title":"Copilot Rules","text":"<p>Automatically splits content by empty lines to create logical sections</p>"},{"location":"plugins/ai-rules-plugin/backend/about/#cline-rules","title":"Cline Rules","text":"<p>Extracts markdown sections and headers for organized rule presentation</p>"},{"location":"plugins/ai-rules-plugin/backend/about/#api-reference","title":"API Reference","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#get-apiai-rulesrules","title":"GET /api/ai-rules/rules","text":"<p>Fetches AI rules for a given entity.</p>"},{"location":"plugins/ai-rules-plugin/backend/about/#query-parameters","title":"Query Parameters","text":"<ul> <li><code>entityRef</code> (required): Entity reference in format <code>kind:namespace/name</code></li> <li><code>ruleTypes</code> (optional): Comma-separated list of rule types to fetch</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#response-format","title":"Response Format","text":"<pre><code>{\n  \"rules\": [\n    {\n      \"type\": \"cursor\",\n      \"id\": \"cursor-rule-1\", \n      \"filePath\": \".cursor/rules/typescript.mdc\",\n      \"fileName\": \"typescript\",\n      \"content\": \"TypeScript coding standards...\",\n      \"description\": \"TypeScript rules\",\n      \"globs\": [\"*.ts\", \"*.tsx\"],\n      \"alwaysApply\": true\n    },\n    {\n      \"type\": \"copilot\",\n      \"id\": \"copilot-rule-1\",\n      \"filePath\": \".github/copilot-instructions.md\",\n      \"fileName\": \"copilot-instructions\",\n      \"content\": \"Use functional components...\",\n      \"description\": \"Generated from copilot-instructions.md\",\n      \"section\": 1\n    }\n  ],\n  \"totalCount\": 2,\n  \"ruleTypes\": [\"cursor\", \"copilot\"]\n}\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/about/#error-responses","title":"Error Responses","text":"<ul> <li><code>400 Bad Request</code>: Missing or invalid entityRef</li> <li><code>404 Not Found</code>: Entity not found or no source location</li> <li><code>500 Internal Server Error</code>: Repository access or parsing errors</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#architecture","title":"Architecture","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#components","title":"Components","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#api-router","title":"API Router","text":"<ul> <li>Route registration and handling</li> <li>Request validation and parsing</li> <li>Response formatting and error handling</li> <li>Query parameter processing</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#rule-fetcher","title":"Rule Fetcher","text":"<ul> <li>Repository file discovery and fetching</li> <li>SCM integration abstraction</li> <li>File content retrieval and validation</li> <li>Error handling for inaccessible repositories</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#content-parser","title":"Content Parser","text":"<ul> <li>Rule type detection and parsing</li> <li>Frontmatter extraction for Cursor rules</li> <li>Section splitting for different rule types</li> <li>Content validation and sanitization</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#configuration-manager","title":"Configuration Manager","text":"<ul> <li>Rule type configuration handling</li> <li>Default value management</li> <li>Environment-specific settings</li> <li>Validation of configuration options</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#dependencies","title":"Dependencies","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#core-dependencies","title":"Core Dependencies","text":"<ul> <li><code>@backstage/backend-plugin-api</code>: Backend plugin framework</li> <li><code>@backstage/catalog-client</code>: Entity resolution</li> <li><code>@backstage/integration</code>: SCM integrations</li> <li><code>@backstage/config</code>: Configuration management</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#parsing-dependencies","title":"Parsing Dependencies","text":"<ul> <li><code>gray-matter</code>: Frontmatter parsing for Cursor rules</li> <li><code>node-fetch</code>: HTTP requests for file fetching</li> <li><code>express</code>: REST API framework</li> <li><code>winston</code>: Logging functionality</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#error-handling","title":"Error Handling","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#repository-access-errors","title":"Repository Access Errors","text":"<ul> <li>Network connectivity issues</li> <li>Authentication failures</li> <li>Repository not found</li> <li>Permission denied</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#file-parsing-errors","title":"File Parsing Errors","text":"<ul> <li>Invalid frontmatter syntax</li> <li>Malformed file content</li> <li>Unsupported file formats</li> <li>Encoding issues</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#configuration-errors","title":"Configuration Errors","text":"<ul> <li>Invalid rule type specifications</li> <li>Missing required configuration</li> <li>Type validation failures</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#security-considerations","title":"Security Considerations","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#repository-access","title":"Repository Access","text":"<ul> <li>Respects SCM integration authentication</li> <li>No additional credentials required</li> <li>Uses existing Backstage permissions</li> <li>Secure token handling</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#content-processing_1","title":"Content Processing","text":"<ul> <li>Input validation for all file content</li> <li>Safe frontmatter parsing</li> <li>Protection against malicious content</li> <li>Content size limits</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#api-security","title":"API Security","text":"<ul> <li>Entity reference validation</li> <li>Parameter sanitization</li> <li>Rate limiting considerations</li> <li>Error message sanitization</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#performance-considerations","title":"Performance Considerations","text":""},{"location":"plugins/ai-rules-plugin/backend/about/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>File content caching for frequently accessed rules</li> <li>Entity resolution caching</li> <li>Repository metadata caching</li> <li>Configurable cache TTL</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#resource-management","title":"Resource Management","text":"<ul> <li>Efficient file fetching algorithms</li> <li>Memory-conscious content processing</li> <li>Connection pooling for repository access</li> <li>Graceful degradation under load</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/about/#monitoring","title":"Monitoring","text":"<ul> <li>API endpoint performance metrics</li> <li>Repository access timing</li> <li>Error rate tracking</li> <li>Cache hit rate monitoring </li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/configure/","title":"Configuring the AI Coding Rules Backend Plugin","text":"<p>This guide covers the configuration options available for the AI Coding Rules backend plugin.</p>"},{"location":"plugins/ai-rules-plugin/backend/configure/#basic-configuration","title":"Basic Configuration","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#rule-types-configuration","title":"Rule Types Configuration","text":"<p>Configure which rule types the backend should search for in your <code>app-config.yaml</code>:</p> <pre><code>aiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n    - claude-code\n  defaultRuleTypes:\n    - cursor\n    - claude-code\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#configuration-schema","title":"Configuration Schema","text":"Option Type Default Description <code>allowedRuleTypes</code> <code>string[]</code> <code>[\"cursor\", \"copilot\", \"cline\", \"claude-code\"]</code> Array of rule types to search for and parse <code>defaultRuleTypes</code> <code>string[]</code> <code>[]</code> Array of rule types pre-selected when component loads"},{"location":"plugins/ai-rules-plugin/backend/configure/#default-configuration","title":"Default Configuration","text":"<p>If no configuration is provided, the plugin defaults to:</p> <pre><code>aiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n    - claude-code\n  defaultRuleTypes: []\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#scm-integration-requirements","title":"SCM Integration Requirements","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#github-configuration","title":"GitHub Configuration","text":"<p>For GitHub repositories:</p> <pre><code>integrations:\n  github:\n    - host: github.com\n      token: ${GITHUB_TOKEN}\n    # For GitHub Enterprise\n    - host: github.enterprise.com\n      token: ${GITHUB_ENTERPRISE_TOKEN}\n      apiBaseUrl: https://github.enterprise.com/api/v3\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#gitlab-configuration","title":"GitLab Configuration","text":"<p>For GitLab repositories:</p> <pre><code>integrations:\n  gitlab:\n    - host: gitlab.com\n      token: ${GITLAB_TOKEN}\n    # For self-hosted GitLab\n    - host: gitlab.company.com\n      token: ${GITLAB_COMPANY_TOKEN}\n      apiBaseUrl: https://gitlab.company.com/api/v4\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#azure-devops-configuration","title":"Azure DevOps Configuration","text":"<p>For Azure DevOps repositories:</p> <pre><code>integrations:\n  azure:\n    - host: dev.azure.com\n      token: ${AZURE_TOKEN}\n    # For Azure DevOps Server\n    - host: tfs.company.com\n      token: ${TFS_TOKEN}\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#bitbucket-configuration","title":"Bitbucket Configuration","text":"<p>For Bitbucket repositories:</p> <pre><code>integrations:\n  bitbucket:\n    - host: bitbucket.org\n      username: ${BITBUCKET_USERNAME}\n      appPassword: ${BITBUCKET_APP_PASSWORD}\n    # For Bitbucket Server\n    - host: bitbucket.company.com\n      token: ${BITBUCKET_SERVER_TOKEN}\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#rule-type-specifications","title":"Rule Type Specifications","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#cursor-rules","title":"Cursor Rules","text":"<p>Cursor rules are found in <code>.cursor/rules/*.mdc</code> files with optional frontmatter:</p> <pre><code># Configuration\naiRules:\n  allowedRuleTypes:\n    - cursor\n\n# Rule file structure\n# .cursor/rules/typescript.mdc\n---\ndescription: \"TypeScript coding standards\"\nglobs: [\"*.ts\", \"*.tsx\"]\nalwaysApply: true\n---\n\n# TypeScript Rules\nUse strict typing and avoid any types.\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#github-copilot-rules","title":"GitHub Copilot Rules","text":"<p>Copilot rules are found in <code>.github/copilot-instructions.md</code>:</p> <pre><code># Configuration\naiRules:\n  allowedRuleTypes:\n    - copilot\n\n# Rule file structure  \n# .github/copilot-instructions.md\n# Development Guidelines\n\nUse TypeScript for all new code.\nFollow existing code patterns.\n\nPrefer functional components in React.\nUse hooks instead of class components.\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#cline-rules","title":"Cline Rules","text":"<p>Cline rules are found in <code>.clinerules/*.md</code> files:</p> <pre><code># Configuration\naiRules:\n  allowedRuleTypes:\n    - cline\n\n# Rule file structure\n# .clinerules/development.md\n# Development Guidelines\n\n## Code Style\n- Use ESLint and Prettier\n- Follow team conventions\n\n## Testing\n- Write unit tests for all functions\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#claude-code-rules","title":"Claude Code Rules","text":"<p>Claude Code rules are found in <code>CLAUDE.md</code> file in repository root:</p> <pre><code># Configuration\naiRules:\n  allowedRuleTypes:\n    - claude-code\n\n# Rule file structure\n# CLAUDE.md (in repository root)\n# Claude Code Guidelines\n\n## Development Principles\n- Write clean, readable code\n- Follow SOLID principles\n- Use meaningful variable names\n\n## Code Review Standards\n- All code must be reviewed\n- Tests must pass before merge\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#development-environment","title":"Development Environment","text":"<pre><code># app-config.development.yaml\naiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n\nbackend:\n  logger:\n    level: debug # Enable debug logging\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#production-environment","title":"Production Environment","text":"<pre><code># app-config.production.yaml\naiRules:\n  allowedRuleTypes:\n    - copilot # Only official guidelines in production\n\nbackend:\n  logger:\n    level: info # Standard logging level\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#testing-environment","title":"Testing Environment","text":"<pre><code># app-config.test.yaml\naiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n\n# Mock SCM integrations for testing\nintegrations:\n  github:\n    - host: github.com\n      token: mock-token\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#security-configuration","title":"Security Configuration","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#token-security","title":"Token Security","text":"<p>Store authentication tokens securely:</p> <pre><code># Environment variables\nexport GITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxx\nexport GITLAB_TOKEN=glpat-xxxxxxxxxxxxxxxxxxxx\nexport AZURE_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#repository-access-control","title":"Repository Access Control","text":"<p>Ensure tokens have minimal required permissions:</p> <ul> <li>GitHub: <code>repo</code> scope for private repos, or <code>public_repo</code> for public repos</li> <li>GitLab: <code>read_repository</code> permission</li> <li>Azure DevOps: <code>Code (read)</code> permission</li> <li>Bitbucket: <code>Repositories: Read</code> permission</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/configure/#performance-and-rate-limiting","title":"Performance and Rate Limiting","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#retry-logic-configuration","title":"Retry Logic Configuration","text":"<p>The backend includes built-in retry logic with exponential backoff to handle rate limiting and network issues:</p> <pre><code># Default retry configuration (not user-configurable)\n# - Max retries: 3 attempts\n# - Initial delay: 1 second  \n# - Max delay: 10 seconds\n# - Exponential backoff with jitter\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#retry-behavior","title":"Retry Behavior","text":"<p>The plugin automatically retries on these error conditions:</p> <ul> <li>Rate Limiting: HTTP 429 \"Too Many Requests\"</li> <li>Server Errors: HTTP 502, 503, 504</li> <li>Network Issues: Timeouts, connection resets, DNS failures</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/configure/#large-repository-optimization","title":"Large Repository Optimization","text":"<p>For large repositories with many rule files:</p> <ul> <li>Automatic Retry: Failed requests are retried with increasing delays</li> <li>Jitter: Random delays prevent thundering herd problems</li> <li>Circuit Breaking: Stops retrying permanently failed requests</li> <li>Logging: Detailed logs for debugging rate limit issues</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/configure/#rate-limit-best-practices","title":"Rate Limit Best Practices","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#gitlab-rate-limits","title":"GitLab Rate Limits","text":"<p>GitLab.com has stricter rate limits than GitHub:</p> <pre><code># Consider using GitLab tokens with higher rate limits\nintegrations:\n  gitlab:\n    - host: gitlab.com\n      token: ${GITLAB_TOKEN} # Use personal access token with appropriate scopes\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#github-rate-limits","title":"GitHub Rate Limits","text":"<p>GitHub has generous rate limits, but monitor usage:</p> <pre><code>integrations:\n  github:\n    - host: github.com\n      token: ${GITHUB_TOKEN} # Authenticated requests have higher limits\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#repository-access-patterns","title":"Repository Access Patterns","text":"<p>Optimize access patterns: - Avoid scanning extremely large repositories frequently - Consider caching strategies for frequently accessed rules - Monitor API usage in provider dashboards</p>"},{"location":"plugins/ai-rules-plugin/backend/configure/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#health-checks","title":"Health Checks","text":"<p>The plugin provides health check endpoints:</p> <pre><code># Check plugin health\ncurl http://localhost:7007/api/ai-rules/health\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#metrics","title":"Metrics","text":"<p>Monitor these key metrics:</p> <ul> <li>API request rate and latency</li> <li>Repository access success/failure rates</li> <li>Rule parsing success/failure rates</li> <li>Cache hit rates (when implemented)</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/configure/#error-tracking","title":"Error Tracking","text":"<p>Common error scenarios to monitor:</p> <ol> <li>Repository Access Errors</li> <li>Authentication failures</li> <li>Network timeouts</li> <li> <p>Repository not found</p> </li> <li> <p>Content Parsing Errors</p> </li> <li>Invalid frontmatter syntax</li> <li>File encoding issues</li> <li> <p>Content too large</p> </li> <li> <p>Entity Resolution Errors</p> </li> <li>Invalid entity references</li> <li>Missing source locations</li> <li>Catalog synchronization issues</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/configure/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#validation","title":"Validation","text":"<p>Validate your configuration:</p> <pre><code>// Check configuration loading\nimport { Config } from '@backstage/config';\n\nconst config = /* your config instance */;\nconst allowedRuleTypes = config.getOptionalStringArray('aiRules.allowedRuleTypes') \n  ?? ['cursor', 'copilot'];\n\nconsole.log('Configured rule types:', allowedRuleTypes);\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#common-configuration-issues","title":"Common Configuration Issues","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#invalid-rule-types","title":"Invalid Rule Types","text":"<pre><code># Incorrect - unsupported rule type\naiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - invalid-type # This will be ignored\n\n# Correct\naiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#missing-scm-integration","title":"Missing SCM Integration","text":"<pre><code># Incomplete - missing required token\nintegrations:\n  github:\n    - host: github.com\n      # Missing token\n\n# Complete\nintegrations:\n  github:\n    - host: github.com\n      token: ${GITHUB_TOKEN}\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#environment-variable-issues","title":"Environment Variable Issues","text":"<pre><code># Check if environment variables are set\necho $GITHUB_TOKEN\necho $GITLAB_TOKEN\n\n# Set if missing\nexport GITHUB_TOKEN=your_token_here\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#configuration-testing","title":"Configuration Testing","text":"<p>Test your configuration:</p> <pre><code># Start backend in debug mode\nLOG_LEVEL=debug yarn dev\n\n# Test API with configuration\ncurl \"http://localhost:7007/api/ai-rules/rules?entityRef=component:default/test-service&amp;ruleTypes=cursor,copilot\"\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/configure/#best-practices","title":"Best Practices","text":""},{"location":"plugins/ai-rules-plugin/backend/configure/#configuration-management","title":"Configuration Management","text":"<ol> <li>Use environment variables for sensitive data</li> <li>Use separate config files for different environments</li> <li>Validate configuration in CI/CD pipelines</li> <li>Document all configuration options</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/configure/#security","title":"Security","text":"<ol> <li>Rotate tokens regularly</li> <li>Use minimal required permissions</li> <li>Monitor token usage</li> <li>Secure configuration files</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/configure/#performance","title":"Performance","text":"<ol> <li>Monitor API response times</li> <li>Track repository access patterns</li> <li>Plan for caching implementation</li> <li>Set appropriate timeouts</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/configure/#maintenance","title":"Maintenance","text":"<ol> <li>Keep SCM integrations updated</li> <li>Monitor for deprecated configuration options</li> <li>Review and update rule types as needed</li> <li>Test configuration changes in staging </li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/install/","title":"Installing the AI Coding Rules Backend Plugin","text":"<p>This guide will help you install and set up the AI Coding Rules backend plugin in your Backstage instance.</p>"},{"location":"plugins/ai-rules-plugin/backend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage backend instance</li> <li>Properly configured SCM integrations (GitHub, GitLab, etc.)</li> <li>Access to repositories containing AI coding rules</li> <li>Node.js and yarn package manager</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/ai-rules-plugin/backend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/backend add @terasky/backstage-plugin-ai-rules-backend\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/install/#2-add-to-backend","title":"2. Add to Backend","text":"<p>Add the plugin to your backend in <code>packages/backend/src/index.ts</code>:</p> <pre><code>import { createBackend } from '@backstage/backend-defaults';\n\nconst backend = createBackend();\n\n// ... other plugins\nbackend.add(import('@terasky/backstage-plugin-ai-rules-backend'));\n\nbackend.start();\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/install/#3-configure-scm-integrations","title":"3. Configure SCM Integrations","text":"<p>Ensure your SCM integrations are properly configured in <code>app-config.yaml</code>:</p> <pre><code>integrations:\n  github:\n    - host: github.com\n      token: ${GITHUB_TOKEN}\n\n  gitlab:\n    - host: gitlab.com\n      token: ${GITLAB_TOKEN}\n\n  # Add other SCM integrations as needed\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/install/#configuration","title":"Configuration","text":""},{"location":"plugins/ai-rules-plugin/backend/install/#basic-configuration","title":"Basic Configuration","text":"<p>Add AI Rules configuration to your <code>app-config.yaml</code>:</p> <pre><code>aiRules:\n  # Configure which rule types to look for\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/install/#environment-variables","title":"Environment Variables","text":"<p>Set up required environment variables:</p> <pre><code># For GitHub integration\nexport GITHUB_TOKEN=your_github_token\n\n# For GitLab integration  \nexport GITLAB_TOKEN=your_gitlab_token\n\n# For other SCM providers\nexport AZURE_TOKEN=your_azure_token\nexport BITBUCKET_TOKEN=your_bitbucket_token\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/install/#verification","title":"Verification","text":""},{"location":"plugins/ai-rules-plugin/backend/install/#1-check-backend-logs","title":"1. Check Backend Logs","text":"<p>Start your backend and check for successful plugin registration:</p> <pre><code>yarn dev\n</code></pre> <p>Look for log entries indicating the plugin has loaded: <pre><code>[ai-rules-backend] Plugin loaded successfully\n[ai-rules-backend] API routes registered at /api/ai-rules\n</code></pre></p>"},{"location":"plugins/ai-rules-plugin/backend/install/#2-test-api-endpoints","title":"2. Test API Endpoints","text":"<p>Test the API endpoints directly:</p> <pre><code># Replace with your backend URL and valid entity reference\ncurl \"http://localhost:7007/api/ai-rules/rules?entityRef=component:default/my-service\"\n</code></pre> <p>Expected response format: <pre><code>{\n  \"rules\": [],\n  \"totalCount\": 0,\n  \"ruleTypes\": []\n}\n</code></pre></p>"},{"location":"plugins/ai-rules-plugin/backend/install/#3-check-entity-resolution","title":"3. Check Entity Resolution","text":"<p>Verify that entities with source locations are properly resolved:</p> <pre><code># Test with an entity that has a source location\ncurl \"http://localhost:7007/api/ai-rules/rules?entityRef=component:default/my-service&amp;ruleTypes=cursor,copilot\"\n</code></pre>"},{"location":"plugins/ai-rules-plugin/backend/install/#troubleshooting","title":"Troubleshooting","text":""},{"location":"plugins/ai-rules-plugin/backend/install/#common-issues","title":"Common Issues","text":""},{"location":"plugins/ai-rules-plugin/backend/install/#plugin-not-loading","title":"Plugin Not Loading","text":"<ol> <li> <p>Missing Package: Verify the package is installed in package.json    <pre><code>yarn --cwd packages/backend list --pattern @terasky/backstage-plugin-ai-rules-backend\n</code></pre></p> </li> <li> <p>Import Error: Check the import statement in backend/src/index.ts    <pre><code>// Correct import\nbackend.add(import('@terasky/backstage-plugin-ai-rules-backend'));\n</code></pre></p> </li> <li> <p>Backend Startup Issues: Check backend logs for detailed error messages</p> </li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/install/#api-endpoints-not-working","title":"API Endpoints Not Working","text":"<ol> <li>Check Route Registration: Look for API routes in backend logs</li> <li>Verify URL: Ensure you're using the correct API path <code>/api/ai-rules/rules</code></li> <li>CORS Issues: Check if frontend can access the backend API</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/install/#repository-access-issues","title":"Repository Access Issues","text":"<ol> <li> <p>SCM Integration: Verify SCM integrations are configured correctly    <pre><code>integrations:\n  github:\n    - host: github.com\n      token: ${GITHUB_TOKEN}\n</code></pre></p> </li> <li> <p>Token Permissions: Ensure tokens have read access to repositories</p> </li> <li>Private Repository Access: Verify authentication for private repositories</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/install/#entity-resolution-problems","title":"Entity Resolution Problems","text":"<ol> <li> <p>Invalid Entity Reference: Check entity reference format    <pre><code># Correct format\ncomponent:default/my-service\n\n# Incorrect formats\nmy-service\ndefault/my-service\ncomponent/my-service\n</code></pre></p> </li> <li> <p>Missing Source Location: Verify entities have source location annotations    <pre><code>metadata:\n  annotations:\n    backstage.io/source-location: url:https://github.com/org/repo\n</code></pre></p> </li> <li> <p>Catalog Sync: Ensure entities are properly ingested into the catalog</p> </li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/install/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to troubleshoot issues:</p> <pre><code># app-config.yaml\nbackend:\n  logger:\n    level: debug\n</code></pre> <p>Or set environment variable: <pre><code>export LOG_LEVEL=debug\n</code></pre></p>"},{"location":"plugins/ai-rules-plugin/backend/install/#network-issues","title":"Network Issues","text":"<p>If experiencing network connectivity problems:</p> <ol> <li>Firewall: Check if backend can access external repositories</li> <li>Proxy: Configure proxy settings if behind corporate firewall</li> <li>DNS: Verify DNS resolution for repository hosts</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/install/#performance-issues","title":"Performance Issues","text":"<p>For performance optimization:</p> <ol> <li>Network Latency: Monitor repository access times</li> <li>File Size: Check for unusually large rule files</li> <li>Rate Limiting: Monitor API rate limits for SCM providers</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/install/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Install and configure the frontend plugin</li> <li>Review configuration options for customization</li> <li>Set up monitoring and logging as needed</li> <li>Test with your specific repository structures</li> </ol>"},{"location":"plugins/ai-rules-plugin/backend/install/#security-considerations","title":"Security Considerations","text":""},{"location":"plugins/ai-rules-plugin/backend/install/#token-management","title":"Token Management","text":"<ul> <li>Store tokens securely using environment variables</li> <li>Use minimal required permissions for tokens</li> <li>Regularly rotate authentication tokens</li> <li>Monitor token usage and access logs</li> </ul>"},{"location":"plugins/ai-rules-plugin/backend/install/#repository-access","title":"Repository Access","text":"<ul> <li>Review which repositories the backend can access</li> <li>Ensure proper authentication for private repositories</li> <li>Monitor for unauthorized access attempts</li> <li>Implement proper error handling to avoid information leakage</li> </ul> <p>For detailed configuration options, proceed to the Configuration Guide. </p>"},{"location":"plugins/ai-rules-plugin/frontend/about/","title":"AI Coding Rules Frontend Plugin","text":""},{"location":"plugins/ai-rules-plugin/frontend/about/#overview","title":"Overview","text":"<p>The AI Coding Rules frontend plugin provides a comprehensive interface for visualizing AI coding rules from various sources within Backstage. It enables users to discover, view, and manage coding guidelines from Cursor, GitHub Copilot, Cline, and Claude Code, all integrated seamlessly into the Backstage interface with clickable links to open rule files directly in git repositories.</p>"},{"location":"plugins/ai-rules-plugin/frontend/about/#features","title":"Features","text":""},{"location":"plugins/ai-rules-plugin/frontend/about/#rule-visualization","title":"Rule Visualization","text":"<ul> <li>Display rules from multiple AI coding assistant sources</li> <li>Modern and clean UI with expandable rule cards</li> <li>Organized presentation of rule content and metadata</li> <li>Support for markdown formatting in rule content</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/about/#manual-filtering-with-apply-filter","title":"Manual Filtering with Apply Filter","text":"<ul> <li>Filter rules by type (Cursor, Copilot, Cline, Claude Code)</li> <li>Manual control with Apply Filter button functionality</li> <li>Configurable default rule types</li> <li>Always visible filter interface</li> <li>Status indicators for unsaved changes</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/about/#clickable-git-repository-links","title":"Clickable Git Repository Links","text":"<ul> <li>Launch icon (\u2197) for each rule to open files in git repositories</li> <li>Multi-provider support (GitHub, GitLab, etc.)</li> <li>Opens in new tab for easy access</li> <li>Direct linking to specific rule files</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/about/#statistics-and-overview","title":"Statistics and Overview","text":"<ul> <li>Total rule count display</li> <li>Breakdown by rule type</li> <li>Visual statistics cards</li> <li>Quick overview of available rules</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/about/#rule-content-management","title":"Rule Content Management","text":"<ul> <li>Expandable rule cards for detailed viewing</li> <li>Metadata display including file paths and descriptions</li> <li>Support for frontmatter in Cursor rules</li> <li>Markdown rendering for all rule types</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/about/#components","title":"Components","text":""},{"location":"plugins/ai-rules-plugin/frontend/about/#airulescomponent","title":"AIRulesComponent","text":"<p>The main component that provides:</p> <ul> <li>Rule visualization and management interface</li> <li>Filter controls for rule types</li> <li>Statistics display</li> <li>Error handling and loading states</li> </ul> <p>Example usage: <pre><code>import { AIRulesComponent } from '@terasky/backstage-plugin-ai-rules';\n\n// Default title \"AI Coding Rules\"\n&lt;AIRulesComponent /&gt;\n\n// Custom title\n&lt;AIRulesComponent title=\"Development Guidelines\" /&gt;\n</code></pre></p>"},{"location":"plugins/ai-rules-plugin/frontend/about/#component-props","title":"Component Props","text":"Property Type Default Description <code>title</code> <code>string</code> <code>\"AI Coding Rules\"</code> The title displayed at the top of the component"},{"location":"plugins/ai-rules-plugin/frontend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/ai-rules-plugin/frontend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage catalog entities</li> <li>AI Rules backend plugin</li> <li>Repository source locations</li> <li>Entity metadata</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/about/#supported-rule-types","title":"Supported Rule Types","text":"<ul> <li>Cursor: <code>.mdc</code> files with frontmatter metadata</li> <li>Copilot: Markdown instructions with automatic section parsing  </li> <li>Cline: Markdown files with section extraction</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/about/#rule-detection","title":"Rule Detection","text":"<p>The plugin automatically detects components with: - Git source locations in entity metadata - Repository annotations - Supported rule file patterns</p>"},{"location":"plugins/ai-rules-plugin/frontend/about/#error-handling","title":"Error Handling","text":"<ul> <li>Clear error messages for missing rules</li> <li>Loading states during rule fetching</li> <li>Graceful degradation for unsupported repositories</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/about/#use-cases","title":"Use Cases","text":""},{"location":"plugins/ai-rules-plugin/frontend/about/#development-team-guidelines","title":"Development Team Guidelines","text":"<ol> <li>Centralize AI coding rules across projects</li> <li>Ensure consistent AI assistant configurations</li> <li>Share best practices for AI-assisted development</li> <li>Maintain rule documentation alongside code</li> </ol>"},{"location":"plugins/ai-rules-plugin/frontend/about/#rule-management","title":"Rule Management","text":"<ol> <li>Discover existing AI rules in repositories</li> <li>Validate rule configurations</li> <li>Monitor rule adoption across teams</li> <li>Track rule evolution over time</li> </ol>"},{"location":"plugins/ai-rules-plugin/frontend/about/#code-quality-assurance","title":"Code Quality Assurance","text":"<ol> <li>Enforce coding standards through AI rules</li> <li>Maintain consistency across AI assistants</li> <li>Document preferred coding patterns</li> <li>Share domain-specific guidelines </li> </ol>"},{"location":"plugins/ai-rules-plugin/frontend/configure/","title":"Configuring the AI Coding Rules Frontend Plugin","text":"<p>This guide covers the configuration options available for the AI Coding Rules frontend plugin.</p>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#component-overview","title":"Component Overview","text":"<p>The plugin provides three main components:</p> <ol> <li>AiInstructionsComponent (Recommended)</li> <li>Unified component with tabbed interface</li> <li>Combines AI rules and MCP server functionality</li> <li>Provides seamless navigation between features</li> <li> <p>Recommended for most use cases</p> </li> <li> <p>AIRulesComponent</p> </li> <li>Standalone component for AI coding rules</li> <li>Use when you only need rules functionality</li> <li> <p>Can be used multiple times with different configurations</p> </li> <li> <p>MCPServersComponent</p> </li> <li>Standalone component for MCP server configuration</li> <li>Displays server configurations from multiple sources</li> <li>Groups servers by source (Cursor, VSCode, Claude)</li> </ol>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The configuration in <code>app-config.yaml</code> is still respected:</p> <pre><code>aiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n</code></pre> <p>The plugin will be automatically integrated into the appropriate entity pages without requiring manual route configuration.</p>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#plugin-configuration","title":"Plugin Configuration","text":""},{"location":"plugins/ai-rules-plugin/frontend/configure/#basic-configuration","title":"Basic Configuration","text":"<p>Configure the plugin behavior in your <code>app-config.yaml</code>:</p> <pre><code>aiRules:\n  # Configure which rule types are available for selection\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n    - claude-code\n  # Configure which rule types are pre-selected by default\n  defaultRuleTypes:\n    - cursor\n    - claude-code\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#configuration-options","title":"Configuration Options","text":"Option Type Default Description <code>allowedRuleTypes</code> <code>string[]</code> <code>[\"cursor\", \"copilot\", \"cline\", \"claude-code\"]</code> Array of rule types available for selection <code>defaultRuleTypes</code> <code>string[]</code> <code>[]</code> Array of rule types pre-selected when component loads. If not specified, defaults to empty array (no auto-search)"},{"location":"plugins/ai-rules-plugin/frontend/configure/#supported-rule-types","title":"Supported Rule Types","text":"<ul> <li><code>cursor</code>: Cursor IDE rules from <code>.cursor/rules/*.mdc</code> files</li> <li><code>copilot</code>: GitHub Copilot rules from <code>.github/copilot-instructions.md</code></li> <li><code>cline</code>: Cline AI rules from <code>.clinerules/*.md</code> files</li> <li><code>claude-code</code>: Claude Code rules from <code>CLAUDE.md</code> files in repository root</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#filtering-behavior","title":"Filtering Behavior","text":"<p>The plugin uses manual filtering with Apply Filter functionality:</p> <ul> <li>No Auto-Search: By default, no search is performed when the component loads</li> <li>Manual Control: Users must select rule types and click \"Apply Filter\" to search</li> <li>Always Visible: Filter interface is always shown, even when results are empty</li> <li>Configurable Defaults: Use <code>defaultRuleTypes</code> to pre-select specific rule types</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#configuration-examples","title":"Configuration Examples","text":"<pre><code># No rules pre-selected (default behavior)\naiRules:\n  allowedRuleTypes: [\"cursor\", \"copilot\", \"cline\", \"claude-code\"]\n  # defaultRuleTypes not specified = empty array\n\n# Pre-select specific rule types\naiRules:\n  allowedRuleTypes: [\"cursor\", \"copilot\", \"cline\", \"claude-code\"]\n  defaultRuleTypes: [\"cursor\", \"claude-code\"]\n\n# Empty pre-selection (explicit)\naiRules:\n  allowedRuleTypes: [\"cursor\", \"copilot\", \"cline\", \"claude-code\"]\n  defaultRuleTypes: []\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#component-configuration","title":"Component Configuration","text":"<p>The plugin provides three main components, each with their own configuration options:</p>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#aiinstructionscomponent-props-recommended","title":"AiInstructionsComponent Props (Recommended)","text":"<p>The unified component that provides both AI rules and MCP server functionality:</p> <pre><code>interface AiInstructionsComponentProps {\n  title?: string;  // Optional title for the component\n}\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#usage-examples","title":"Usage Examples","text":"<pre><code>// Default usage\n&lt;EntityLayout.Route path=\"/ai-rules\" title=\"AI Rules\"&gt;\n  &lt;AiInstructionsComponent /&gt;\n&lt;/EntityLayout.Route&gt;\n\n// Custom title\n&lt;EntityLayout.Route path=\"/coding-rules\" title=\"Coding Rules\"&gt;\n  &lt;AiInstructionsComponent title=\"Development Guidelines\" /&gt;\n&lt;/EntityLayout.Route&gt;\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#airulescomponent-props","title":"AIRulesComponent Props","text":"<p>The standalone AI rules component:</p> <pre><code>interface AIRulesComponentProps {\n  title?: string;  // Optional title for the component\n}\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#usage-examples_1","title":"Usage Examples","text":"<pre><code>// Default usage\n&lt;EntityLayout.Route path=\"/ai-rules\" title=\"AI Rules\"&gt;\n  &lt;AIRulesComponent /&gt;\n&lt;/EntityLayout.Route&gt;\n\n// Multiple instances with different titles\n&lt;EntityLayout.Route path=\"/cursor-rules\" title=\"Cursor Rules\"&gt;\n  &lt;AIRulesComponent title=\"Cursor IDE Rules\" /&gt;\n&lt;/EntityLayout.Route&gt;\n\n&lt;EntityLayout.Route path=\"/copilot-rules\" title=\"Copilot Rules\"&gt;\n  &lt;AIRulesComponent title=\"GitHub Copilot Guidelines\" /&gt;\n&lt;/EntityLayout.Route&gt;\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#mcpserverscomponent-props","title":"MCPServersComponent Props","text":"<p>The standalone MCP servers component:</p> <pre><code>interface MCPServersComponentProps {\n  title?: string;  // Optional title for the component\n}\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#usage-examples_2","title":"Usage Examples","text":"<pre><code>// Default usage\n&lt;EntityLayout.Route path=\"/mcp-servers\" title=\"MCP Servers\"&gt;\n  &lt;MCPServersComponent /&gt;\n&lt;/EntityLayout.Route&gt;\n\n// Custom title\n&lt;EntityLayout.Route path=\"/mcp\" title=\"MCP Configuration\"&gt;\n  &lt;MCPServersComponent title=\"MCP Server Configurations\" /&gt;\n&lt;/EntityLayout.Route&gt;\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#entity-configuration","title":"Entity Configuration","text":""},{"location":"plugins/ai-rules-plugin/frontend/configure/#required-annotations","title":"Required Annotations","text":"<p>Entities must have source location information for the plugin to work:</p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: my-service\n  annotations:\n    # Required: Source location pointing to Git repository\n    backstage.io/source-location: url:https://github.com/org/my-repo\nspec:\n  type: service\n  lifecycle: production\n  owner: team-a\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#optional-entity-configuration","title":"Optional Entity Configuration","text":"<pre><code>metadata:\n  annotations:\n    # Optional: Specific branch to check for rules\n    backstage.io/source-location: url:https://github.com/org/my-repo/tree/main\n\n    # Optional: Subdirectory if rules are in a specific path\n    backstage.io/source-location: url:https://github.com/org/my-repo/tree/main/services/api\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#clickable-git-links","title":"Clickable Git Links","text":"<p>Each rule now includes a clickable launch icon (\u2197) that opens the rule file directly in your git repository:</p> <ul> <li>Multi-Provider Support: Works with GitHub, GitLab, and other git providers</li> <li>New Tab: Opens in a new browser tab for easy access</li> <li>Direct File Access: Links directly to the specific rule file in the repository</li> <li>Non-Intrusive: Doesn't interfere with existing accordion/card functionality</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#supported-git-providers","title":"Supported Git Providers","text":"<ul> <li>GitHub: Converts to <code>/blob/main/</code> URL format</li> <li>GitLab: Converts to <code>/-/blob/main/</code> URL format  </li> <li>Generic Providers: Uses standard <code>/blob/main/</code> format</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#apply-filter-functionality","title":"Apply Filter Functionality","text":"<p>The component now uses manual filtering instead of automatic rule loading:</p> <ul> <li>Apply Filter Button: Users must click to trigger searches</li> <li>Unsaved Changes Indicator: Shows when filter selections haven't been applied</li> <li>Status Messages: Clear feedback about filter state and required actions</li> <li>Reset Filters: Quickly reset to all allowed rule types</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#rule-file-configuration","title":"Rule File Configuration","text":""},{"location":"plugins/ai-rules-plugin/frontend/configure/#cursor-rules-cursorrulesmdc","title":"Cursor Rules (.cursor/rules/*.mdc)","text":"<p>Cursor rule files support frontmatter for metadata:</p> <pre><code>---\ndescription: \"TypeScript coding standards\"\nglobs: [\"*.ts\", \"*.tsx\"]\nalwaysApply: true\n---\n\n# TypeScript Rules\n\nUse strict typing and avoid any types.\nFollow naming conventions for interfaces and types.\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#github-copilot-rules-githubcopilot-instructionsmd","title":"GitHub Copilot Rules (.github/copilot-instructions.md)","text":"<p>Simple markdown file with sections automatically split by empty lines:</p> <pre><code># Copilot Instructions\n\nUse TypeScript for all new code.\nFollow existing code patterns.\n\nPrefer functional components in React.\nUse hooks instead of class components.\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#cline-rules-clinerulesmd","title":"Cline Rules (.clinerules/*.md)","text":"<p>Markdown files with automatic section extraction:</p> <pre><code># Development Guidelines\n\n## Code Style\n- Use ESLint and Prettier\n- Follow team conventions\n\n## Testing\n- Write unit tests for all functions\n- Use Jest for testing framework\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#claude-code-rules-claudemd","title":"Claude Code Rules (CLAUDE.md)","text":"<p>Simple markdown file in repository root with automatic title extraction:</p> <pre><code># Claude Code Guidelines\n\n## Development Principles\n- Write clean, readable code\n- Follow SOLID principles\n- Use meaningful variable names\n\n## Code Review Standards\n- All code must be reviewed\n- Tests must pass before merge\n- Documentation should be updated\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"plugins/ai-rules-plugin/frontend/configure/#custom-rule-type-configuration","title":"Custom Rule Type Configuration","text":"<p>If you want to limit to specific rule types for certain environments:</p> <pre><code># Development environment - show all types\naiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n\n# Production environment - only show official guidelines\naiRules:\n  allowedRuleTypes:\n    - copilot\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<pre><code># app-config.yaml (base configuration)\naiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n\n---\n# app-config.development.yaml\naiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot\n    - cline\n\n---\n# app-config.production.yaml\naiRules:\n  allowedRuleTypes:\n    - copilot\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#styling-and-theming","title":"Styling and Theming","text":"<p>The plugin uses Material-UI components and respects your Backstage theme configuration. It automatically adapts to:</p> <ul> <li>Light/dark theme modes</li> <li>Custom color schemes</li> <li>Typography settings</li> <li>Component spacing</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#performance-considerations","title":"Performance Considerations","text":""},{"location":"plugins/ai-rules-plugin/frontend/configure/#rule-file-size","title":"Rule File Size","text":"<ul> <li>Keep rule files reasonably sized (&lt; 100KB recommended)</li> <li>Split large rule sets into multiple files</li> <li>Use clear file names for better organization</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#repository-access","title":"Repository Access","text":"<ul> <li>Ensure backend has efficient access to repositories</li> <li>Consider caching for frequently accessed rules</li> <li>Monitor API rate limits for external repositories</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#component-usage","title":"Component Usage","text":"<ul> <li>Avoid placing the component on high-traffic pages if not needed</li> <li>Consider lazy loading for large rule sets</li> <li>Use appropriate tab placement for user workflow</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"plugins/ai-rules-plugin/frontend/configure/#rule-types-not-showing","title":"Rule Types Not Showing","text":"<ol> <li>Check <code>allowedRuleTypes</code> configuration</li> <li>Verify rule files exist in expected locations</li> <li>Confirm file naming follows conventions</li> <li>Check backend logs for parsing errors</li> </ol>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#performance-issues","title":"Performance Issues","text":"<ol> <li>Review rule file sizes</li> <li>Check repository access performance</li> <li>Monitor network requests in browser dev tools</li> <li>Consider component placement optimization</li> </ol>"},{"location":"plugins/ai-rules-plugin/frontend/configure/#access-issues","title":"Access Issues","text":"<ol> <li>Verify entity source location annotations</li> <li>Check SCM integration configuration</li> <li>Confirm repository permissions</li> <li>Test backend API endpoints directly </li> </ol>"},{"location":"plugins/ai-rules-plugin/frontend/install/","title":"Installing the AI Coding Rules Frontend Plugin","text":"<p>This guide will help you install and set up the AI Coding Rules frontend plugin in your Backstage instance.</p>"},{"location":"plugins/ai-rules-plugin/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>The AI Coding Rules backend plugin installed and configured</li> <li>Access to repositories containing AI coding rules</li> <li>Components with source location annotations</li> </ol>"},{"location":"plugins/ai-rules-plugin/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/ai-rules-plugin/frontend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/app add @terasky/backstage-plugin-ai-rules\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/install/#2-add-to-entity-pages","title":"2. Add to Entity Pages","text":"<p>Add the AI Rules components to your entity pages in <code>packages/app/src/components/catalog/EntityPage.tsx</code>. You can use either the unified <code>AiInstructionsComponent</code> (recommended) or the individual components:</p> <pre><code>import { \n  AiInstructionsComponent,  // Unified component with tabs\n  AIRulesComponent,         // Just the rules component\n  MCPServersComponent       // Just the MCP servers component\n} from '@terasky/backstage-plugin-ai-rules';\n\nconst componentPage = (\n  &lt;EntityLayout&gt;\n    {/* ... other tabs */}\n\n    {/* Option 1: Unified Component (Recommended) */}\n    &lt;EntityLayout.Route path=\"/ai-rules\" title=\"AI Rules\"&gt;\n      &lt;AiInstructionsComponent /&gt;\n    &lt;/EntityLayout.Route&gt;\n\n    {/* Option 2: Separate Components */}\n    &lt;EntityLayout.Route path=\"/ai-rules\" title=\"AI Rules\"&gt;\n      &lt;AIRulesComponent /&gt;\n    &lt;/EntityLayout.Route&gt;\n    &lt;EntityLayout.Route path=\"/mcp-servers\" title=\"MCP Servers\"&gt;\n      &lt;MCPServersComponent /&gt;\n    &lt;/EntityLayout.Route&gt;\n\n    {/* With custom titles */}\n    &lt;EntityLayout.Route path=\"/coding-rules\" title=\"Coding Rules\"&gt;\n      &lt;AiInstructionsComponent title=\"Development Guidelines\" /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/install/#3-optional-add-to-component-overview","title":"3. Optional: Add to Component Overview","text":"<p>You can also add the component to the main overview tab for quick access:</p> <pre><code>const overviewContent = (\n  &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n    {/* ... other overview cards */}\n    &lt;Grid item md={6} xs={12}&gt;\n      &lt;AIRulesComponent title=\"AI Coding Rules\" /&gt;\n    &lt;/Grid&gt;\n  &lt;/Grid&gt;\n);\n</code></pre>"},{"location":"plugins/ai-rules-plugin/frontend/install/#configuration","title":"Configuration","text":"<p>The plugin behavior can be configured through your <code>app-config.yaml</code>:</p> <pre><code>aiRules:\n  allowedRuleTypes:\n    - cursor\n    - copilot  \n    - cline\n</code></pre> <p>If not specified, defaults to <code>[\"cursor\", \"copilot\"]</code>.</p>"},{"location":"plugins/ai-rules-plugin/frontend/install/#component-integration","title":"Component Integration","text":""},{"location":"plugins/ai-rules-plugin/frontend/install/#entity-requirements","title":"Entity Requirements","text":"<p>For the plugin to work with your entities, they need:</p> <ol> <li>Source Location: Entity must have a source location annotation pointing to a Git repository</li> <li>Repository Access: Backend must have access to the repository</li> <li>Rule Files: Repository must contain AI rule files in supported locations</li> </ol> <p>Example entity with source location: <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: my-service\n  annotations:\n    backstage.io/source-location: url:https://github.com/org/repo\nspec:\n  type: service\n  lifecycle: production\n  owner: team-a\n</code></pre></p>"},{"location":"plugins/ai-rules-plugin/frontend/install/#supported-file-patterns","title":"Supported File Patterns","text":"<p>The plugin looks for rules in these locations:</p> <ul> <li>Cursor Rules: <code>.cursor/rules/*.mdc</code></li> <li>GitHub Copilot Rules: <code>.github/copilot-instructions.md</code></li> <li>Cline Rules: <code>.clinerules/*.md</code></li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { aiRulesPlugin } from '@terasky/backstage-plugin-ai-rules/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    aiRulesPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/ai-rules-plugin/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The AI Rules tab appears on component pages</li> <li>Rules are displayed for components with valid repositories</li> <li>Filtering works correctly for different rule types</li> </ol>"},{"location":"plugins/ai-rules-plugin/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>"},{"location":"plugins/ai-rules-plugin/frontend/install/#component-not-displaying","title":"Component Not Displaying","text":"<ul> <li>Verify the component is properly imported and added to entity pages</li> <li>Check that the route path matches your navigation</li> <li>Ensure proper JSX syntax in EntityPage.tsx</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/install/#no-rules-found","title":"No Rules Found","text":"<ul> <li>Confirm the backend plugin is installed and running</li> <li>Verify entity has source location annotation</li> <li>Check that repository contains rule files in expected locations</li> <li>Ensure backend has access to the repository</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/install/#loading-issues","title":"Loading Issues","text":"<ul> <li>Check browser console for errors</li> <li>Verify backend API endpoints are accessible</li> <li>Confirm entity reference format is correct</li> <li>Check network connectivity to repository</li> </ul>"},{"location":"plugins/ai-rules-plugin/frontend/install/#permission-errors","title":"Permission Errors","text":"<ul> <li>Verify SCM integration configuration</li> <li>Check repository access permissions</li> <li>Ensure proper authentication for private repositories</li> </ul> <p>For configuration options and customization, proceed to the Configuration Guide. </p>"},{"location":"plugins/crossplane/overview/","title":"Crossplane Plugins","text":"<p>The Crossplane plugins for Backstage provide a comprehensive solution for managing and visualizing Crossplane resources within your Backstage instance. These plugins enable teams to effectively monitor and control their cloud resources provisioned through Crossplane, with support for both Crossplane v1.x and v2.x APIs.</p>"},{"location":"plugins/crossplane/overview/#plugin-suite-components","title":"Plugin Suite Components","text":"<p>The Crossplane plugin suite consists of several components:</p> <ul> <li>Frontend Plugin (<code>@terasky/backstage-plugin-crossplane-resources</code>): </li> <li>Visualization and management of Crossplane resources</li> <li>Support for both v1.x and v2.x APIs</li> <li>Resource graphs and relationship mapping</li> <li>YAML and event viewers</li> <li> <p>Overview cards and status monitoring</p> </li> <li> <p>Backend Plugin (<code>@terasky/backstage-plugin-crossplane-resources-backend</code>):</p> </li> <li>Kubernetes API integration</li> <li>Resource data retrieval and processing</li> <li>Event monitoring and tracking</li> <li>Permission management and access control</li> <li> <p>MCP actions for programmatic access</p> </li> <li> <p>Common Library (<code>@terasky/backstage-plugin-crossplane-common</code>):</p> </li> <li>Shared types and interfaces</li> <li>Permission definitions</li> <li>Common utilities</li> <li>Resource type definitions</li> </ul>"},{"location":"plugins/crossplane/overview/#key-features","title":"Key Features","text":""},{"location":"plugins/crossplane/overview/#resource-management","title":"Resource Management","text":"<ul> <li>Comprehensive Resource Support:</li> <li>Claims and Composite Resources (XRs)</li> <li>Managed Resources (MRs)</li> <li>XRDs and Compositions</li> <li>Functions and Packages</li> <li>Support for both v1.x and v2.x APIs</li> </ul>"},{"location":"plugins/crossplane/overview/#visualization","title":"Visualization","text":"<ul> <li>Resource Graph:</li> <li>Interactive relationship visualization</li> <li>Dependency tracking</li> <li>Resource hierarchy display</li> <li>Support for both API versions</li> </ul>"},{"location":"plugins/crossplane/overview/#monitoring","title":"Monitoring","text":"<ul> <li>Event Tracking:</li> <li>Real-time event monitoring</li> <li>Resource status updates</li> <li>Condition tracking</li> <li>Error and warning detection</li> </ul>"},{"location":"plugins/crossplane/overview/#configuration","title":"Configuration","text":"<ul> <li>YAML Management:</li> <li>View and inspect configurations</li> <li>Copy to clipboard functionality</li> <li>Download YAML files</li> <li>Syntax highlighting</li> </ul>"},{"location":"plugins/crossplane/overview/#access-control","title":"Access Control","text":"<ul> <li>Permission Management:</li> <li>Fine-grained access control</li> <li>Role-based permissions</li> <li>Resource-specific controls</li> <li>Action-based restrictions</li> </ul>"},{"location":"plugins/crossplane/overview/#integration","title":"Integration","text":"<ul> <li>MCP Actions:</li> <li>Programmatic resource access</li> <li>Event retrieval</li> <li>Graph generation</li> <li>Status monitoring</li> </ul>"},{"location":"plugins/crossplane/overview/#screenshots","title":"Screenshots","text":""},{"location":"plugins/crossplane/overview/#resource-graph-view","title":"Resource Graph View","text":""},{"location":"plugins/crossplane/overview/#resource-table-view","title":"Resource Table View","text":""},{"location":"plugins/crossplane/overview/#overview-information","title":"Overview Information","text":""},{"location":"plugins/crossplane/overview/#available-permissions","title":"Available Permissions","text":"<p>The plugin suite provides granular permission controls for:</p> <ul> <li>Crossplane Claims (list, view YAML, show events)</li> <li>Composite Resources (list, view YAML, show events)</li> <li>Managed Resources (list, view YAML, show events)</li> <li>Additional Resources like XRD, Composition, Function (list, view YAML, show events)</li> <li>Resource Graph visualization</li> </ul>"},{"location":"plugins/crossplane/overview/#mcp-actions-integration","title":"MCP Actions Integration","text":"<p>The Crossplane plugin provides MCP (Model Control Protocol) actions for interacting with Crossplane resources. To enable these actions:</p> <ol> <li> <p>First, ensure you have the MCP actions backend plugin installed and configured. See the MCP Actions Backend Plugin documentation for setup instructions.</p> </li> <li> <p>Add the plugin to your actions configuration in <code>app-config.yaml</code>:</p> </li> </ol> <pre><code>backend:\n  actions:\n    pluginSources:\n      - 'catalog'\n      - 'crossplane'\n      # ... other action sources\n</code></pre>"},{"location":"plugins/crossplane/overview/#available-mcp-actions","title":"Available MCP Actions","text":"<p>The plugin provides the following MCP actions:</p> <ul> <li><code>get_crossplane_resources</code>: Get Crossplane resources and their dependencies</li> <li>Input: Cluster name, resource details (group, version, plural, etc.)</li> <li> <p>Output: List of resources with their relationships and status</p> </li> <li> <p><code>get_crossplane_events</code>: Get events for a specific Crossplane resource</p> </li> <li>Input: Cluster name, resource details (name, namespace, kind)</li> <li> <p>Output: List of events with timestamps and details</p> </li> <li> <p><code>get_crossplane_resource_graph</code>: Get resource graph (v1.x API)</p> </li> <li>Input: Cluster name, XRD and claim details</li> <li> <p>Output: Resource graph data showing relationships</p> </li> <li> <p><code>get_crossplane_v2_resource_graph</code>: Get resource graph (v2.x API)</p> </li> <li>Input: Cluster name, resource details</li> <li>Output: Resource graph data for v2 resources</li> </ul>"},{"location":"plugins/crossplane/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the Crossplane plugins, you'll need to:</p> <ol> <li>Install and configure the Kubernetes Ingestor plugin</li> <li>Install and configure the backend plugin</li> <li>Install the frontend components</li> <li>Configure MCP actions in your app-config.yaml</li> <li>Configure permissions (optional but recommended)</li> <li>Configure the plugins according to your needs</li> </ol> <p>For detailed installation and configuration instructions, refer to the individual plugin documentation:</p> <ul> <li>Kubernetes Ingestor Plugin Installation</li> <li>Kubernetes Ingestor Plugin Configuration</li> <li>Frontend Plugin Installation</li> <li>Frontend Plugin Configuration</li> <li>Backend Plugin Installation</li> <li>Backend Plugin Configuration</li> </ul>"},{"location":"plugins/crossplane/backend/about/","title":"Crossplane Resources Backend Plugin","text":""},{"location":"plugins/crossplane/backend/about/#overview","title":"Overview","text":"<p>The Crossplane Resources backend plugin provides comprehensive functionality for managing Crossplane resources within your Backstage instance. It handles API integration, resource operations, permission management, and MCP actions support, with full compatibility for both Crossplane v1.x and v2.x APIs.</p>"},{"location":"plugins/crossplane/backend/about/#features","title":"Features","text":""},{"location":"plugins/crossplane/backend/about/#resource-management","title":"Resource Management","text":"<ul> <li>Comprehensive resource data retrieval</li> <li>Support for different resource types:</li> <li>Claims and Composite Resources (XRs)</li> <li>Managed Resources (MRs)</li> <li>Additional Resources (XRD, Composition, Function)</li> <li>Full v1.x and v2.x API support</li> </ul>"},{"location":"plugins/crossplane/backend/about/#api-integration","title":"API Integration","text":"<ul> <li>Direct Kubernetes API communication</li> <li>Resource data retrieval and processing</li> <li>Event monitoring and streaming</li> <li>Resource graph generation</li> <li>Support for both API versions</li> </ul>"},{"location":"plugins/crossplane/backend/about/#permission-management","title":"Permission Management","text":"<ul> <li>Fine-grained access control</li> <li>Resource-level permissions</li> <li>Action-based permissions</li> <li>Integration with Backstage's framework</li> </ul>"},{"location":"plugins/crossplane/backend/about/#mcp-actions","title":"MCP Actions","text":"<ul> <li>Resource data retrieval actions</li> <li>Event monitoring actions</li> <li>Resource graph generation</li> <li>Support for both API versions</li> </ul>"},{"location":"plugins/crossplane/backend/about/#technical-architecture","title":"Technical Architecture","text":""},{"location":"plugins/crossplane/backend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage Permission Framework</li> <li>Crossplane Resources Frontend Plugin</li> </ul>"},{"location":"plugins/crossplane/backend/about/#permission-model","title":"Permission Model","text":"<p>The plugin implements a comprehensive permission model covering:</p> <ol> <li> <p>Resource Types</p> <ul> <li>Claims</li> <li>Composite Resources</li> <li>Managed Resources</li> <li>Additional Resources</li> </ul> </li> <li> <p>Action Types</p> <ul> <li>List resources</li> <li>View YAML configurations</li> <li>Show resource events</li> <li>View resource graphs</li> </ul> </li> <li> <p>Permission Scopes</p> <ul> <li>Global permissions</li> <li>Resource-specific permissions</li> <li>Action-specific permissions</li> </ul> </li> </ol>"},{"location":"plugins/crossplane/backend/about/#security-considerations","title":"Security Considerations","text":"<ul> <li>Secure permission validation</li> <li>Token-based authentication</li> <li>Role-based access control</li> <li>Audit logging capabilities</li> </ul>"},{"location":"plugins/crossplane/backend/about/#integration-benefits","title":"Integration Benefits","text":"<ol> <li> <p>Enhanced Security</p> <ul> <li>Granular access control</li> <li>Consistent permission enforcement</li> <li>Audit trail capabilities</li> </ul> </li> <li> <p>Improved Compliance</p> <ul> <li>Policy-based access control</li> <li>Resource usage tracking</li> <li>Access pattern monitoring</li> </ul> </li> <li> <p>Better User Experience</p> <ul> <li>Seamless integration with frontend</li> <li>Consistent permission behavior</li> <li>Clear access control feedback</li> </ul> </li> </ol>"},{"location":"plugins/crossplane/backend/about/#use-cases","title":"Use Cases","text":""},{"location":"plugins/crossplane/backend/about/#resource-access-control","title":"Resource Access Control","text":"<ul> <li>Control who can view different resource types</li> <li>Manage access to sensitive configurations</li> <li>Restrict event viewing capabilities</li> </ul>"},{"location":"plugins/crossplane/backend/about/#compliance-management","title":"Compliance Management","text":"<ul> <li>Enforce organizational policies</li> <li>Track resource access patterns</li> <li>Maintain audit trails</li> </ul>"},{"location":"plugins/crossplane/backend/about/#team-collaboration","title":"Team Collaboration","text":"<ul> <li>Define team-specific access levels</li> <li>Share resources securely</li> <li>Manage cross-team permissions</li> </ul>"},{"location":"plugins/crossplane/backend/configure/","title":"Configuring the Crossplane Resources Backend Plugin","text":"<p>The Crossplane Resources backend plugin integrates with Backstage's permission framework to provide access control for Crossplane resources.</p>"},{"location":"plugins/crossplane/backend/configure/#available-permissions","title":"Available Permissions","text":"<p>The plugin provides the following permissions for managing Crossplane resources:</p>"},{"location":"plugins/crossplane/backend/configure/#claims","title":"Claims","text":"<ul> <li><code>crossplane.claims.list</code>: List Crossplane Claims</li> <li><code>crossplane.claims.view-yaml</code>: View YAML of Crossplane Claims</li> <li><code>crossplane.claims.show-events</code>: View Events of Crossplane Claims</li> </ul>"},{"location":"plugins/crossplane/backend/configure/#composite-resources","title":"Composite Resources","text":"<ul> <li><code>crossplane.composite-resources.list</code>: List Crossplane Composite Resources</li> <li><code>crossplane.composite-resources.view-yaml</code>: View YAML of Crossplane Composite Resources</li> <li><code>crossplane.composite-resources.show-events</code>: View Events of Crossplane Composite Resources</li> </ul>"},{"location":"plugins/crossplane/backend/configure/#managed-resources","title":"Managed Resources","text":"<ul> <li><code>crossplane.managed-resources.list</code>: List Crossplane Managed Resources</li> <li><code>crossplane.managed-resources.view-yaml</code>: View YAML of Crossplane Managed Resources</li> <li><code>crossplane.managed-resources.show-events</code>: View Events of Crossplane Managed Resources</li> </ul>"},{"location":"plugins/crossplane/backend/configure/#additional-resources","title":"Additional Resources","text":"<ul> <li><code>crossplane.additional-resources.list</code>: List Crossplane Additional Resources (XRD, Composition, Function)</li> <li><code>crossplane.additional-resources.view-yaml</code>: View YAML of Crossplane Additional Resources</li> <li><code>crossplane.additional-resources.show-events</code>: View Events of Crossplane Additional Resources</li> </ul>"},{"location":"plugins/crossplane/backend/configure/#resource-graph","title":"Resource Graph","text":"<ul> <li><code>crossplane.resource-graph.show</code>: View Resource Graph of Crossplane Resources</li> </ul>"},{"location":"plugins/crossplane/backend/configure/#basic-configuration","title":"Basic Configuration","text":"<p>The plugin uses Backstage's permission framework. To enable it, add the following to your <code>app-config.yaml</code>:</p> <pre><code>permission:\n  enabled: true # Enable Backstage permission framework\n</code></pre>"},{"location":"plugins/crossplane/backend/configure/#permission-policy-configuration","title":"Permission Policy Configuration","text":"<p>You can configure permission policies in your Backstage permission policy file. Here's an example policy that grants all Crossplane permissions to a specific role:</p> <pre><code>// packages/backend/src/plugins/permission.ts\nimport { CrossplanePermission } from '@terasky/backstage-plugin-crossplane-common';\n\nclass CrossplanePermissionPolicy implements PermissionPolicy {\n  async handle(\n    request: PolicyQuery,\n    user?: BackstageIdentityResponse,\n  ): Promise&lt;PolicyDecision&gt; {\n    if (isPermission(request.permission, CrossplanePermission)) {\n      // Implement your permission logic here\n      return { result: AuthorizeResult.ALLOW };\n    }\n\n    return { result: AuthorizeResult.DENY };\n  }\n}\n</code></pre>"},{"location":"plugins/crossplane/backend/configure/#using-the-community-rbac-plugin","title":"Using the Community RBAC Plugin","text":"<p>You can also use the RBAC plugins from the backstage community and create roles via the UI or via a CSV file.</p>"},{"location":"plugins/crossplane/backend/configure/#example-via-csv-and-config","title":"Example via CSV and config","text":"<p>app-config.yaml snippet <pre><code>permission:\n  enabled: true\n  rbac:\n    policies-csv-file: /path/to/permissions.csv\n    policyFileReload: true\n    pluginsWithPermission:\n      - kubernetes\n      - crossplane\n</code></pre></p> <p>CSV file snippet <pre><code>p, role:default/platformteam, kubernetes.proxy, use, allow\np, role:default/platformteam, kubernetes.resources.read, read, allow\np, role:default/platformteam, kubernetes.clusters.read, read, allow\np, role:default/platformteam, crossplane.claims.list, read, allow\np, role:default/platformteam, crossplane.claims.view-yaml, read, allow\np, role:default/platformteam, crossplane.claims.show-events, read, allow\np, role:default/platformteam, crossplane.composite-resources.list, read, allow\np, role:default/platformteam, crossplane.composite-resources.view-yaml, read, allow\np, role:default/platformteam, crossplane.composite-resources.show-events, read, allow\np, role:default/platformteam, crossplane.managed-resources.list, read, allow\np, role:default/platformteam, crossplane.managed-resources.view-yaml, read, allow\np, role:default/platformteam, crossplane.managed-resources.show-events, read, allow\np, role:default/platformteam, crossplane.resource-graph.show, read, allow\np, role:default/platformteam, crossplane.overview.view, read, allow\np, role:default/platformteam, crossplane.additional-resources.list, read, allow\np, role:default/platformteam, crossplane.additional-resources.view-yaml, read, allow\np, role:default/platformteam, crossplane.additional-resources.show-events, read, allow\ng, group:default/all_users, role:default/platformteam\n</code></pre></p>"},{"location":"plugins/crossplane/backend/configure/#best-practices","title":"Best Practices","text":""},{"location":"plugins/crossplane/backend/configure/#security","title":"Security","text":"<ol> <li> <p>Permission Policies</p> <ul> <li>Follow the principle of least privilege</li> <li>Regularly review and update policies</li> <li>Use specific permissions over wildcards</li> </ul> </li> <li> <p>Authentication</p> <ul> <li>Use secure authentication methods</li> <li>Implement token rotation</li> <li>Enable audit logging</li> </ul> </li> </ol>"},{"location":"plugins/crossplane/backend/configure/#monitoring","title":"Monitoring","text":"<ol> <li> <p>Logging</p> <ul> <li>Configure appropriate log levels</li> <li>Implement log rotation</li> <li>Set up log aggregation</li> </ul> </li> <li> <p>Metrics</p> <ul> <li>Monitor permission checks</li> <li>Track API usage</li> <li>Set up alerts for anomalies</li> </ul> </li> </ol>"},{"location":"plugins/crossplane/backend/configure/#troubleshooting","title":"Troubleshooting","text":""},{"location":"plugins/crossplane/backend/configure/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Permission Denied</p> <ul> <li>Check policy configuration</li> <li>Verify user roles</li> <li>Review permission logs</li> </ul> </li> <li> <p>Integration Problems</p> <ul> <li>Verify service connections</li> <li>Check authentication configuration</li> <li>Review Kubernetes plugin configurations</li> </ul> </li> </ol>"},{"location":"plugins/crossplane/backend/install/","title":"Installing the Crossplane Resources Backend Plugin","text":"<p>This guide will help you install and set up the Crossplane Resources backend plugin in your Backstage instance.</p>"},{"location":"plugins/crossplane/backend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the backend plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>Node.js and npm/yarn installed</li> <li>Access to your Backstage backend configuration</li> <li>The Crossplane Common library (<code>@terasky/backstage-plugin-crossplane-common</code>) installed</li> </ol>"},{"location":"plugins/crossplane/backend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/crossplane/backend/install/#1-add-required-packages","title":"1. Add Required Packages","text":"<p>Install the required package using your package manager:</p> <pre><code>yarn --cwd packages/backend add @terasky/backstage-plugin-crossplane-resources-backend\n</code></pre>"},{"location":"plugins/crossplane/backend/install/#2-add-to-backend","title":"2. Add to Backend","text":"<p>Modify your backend entry point (typically <code>packages/backend/src/index.ts</code>):</p> <pre><code>// In your backend initialization\nbackend.add(import('@terasky/backstage-plugin-crossplane-resources-backend'));\n</code></pre>"},{"location":"plugins/crossplane/backend/install/#3-configure-the-plugin","title":"3. Configure the plugin","text":"<p>Add the following to your <code>app-config.yaml</code>:</p> <pre><code>permission:\n  enabled: true # Enable Backstage permission framework\n\ncrossplane:\n  enablePermissions: true # Enable Crossplane permission checks\n</code></pre>"},{"location":"plugins/crossplane/backend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The backend starts without errors</li> <li>Permission endpoints are accessible</li> <li>Integration with the frontend plugin works correctly</li> </ol>"},{"location":"plugins/crossplane/backend/install/#testing-the-installation","title":"Testing the Installation","text":"<ol> <li> <p>Check Backend Health <pre><code>curl http://localhost:7007/api/crossplane/health\n</code></pre></p> </li> <li> <p>Test Frontend Integration</p> <ul> <li>Open a Crossplane resource in the frontend</li> <li>Verify permission checks are working</li> <li>Check access control behavior</li> </ul> </li> </ol>"},{"location":"plugins/crossplane/backend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>"},{"location":"plugins/crossplane/backend/install/#1-backend-startup-issues","title":"1. Backend Startup Issues","text":"<pre><code># Check backend logs\nyarn workspace backend start --verbose\n</code></pre>"},{"location":"plugins/crossplane/backend/install/#2-permission-framework-issues","title":"2. Permission Framework Issues","text":"<ul> <li>Verify permission framework is enabled</li> <li>Check permission policy configuration</li> <li>Review backend plugin configuration</li> </ul>"},{"location":"plugins/crossplane/backend/install/#3-integration-problems","title":"3. Integration Problems","text":"<ul> <li>Ensure frontend and backend versions match</li> <li>Check network connectivity</li> <li>Verify API endpoint configuration</li> </ul>"},{"location":"plugins/crossplane/backend/install/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure permission policies</li> <li>Set up role-based access control</li> <li>Test with different user roles</li> <li>Monitor permission enforcement</li> </ol> <p>Proceed to the Configuration Guide for detailed setup instructions.</p>"},{"location":"plugins/crossplane/frontend/about/","title":"Crossplane Resources Frontend Plugin","text":""},{"location":"plugins/crossplane/frontend/about/#overview","title":"Overview","text":"<p>The Crossplane Resources frontend plugin enhances your Backstage instance with comprehensive visualization and management capabilities for Crossplane resources. It provides an intuitive interface for viewing and managing Crossplane claims, composite resources (XRs), and managed resources.</p>"},{"location":"plugins/crossplane/frontend/about/#features","title":"Features","text":""},{"location":"plugins/crossplane/frontend/about/#resource-overview-card","title":"Resource Overview Card","text":"<ul> <li>Quick status overview of Crossplane resources</li> <li>Essential metadata display</li> <li>Direct links to detailed views</li> </ul>"},{"location":"plugins/crossplane/frontend/about/#resource-table-view","title":"Resource Table View","text":"<ul> <li>Comprehensive list of all related Crossplane resources</li> <li>Filtering and sorting capabilities</li> <li>Quick access to YAML and events for each resource</li> <li>Copy to clipboard and download YAML functionality</li> </ul>"},{"location":"plugins/crossplane/frontend/about/#resource-graph-view","title":"Resource Graph View","text":"<ul> <li>Visual representation of resource relationships</li> <li>Interactive graph navigation</li> <li>Support for both v1 (claims) and v2 (XR) resources</li> <li>Detailed resource information on node selection</li> </ul>"},{"location":"plugins/crossplane/frontend/about/#event-monitoring","title":"Event Monitoring","text":"<ul> <li>Real-time event tracking for resources</li> <li>Chronological event history</li> <li>Event filtering and sorting</li> </ul>"},{"location":"plugins/crossplane/frontend/about/#permission-integration","title":"Permission Integration","text":"<ul> <li>Seamless integration with Backstage's permission framework</li> <li>Granular access control for different features</li> <li>Conditional rendering based on user permissions</li> </ul>"},{"location":"plugins/crossplane/frontend/about/#components","title":"Components","text":"<p>The plugin provides several key components:</p> <ul> <li><code>CrossplaneResourcesTableSelector</code>: Main resource listing component</li> <li><code>CrossplaneOverviewCardSelector</code>: Summary card for quick insights</li> <li><code>CrossplaneResourceGraphSelector</code>: Interactive resource relationship graph</li> <li> <p>Permission-aware wrapper components:</p> <ul> <li><code>IfCrossplaneOverviewAvailable</code></li> <li><code>IfCrossplaneResourceGraphAvailable</code></li> <li><code>IfCrossplaneResourcesListAvailable</code></li> </ul> </li> </ul>"},{"location":"plugins/crossplane/frontend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/crossplane/frontend/about/#dependencies","title":"Dependencies","text":"<ul> <li>Requires the Kubernetes Ingestor plugin for resource discovery</li> <li>Integration with the Crossplane Resources backend plugin</li> <li>Compatible with Backstage's latest permission framework</li> </ul>"},{"location":"plugins/crossplane/frontend/about/#data-flow","title":"Data Flow","text":"<ol> <li>Resources are discovered via the Kubernetes Ingestor</li> <li>Resource data is fetched through backend API endpoints</li> <li>Permission checks are performed (if enabled)</li> <li>UI components render based on available data and permissions</li> </ol>"},{"location":"plugins/crossplane/frontend/about/#api-integration","title":"API Integration","text":"<ul> <li>RESTful API endpoints for resource data</li> <li>Event streaming for real-time updates</li> <li>Kubernetes API proxy support</li> </ul>"},{"location":"plugins/crossplane/frontend/about/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Efficient resource graph rendering</li> <li>Optimized YAML handling</li> <li>Responsive UI design for large resource sets</li> <li>Caching and data optimization</li> <li>Lazy loading for large resource sets</li> </ul>"},{"location":"plugins/crossplane/frontend/about/#version-support","title":"Version Support","text":"<ul> <li>Full support for Crossplane v1.x APIs</li> <li>Complete support for Crossplane v2.x APIs</li> <li>Backward compatibility maintained</li> <li>Version-specific features and optimizations</li> </ul>"},{"location":"plugins/crossplane/frontend/configure/","title":"Configuring the Crossplane Resources Frontend Plugin","text":"<p>This guide covers the configuration options and best practices for the Crossplane Resources frontend plugin.</p>"},{"location":"plugins/crossplane/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The configuration in <code>app-config.yaml</code> is still respected:</p> <pre><code>crossplane:\n  enablePermissions: false # Whether to enable permission checks for the crossplane plugin\n</code></pre> <p>The plugin will be automatically integrated into the appropriate entity pages without requiring manual route configuration.</p>"},{"location":"plugins/crossplane/frontend/configure/#configuration-options","title":"Configuration Options","text":""},{"location":"plugins/crossplane/frontend/configure/#basic-configuration","title":"Basic Configuration","text":"<p>Add the following to your <code>app-config.yaml</code>:</p> <pre><code>crossplane:\n  enablePermissions: false # Whether to enable permission checks for the crossplane plugin\n</code></pre>"},{"location":"plugins/crossplane/frontend/configure/#permission-framework-integration","title":"Permission Framework Integration","text":"<p>When <code>enablePermissions</code> is set to <code>true</code>, the plugin integrates with Backstage's permission framework. The following permissions are available:</p>"},{"location":"plugins/crossplane/frontend/configure/#resource-access-permissions","title":"Resource Access Permissions","text":"<ul> <li><code>crossplane.claims.list</code></li> <li><code>crossplane.claims.view-yaml</code></li> <li><code>crossplane.claims.show-events</code></li> <li><code>crossplane.composite-resources.list</code></li> <li><code>crossplane.composite-resources.view-yaml</code></li> <li><code>crossplane.composite-resources.show-events</code></li> <li><code>crossplane.managed-resources.list</code></li> <li><code>crossplane.managed-resources.view-yaml</code></li> <li><code>crossplane.managed-resources.show-events</code></li> </ul>"},{"location":"plugins/crossplane/frontend/configure/#additional-resource-permissions","title":"Additional Resource Permissions","text":"<ul> <li><code>crossplane.additional-resources.list</code></li> <li><code>crossplane.additional-resources.view-yaml</code></li> <li><code>crossplane.additional-resources.show-events</code></li> <li><code>crossplane.resource-graph.show</code></li> </ul>"},{"location":"plugins/crossplane/frontend/configure/#permission-aware-components","title":"Permission-Aware Components","text":"<p>The plugin provides several permission-aware components that automatically handle access control:</p> <pre><code>// Permission Hooks\nuseResourcesListAvailable()\nuseResourceGraphAvailable()\n\n// Wrapper Components\n&lt;IfCrossplaneOverviewAvailable&gt;\n&lt;IfCrossplaneResourceGraphAvailable&gt;\n&lt;IfCrossplaneResourcesListAvailable&gt;\n</code></pre>"},{"location":"plugins/crossplane/frontend/configure/#ui-customization","title":"UI Customization","text":""},{"location":"plugins/crossplane/frontend/configure/#component-placement","title":"Component Placement","text":"<p>You can customize where and how the Crossplane components appear in your Backstage instance:</p> <ol> <li>Overview Card: Can be placed anywhere in the entity overview page</li> <li>Resource Table: Typically placed in a dedicated tab</li> <li>Resource Graph: Usually in its own tab for better visibility</li> </ol> <p>Example custom placement:</p> <pre><code>// Custom overview layout\nconst customOverviewContent = (\n  &lt;Grid container spacing={3}&gt;\n    &lt;Grid item xs={12} md={6}&gt;\n      &lt;IfCrossplaneOverviewAvailable&gt;\n        &lt;CrossplaneOverviewCardSelector /&gt;\n      &lt;/IfCrossplaneOverviewAvailable&gt;\n    &lt;/Grid&gt;\n    {/* Add other cards/components */}\n  &lt;/Grid&gt;\n);\n\n// Custom tab arrangement\n&lt;EntityLayout&gt;\n  &lt;EntityLayout.Route \n    path=\"/resources\" \n    title=\"All Resources\"\n    if={isResourcesListAvailable}\n  &gt;\n    &lt;Grid container spacing={3}&gt;\n      &lt;Grid item xs={12}&gt;\n        &lt;IfCrossplaneResourcesListAvailable&gt;\n          &lt;CrossplaneResourcesTableSelector /&gt;\n        &lt;/IfCrossplaneResourcesListAvailable&gt;\n      &lt;/Grid&gt;\n      &lt;Grid item xs={12}&gt;\n        &lt;IfCrossplaneResourceGraphAvailable&gt;\n          &lt;CrossplaneResourceGraphSelector /&gt;\n        &lt;/IfCrossplaneResourceGraphAvailable&gt;\n      &lt;/Grid&gt;\n    &lt;/Grid&gt;\n  &lt;/EntityLayout.Route&gt;\n&lt;/EntityLayout&gt;\n</code></pre>"},{"location":"plugins/crossplane/frontend/configure/#integration-with-other-plugins","title":"Integration with Other Plugins","text":""},{"location":"plugins/crossplane/frontend/configure/#kubernetes-ingestor-integration","title":"Kubernetes Ingestor Integration","text":"<p>The plugin relies on annotations from the Kubernetes Ingestor. Ensure proper configuration:</p> <ol> <li>The Kubernetes Ingestor must be configured to watch Crossplane resources</li> <li>Annotations must be properly set on your Crossplane resources</li> <li>The correct entity types must be defined in your catalog</li> </ol>"},{"location":"plugins/crossplane/frontend/configure/#permission-backend-integration","title":"Permission Backend Integration","text":"<p>When using the permission framework:</p> <ol> <li>Install and configure the Crossplane Permissions backend plugin</li> <li>Enable permissions in the frontend configuration</li> <li>Configure the permission policies in your backend</li> </ol>"},{"location":"plugins/crossplane/frontend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Permission Management</p> <ul> <li>Start with permissions disabled during initial setup</li> <li>Enable permissions once basic functionality is verified</li> <li>Configure granular permissions based on user roles</li> </ul> </li> <li> <p>Performance Optimization</p> <ul> <li>Place resource-intensive components (like graphs) in separate tabs</li> <li>Use permission checks to conditionally render components</li> <li>Consider pagination for large resource sets</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Implement proper error boundaries around components</li> <li>Provide meaningful error messages to users</li> <li>Handle permission denied scenarios gracefully</li> </ul> </li> <li> <p>UI/UX Considerations</p> <ul> <li>Group related resources logically</li> <li>Provide clear navigation between different views</li> <li>Include helpful tooltips and documentation links</li> </ul> </li> </ol>"},{"location":"plugins/crossplane/frontend/install/","title":"Installing the Crossplane Resources Frontend Plugin","text":"<p>This guide will help you install and set up the Crossplane Resources frontend plugin in your Backstage instance.</p>"},{"location":"plugins/crossplane/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the frontend plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>The Kubernetes Ingestor plugin installed and configured</li> <li>The Crossplane Resources backend plugin (<code>@terasky/backstage-plugin-crossplane-resources-backend</code>) installed</li> </ol>"},{"location":"plugins/crossplane/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/crossplane/frontend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the frontend plugin package using your package manager:</p> <pre><code>yarn --cwd packages/app add @terasky/backstage-plugin-crossplane-resources-frontend\n</code></pre>"},{"location":"plugins/crossplane/frontend/install/#2-import-components","title":"2. Import Components","text":"<p>Add the necessary imports to your Entity Page file (typically <code>packages/app/src/components/catalog/EntityPage.tsx</code>):</p> <pre><code>import {\n  CrossplaneResourcesTableSelector,\n  CrossplaneOverviewCardSelector,\n  CrossplaneResourceGraphSelector,\n  useResourceGraphAvailable,\n  useResourcesListAvailable,\n  IfCrossplaneOverviewAvailable,\n  IfCrossplaneResourceGraphAvailable,\n  IfCrossplaneResourcesListAvailable,\n} from '@terasky/backstage-plugin-crossplane-resources-frontend';\n</code></pre>"},{"location":"plugins/crossplane/frontend/install/#3-configure-the-entity-page","title":"3. Configure the Entity Page","text":"<p>Add the Crossplane components to your Entity Page:</p> <pre><code>const crossplaneOverviewContent = (\n  &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n    &lt;Grid item md={6}&gt;\n      &lt;EntityAboutCard variant=\"gridItem\" /&gt;\n    &lt;/Grid&gt;\n    &lt;IfCrossplaneOverviewAvailable&gt;\n      &lt;Grid item md={6}&gt;\n        &lt;CrossplaneOverviewCardSelector /&gt;\n      &lt;/Grid&gt;\n    &lt;/IfCrossplaneOverviewAvailable&gt;\n    &lt;Grid item md={4} xs={12}&gt;\n      &lt;EntityLinksCard /&gt;\n    &lt;/Grid&gt;\n  &lt;/Grid&gt;\n);\n\n// Create the Crossplane entity page component with permission checks\nconst CrossplaneEntityPage = () =&gt; {\n  const isResourcesListAvailable = useResourcesListAvailable();\n  const isResourceGraphAvailable = useResourceGraphAvailable();\n\n  return (\n    &lt;EntityLayout&gt;\n      &lt;EntityLayout.Route path=\"/\" title=\"Overview\"&gt;\n        {crossplaneOverviewContent}\n      &lt;/EntityLayout.Route&gt;\n\n      &lt;EntityLayout.Route if={isResourcesListAvailable} path=\"/crossplane-resources\" title=\"Crossplane Resources\"&gt;\n        &lt;IfCrossplaneResourcesListAvailable&gt;\n          &lt;CrossplaneResourcesTableSelector /&gt;\n        &lt;/IfCrossplaneResourcesListAvailable&gt;\n      &lt;/EntityLayout.Route&gt;\n\n      &lt;EntityLayout.Route if={isResourceGraphAvailable} path=\"/crossplane-graph\" title=\"Crossplane Graph\"&gt;\n        &lt;IfCrossplaneResourceGraphAvailable&gt;\n          &lt;CrossplaneResourceGraphSelector /&gt;\n        &lt;/IfCrossplaneResourceGraphAvailable&gt;\n      &lt;/EntityLayout.Route&gt;\n    &lt;/EntityLayout&gt;\n  );\n};\n</code></pre>"},{"location":"plugins/crossplane/frontend/install/#4-add-to-entity-switch","title":"4. Add to Entity Switch","text":"<p>Include the Crossplane entity page in your entity switch:</p> <pre><code>const componentPage = (\n  &lt;EntitySwitch&gt;\n    {/* ... other cases ... */}\n    &lt;EntitySwitch.Case if={isComponentType('crossplane-claim')}&gt;\n      &lt;CrossplaneEntityPage /&gt;\n    &lt;/EntitySwitch.Case&gt;\n    &lt;EntitySwitch.Case if={isComponentType('crossplane-xr')}&gt;\n      &lt;CrossplaneEntityPage /&gt;\n    &lt;/EntitySwitch.Case&gt;\n  &lt;/EntitySwitch&gt;\n);\n</code></pre>"},{"location":"plugins/crossplane/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { crossplaneResourcesPlugin } from '@terasky/backstage-plugin-crossplane-resources-frontend/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    crossplaneResourcesPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/crossplane/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The components are properly imported in your Entity Page</li> <li>The Crossplane tabs appear for appropriate entity types</li> <li>The permission checks are working as expected</li> </ol>"},{"location":"plugins/crossplane/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Missing Tabs: Ensure the entity has the correct component type</li> <li>Permission Issues: Verify the permissions backend is properly configured</li> <li>Resource Loading: Check the Kubernetes Ingestor configuration</li> </ol>"},{"location":"plugins/devpod/overview/","title":"DevPod Plugin","text":"<p>The DevPod plugin for Backstage provides seamless integration with DevPod workspaces, enabling developers to quickly launch their preferred development environments directly from the Backstage UI.</p>"},{"location":"plugins/devpod/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/devpod/overview/#frontend-plugin","title":"Frontend Plugin","text":"<p>The frontend plugin adds a convenient \"Open in DevPod\" button to component overview pages, allowing users to:</p> <ul> <li>Launch DevPod workspaces with a single click</li> <li>Choose from multiple supported IDEs</li> <li>View equivalent CLI commands</li> </ul> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/devpod/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul>"},{"location":"plugins/devpod/overview/#screenshots","title":"Screenshots","text":""},{"location":"plugins/devpod/overview/#devpod-integration","title":"DevPod Integration","text":""},{"location":"plugins/devpod/overview/#ide-selection","title":"IDE Selection","text":""},{"location":"plugins/devpod/overview/#supported-ides","title":"Supported IDEs","text":"<p>The plugin supports a wide range of popular IDEs:</p> <ul> <li>Visual Studio Code (vscode)</li> <li>Visual Studio Code Insiders (vscode-insiders)</li> <li>JetBrains Suite:<ul> <li>IntelliJ IDEA (intellij)</li> <li>PyCharm (pycharm)</li> <li>WebStorm (webstorm)</li> <li>GoLand (goland)</li> <li>CLion (clion)</li> <li>PhpStorm (phpstorm)</li> <li>Rider (rider)</li> <li>RubyMine (rubymine)</li> <li>RustRover (rustrover)</li> <li>Fleet (fleet)</li> </ul> </li> <li>Cursor (cursor)</li> <li>OpenVSCode (openvscode)</li> <li>Jupyter Notebook (jupyternotebook)</li> </ul>"},{"location":"plugins/devpod/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the DevPod plugin:</p> <ol> <li>Install the plugin in your Backstage instance</li> <li>Configure your default IDE preferences (optional)</li> <li>Add the DevPod component to your entity pages</li> </ol> <p>For detailed installation and configuration instructions, refer to:</p> <ul> <li>About the plugin</li> <li>Installation Guide</li> <li>Configuration Guide</li> </ul>"},{"location":"plugins/devpod/frontend/about/","title":"DevPod Frontend Plugin","text":""},{"location":"plugins/devpod/frontend/about/#overview","title":"Overview","text":"<p>The DevPod frontend plugin provides a seamless integration between Backstage and DevPod workspaces. It enhances the component overview pages with a dedicated \"Open in DevPod\" button, enabling developers to quickly launch their preferred development environments.</p>"},{"location":"plugins/devpod/frontend/about/#features","title":"Features","text":""},{"location":"plugins/devpod/frontend/about/#devpod-integration","title":"DevPod Integration","text":"<ul> <li>One-click access to DevPod workspaces</li> <li>Seamless integration with component overview pages</li> <li>Automatic workspace configuration based on component metadata</li> </ul>"},{"location":"plugins/devpod/frontend/about/#ide-selection","title":"IDE Selection","text":"<ul> <li>Support for multiple popular IDEs</li> <li>Configurable default IDE preference</li> <li>Dynamic IDE selection at runtime</li> </ul>"},{"location":"plugins/devpod/frontend/about/#cli-command-display","title":"CLI Command Display","text":"<ul> <li>Shows equivalent CLI commands</li> <li>Enables easy copy-paste for terminal users</li> <li>Helps with automation and scripting</li> </ul>"},{"location":"plugins/devpod/frontend/about/#components","title":"Components","text":""},{"location":"plugins/devpod/frontend/about/#devpodcomponent","title":"DevpodComponent","text":"<p>The main component that renders the \"Open in DevPod\" button and handles IDE selection:</p> <ul> <li>Automatically detects component compatibility</li> <li>Manages IDE selection interface</li> <li>Handles workspace launch requests</li> </ul>"},{"location":"plugins/devpod/frontend/about/#isdevpodavailable","title":"isDevpodAvailable","text":"<p>A utility function that determines whether DevPod integration should be available for a given entity:</p> <ul> <li>Checks entity compatibility</li> <li>Validates required metadata</li> <li>Ensures proper configuration</li> </ul>"},{"location":"plugins/devpod/frontend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/devpod/frontend/about/#supported-ides","title":"Supported IDEs","text":"<p>The plugin supports a comprehensive list of development environments:</p> <ul> <li> <p>Visual Studio Code Family</p> <ul> <li>Visual Studio Code (vscode)</li> <li>VS Code Insiders (vscode-insiders)</li> <li>OpenVSCode (openvscode)</li> </ul> </li> <li> <p>JetBrains Suite</p> <ul> <li>IntelliJ IDEA (intellij)</li> <li>PyCharm (pycharm)</li> <li>WebStorm (webstorm)</li> <li>GoLand (goland)</li> <li>CLion (clion)</li> <li>PhpStorm (phpstorm)</li> <li>Rider (rider)</li> <li>RubyMine (rubymine)</li> <li>RustRover (rustrover)</li> <li>Fleet (fleet)</li> </ul> </li> <li> <p>Other IDEs</p> <ul> <li>Cursor (cursor)</li> <li>Jupyter Notebook (jupyternotebook)</li> </ul> </li> </ul>"},{"location":"plugins/devpod/frontend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage Catalog</li> <li>DevPod CLI</li> <li>Local IDE installations</li> </ul>"},{"location":"plugins/devpod/frontend/about/#user-experience","title":"User Experience","text":"<ul> <li>Intuitive IDE selection interface</li> <li>Quick access to development environments</li> </ul>"},{"location":"plugins/devpod/frontend/about/#screenshots","title":"Screenshots","text":""},{"location":"plugins/devpod/frontend/about/#devpod-button-integration","title":"DevPod Button Integration","text":""},{"location":"plugins/devpod/frontend/about/#ide-selection-interface","title":"IDE Selection Interface","text":""},{"location":"plugins/devpod/frontend/configure/","title":"Configuring the DevPod Frontend Plugin","text":"<p>This guide covers the configuration options for the DevPod frontend plugin.</p>"},{"location":"plugins/devpod/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The configuration in <code>app-config.yaml</code> is still respected:</p> <pre><code>devpod:\n  defaultIDE: vscode  # Optional: Set your organization's default IDE\n</code></pre> <p>The plugin will be automatically integrated into the appropriate entity pages without requiring manual route configuration.</p>"},{"location":"plugins/devpod/frontend/configure/#basic-configuration","title":"Basic Configuration","text":"<p>Add the following to your <code>app-config.yaml</code>:</p> <pre><code>devpod:\n  defaultIDE: vscode  # Optional: Set your organization's default IDE\n</code></pre>"},{"location":"plugins/devpod/frontend/configure/#configuration-options","title":"Configuration Options","text":""},{"location":"plugins/devpod/frontend/configure/#default-ide","title":"Default IDE","text":"<p>The <code>defaultIDE</code> setting determines which IDE is pre-selected in the DevPod launcher. If not specified, it defaults to <code>vscode</code>.</p> <p>Supported values:</p> <ul> <li><code>vscode</code> - Visual Studio Code</li> <li><code>vscode-insiders</code> - VS Code Insiders</li> <li><code>openvscode</code> - OpenVSCode</li> <li><code>intellij</code> - IntelliJ IDEA</li> <li><code>pycharm</code> - PyCharm</li> <li><code>webstorm</code> - WebStorm</li> <li><code>goland</code> - GoLand</li> <li><code>clion</code> - CLion</li> <li><code>phpstorm</code> - PhpStorm</li> <li><code>rider</code> - Rider</li> <li><code>rubymine</code> - RubyMine</li> <li><code>rustrover</code> - RustRover</li> <li><code>fleet</code> - JetBrains Fleet</li> <li><code>cursor</code> - Cursor</li> <li><code>jupyternotebook</code> - Jupyter Notebook</li> </ul>"},{"location":"plugins/devpod/frontend/configure/#component-customization","title":"Component Customization","text":""},{"location":"plugins/devpod/frontend/configure/#grid-placement","title":"Grid Placement","text":"<p>You can customize where the DevPod component appears in your entity overview page by adjusting its grid placement:</p> <pre><code>&lt;Grid item md={6} xs={12}&gt;  // Adjust size as needed\n  &lt;DevpodComponent /&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"plugins/devpod/frontend/configure/#conditional-rendering","title":"Conditional Rendering","text":"<p>The <code>isDevpodAvailable</code> condition can be combined with other checks:</p> <pre><code>&lt;EntitySwitch&gt;\n  &lt;EntitySwitch.Case if={e =&gt; isDevpodAvailable(e) &amp;&amp; isGitRepository(e)}&gt;\n    &lt;Grid item md={6}&gt;\n      &lt;DevpodComponent /&gt;\n    &lt;/Grid&gt;\n  &lt;/EntitySwitch.Case&gt;\n&lt;/EntitySwitch&gt;\n</code></pre>"},{"location":"plugins/devpod/frontend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>IDE Selection</p> <ul> <li>Choose a default IDE that matches your team's primary development environment</li> <li>Consider your developers' preferences and workflows</li> <li>Ensure the selected IDE is installed on development machines</li> </ul> </li> <li> <p>Component Placement</p> <ul> <li>Place the DevPod button where it's easily accessible</li> <li>Consider grouping it with other development-related tools</li> <li>Maintain consistent placement across different entity types</li> </ul> </li> <li> <p>User Experience</p> <ul> <li>Provide clear documentation about available IDEs</li> <li>Ensure DevPod is properly installed on development machines</li> <li>Consider adding links to DevPod installation guides</li> </ul> </li> </ol>"},{"location":"plugins/devpod/frontend/install/","title":"Installing the DevPod Frontend Plugin","text":"<p>This guide will help you install and set up the DevPod frontend plugin in your Backstage instance.</p>"},{"location":"plugins/devpod/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>DevPod installed on your development machine(s)</li> <li>Access to modify your Backstage frontend configuration</li> </ol>"},{"location":"plugins/devpod/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/devpod/frontend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using your package manager:</p> <pre><code>yarn --cwd packages/app add @terasky/backstage-plugin-devpod\n</code></pre>"},{"location":"plugins/devpod/frontend/install/#2-import-components","title":"2. Import Components","text":"<p>Add the necessary imports to your Entity Page file (typically <code>packages/app/src/components/catalog/EntityPage.tsx</code>):</p> <pre><code>import { DevpodComponent, isDevpodAvailable } from '@terasky/backstage-plugin-devpod';\n</code></pre>"},{"location":"plugins/devpod/frontend/install/#3-add-to-entity-page","title":"3. Add to Entity Page","text":"<p>Add the DevPod component to your overview content:</p> <pre><code>const overviewContent = (\n  &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n    {/* ... other grid items ... */}\n\n    &lt;EntitySwitch&gt;\n      &lt;EntitySwitch.Case if={isDevpodAvailable}&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;DevpodComponent /&gt;\n        &lt;/Grid&gt;\n      &lt;/EntitySwitch.Case&gt;\n    &lt;/EntitySwitch&gt;\n\n    {/* ... other grid items ... */}\n  &lt;/Grid&gt;\n);\n</code></pre>"},{"location":"plugins/devpod/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { devpodPlugin } from '@terasky/backstage-plugin-devpod/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    devpodPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/devpod/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The DevPod button appears on component overview pages</li> <li>The IDE selection functionality works correctly</li> <li>The CLI command display is accurate</li> </ol>"},{"location":"plugins/devpod/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Missing DevPod Button</p> <ul> <li>Ensure the component is properly imported</li> <li>Check if the entity meets the availability conditions</li> <li>Verify the grid layout configuration</li> </ul> </li> <li> <p>IDE Selection Issues</p> <ul> <li>Confirm DevPod installation on your machine</li> <li>Check the supported IDE list</li> <li>Verify your default IDE configuration</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide.</p>"},{"location":"plugins/educates/overview/","title":"Educates Plugin","text":"<p>The Educates plugin for Backstage provides seamless integration with Educates training portals, enabling users to discover, access, and manage educational workshops directly within the Backstage interface.</p>"},{"location":"plugins/educates/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/educates/overview/#frontend-plugin","title":"Frontend Plugin","text":"<p>The frontend plugin provides a user interface for:</p> <ul> <li>Browsing available workshops across multiple training portals</li> <li>Viewing detailed workshop information</li> <li>Launching workshop sessions</li> <li>Managing active workshop sessions</li> </ul> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/educates/overview/#backend-plugin","title":"Backend Plugin","text":"<p>The backend plugin handles:</p> <ul> <li>Integration with Educates training portals</li> <li>Authentication and session management</li> <li>Workshop session operations</li> <li>API endpoints for workshop data</li> <li>Advanced permission rules and conditions</li> </ul> <p>Learn more about the backend plugin</p>"},{"location":"plugins/educates/overview/#features","title":"Features","text":"<ul> <li>Multi-Portal Support: Connect to multiple training portals simultaneously</li> <li>Workshop Discovery: Browse and search available workshops</li> <li>Detailed Information: View comprehensive workshop details including:<ul> <li>Title and description</li> <li>Difficulty level</li> <li>Duration</li> <li>Tags and labels</li> <li>Capacity and availability</li> </ul> </li> <li>Session Management: Launch and track workshop sessions</li> <li>Advanced Permission Controls: Resource-based permissions with conditional rules and portal-specific access control</li> </ul>"},{"location":"plugins/educates/overview/#documentation-structure","title":"Documentation Structure","text":"<p>Frontend Plugin</p> <ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul> <p>Backend Plugin</p> <ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul>"},{"location":"plugins/educates/overview/#available-permissions","title":"Available Permissions","text":"<p>The plugin provides a comprehensive resource-based permission system with the following permissions:</p>"},{"location":"plugins/educates/overview/#resource-based-permissions","title":"Resource-Based Permissions","text":"<ul> <li><code>educates.portal.view</code>: Permission to view and access specific training portals</li> <li>Resource Type: <code>educates-training-portal</code></li> <li>Action: <code>read</code></li> <li> <p>Supports conditional access based on portal ownership and access rules</p> </li> <li> <p><code>educates.workshop.start</code>: Permission to start workshop sessions for specific workshops</p> </li> <li>Resource Type: <code>educates-workshop</code></li> <li>Action: <code>create</code></li> <li>Supports conditional access based on workshop ownership and access rules</li> </ul>"},{"location":"plugins/educates/overview/#permission-rules","title":"Permission Rules","text":"<p>The plugin includes advanced permission rules for fine-grained access control:</p>"},{"location":"plugins/educates/overview/#portal-rules","title":"Portal Rules","text":"<ul> <li><code>IS_PORTAL_OWNER</code>: Allow users who are owners of a training portal</li> <li><code>HAS_PORTAL_ACCESS</code>: Allow users who have been granted access to a specific portal</li> </ul>"},{"location":"plugins/educates/overview/#workshop-rules","title":"Workshop Rules","text":"<ul> <li><code>IS_WORKSHOP_OWNER</code>: Allow users who are owners of a workshop</li> <li><code>HAS_WORKSHOP_ACCESS</code>: Allow users who have been granted access to a specific workshop</li> </ul>"},{"location":"plugins/educates/overview/#conditional-permissions","title":"Conditional Permissions","text":"<p>The plugin supports conditional permission decisions that can be configured based on: - User entity references - Portal names - Workshop names - Custom access control logic</p>"},{"location":"plugins/educates/overview/#deprecated-permissions","title":"Deprecated Permissions","text":"<p>\u26a0\ufe0f The following permissions are removed in this version:</p> <ul> <li><code>educates.workshops.view</code> \u2192 Use <code>educates.portal.view</code> instead</li> <li><code>educates.workshop-sessions.create</code> \u2192 Use <code>educates.workshop.start</code> instead</li> </ul>"},{"location":"plugins/educates/overview/#mcp-actions-integration","title":"MCP Actions Integration","text":"<p>The Educates plugin provides MCP (Model Control Protocol) actions for interacting with training portals and workshops. To enable these actions:</p> <ol> <li> <p>First, ensure you have the MCP actions backend plugin installed and configured. See the MCP Actions Backend Plugin documentation for setup instructions.</p> </li> <li> <p>Add the plugin to your actions configuration in <code>app-config.yaml</code>:</p> </li> </ol> <pre><code>backend:\n  actions:\n    pluginSources:\n      - 'catalog'\n      - 'educates'\n      # ... other action sources\n</code></pre>"},{"location":"plugins/educates/overview/#available-mcp-actions","title":"Available MCP Actions","text":"<p>The plugin provides the following MCP actions:</p> <ul> <li><code>get_educates_training_portals</code>: Get configured training portals</li> <li>Input: None</li> <li> <p>Output: List of training portals with their URLs</p> </li> <li> <p><code>get_educates_workshops</code>: Get available workshops in a training portal</p> </li> <li>Input: Portal name</li> <li> <p>Output: List of workshops with detailed information including:</p> <ul> <li>Title and description</li> <li>Vendor and authors</li> <li>Difficulty and duration</li> <li>Environment capacity and availability</li> </ul> </li> <li> <p><code>request_educates_workshop_session</code>: Request a new workshop session</p> </li> <li>Input: Portal name and workshop environment name</li> <li>Output: Session details including URL, ID, and expiration time</li> </ul>"},{"location":"plugins/educates/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the Educates plugin:</p> <ol> <li>Install and configure the backend plugin</li> <li>Set up the frontend components</li> <li>Configure your training portal connections</li> <li>Configure permission rules and access policies</li> <li>Configure MCP actions in your app-config.yaml</li> <li>Start discovering and launching workshops</li> </ol> <p>For detailed installation and configuration instructions, refer to the frontend and backend documentation linked above.</p>"},{"location":"plugins/educates/backend/about/","title":"Educates Backend Plugin","text":""},{"location":"plugins/educates/backend/about/#overview","title":"Overview","text":"<p>The Educates backend plugin provides the server-side functionality required to integrate Educates training portals with Backstage. It handles API communication, authentication, session management, and exposes endpoints for the frontend plugin to consume.</p>"},{"location":"plugins/educates/backend/about/#features","title":"Features","text":""},{"location":"plugins/educates/backend/about/#api-integration","title":"API Integration","text":"<ul> <li>Seamless communication with Educates training portals</li> <li>Support for multiple portal configurations</li> <li>Secure API token management</li> <li>Error handling and retries</li> </ul>"},{"location":"plugins/educates/backend/about/#authentication-management","title":"Authentication Management","text":"<ul> <li>Token-based authentication</li> <li>Automatic token refresh</li> <li>Secure credential storage</li> <li>Session persistence</li> </ul>"},{"location":"plugins/educates/backend/about/#workshop-management","title":"Workshop Management","text":"<ul> <li>Workshop catalog retrieval</li> <li>Workshop metadata handling</li> <li>Session creation and tracking</li> </ul>"},{"location":"plugins/educates/backend/about/#multi-portal-support","title":"Multi-Portal Support","text":"<ul> <li>Multiple portal configurations out of the box</li> </ul>"},{"location":"plugins/educates/backend/about/#permission-framework","title":"Permission Framework","text":"<ul> <li>Resource-based permission system</li> <li>Conditional permission rules</li> <li>Portal and workshop-specific access control</li> <li>Advanced permission conditions and decision making</li> </ul>"},{"location":"plugins/educates/backend/about/#permission-framework_1","title":"Permission Framework","text":"<p>The backend plugin provides a comprehensive permission framework with resource-based access control:</p>"},{"location":"plugins/educates/backend/about/#permission-resources","title":"Permission Resources","text":"<p>The plugin defines two main resource types:</p> <ul> <li>Training Portal Resource (<code>educates-training-portal</code>)</li> <li>Controls access to specific training portals</li> <li> <p>Supports portal ownership and access rules</p> </li> <li> <p>Workshop Resource (<code>educates-workshop</code>)</p> </li> <li>Controls access to individual workshops</li> <li>Supports workshop-specific permissions</li> </ul>"},{"location":"plugins/educates/backend/about/#permission-rules","title":"Permission Rules","text":""},{"location":"plugins/educates/backend/about/#portal-permission-rules","title":"Portal Permission Rules","text":"<ul> <li><code>IS_PORTAL_OWNER</code>: Grants access to users who own a training portal</li> <li><code>HAS_PORTAL_ACCESS</code>: Grants access to users with specific portal permissions</li> </ul>"},{"location":"plugins/educates/backend/about/#workshop-permission-rules","title":"Workshop Permission Rules","text":"<ul> <li><code>IS_WORKSHOP_OWNER</code>: Grants access to users who own a workshop</li> <li><code>HAS_WORKSHOP_ACCESS</code>: Grants access to users with specific workshop permissions</li> </ul>"},{"location":"plugins/educates/backend/about/#conditional-permissions","title":"Conditional Permissions","text":"<p>The plugin supports conditional permission decisions through:</p> <ul> <li>Portal Conditions: Fine-grained portal access control</li> <li>Workshop Conditions: Workshop-specific permission logic</li> <li>Decision Factories: Programmatic permission decision creation</li> </ul>"},{"location":"plugins/educates/backend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/educates/backend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Educates Training Portal API</li> <li>Backstage backend services</li> <li>Permission framework</li> <li>Authentication system</li> </ul>"},{"location":"plugins/educates/backend/about/#type-definitions","title":"Type Definitions","text":"<p>Utilizes shared types from the common package:</p> <ul> <li><code>TrainingPortalConfig</code></li> <li><code>EducatesConfig</code></li> <li><code>Workshop</code></li> <li><code>WorkshopEnvironment</code></li> <li><code>TrainingPortalStatus</code></li> <li><code>WorkshopSession</code></li> </ul>"},{"location":"plugins/educates/backend/about/#error-handling","title":"Error Handling","text":"<ul> <li>Comprehensive error types</li> <li>Detailed error messages</li> <li>Automatic retries</li> <li>Rate limiting protection</li> </ul>"},{"location":"plugins/educates/backend/about/#security","title":"Security","text":"<ul> <li>Secure credential management</li> <li>Token-based authentication</li> <li>Resource-based permission controls with conditional rules</li> <li>Request validation</li> </ul>"},{"location":"plugins/educates/backend/about/#architecture","title":"Architecture","text":""},{"location":"plugins/educates/backend/about/#components","title":"Components","text":"<ol> <li> <p>API Router</p> <ul> <li>Endpoint registration</li> <li>Request handling</li> <li>Response formatting</li> </ul> </li> <li> <p>Portal Manager</p> <ul> <li>Portal configuration</li> <li>Health monitoring</li> <li>Connection management</li> </ul> </li> <li> <p>Session Controller</p> <ul> <li>Session lifecycle</li> <li>Resource allocation</li> </ul> </li> <li> <p>Authentication Handler</p> <ul> <li>Token management</li> <li>Credential storage</li> <li>Permission checks</li> </ul> </li> <li> <p>Permission Handler</p> <ul> <li>Resource-based access control</li> <li>Conditional permission evaluation</li> <li>Permission rule enforcement</li> </ul> </li> </ol>"},{"location":"plugins/educates/backend/about/#data-flow","title":"Data Flow","text":"<ol> <li>Request received from frontend</li> <li>Authentication and permission validation</li> <li>Portal communication</li> <li>Response processing</li> <li>Result returned to client</li> </ol> <p>For installation and configuration details, refer to the Installation Guide and Configuration Guide.</p>"},{"location":"plugins/educates/backend/configure/","title":"Configuring the Educates Backend Plugin","text":"<p>This guide covers the configuration options available for the Educates backend plugin.</p>"},{"location":"plugins/educates/backend/configure/#configuration-file","title":"Configuration File","text":"<p>The plugin is configured through your <code>app-config.yaml</code>. Here's a comprehensive example:</p> <pre><code>educates:\n  # Required: Training portal configurations\n  trainingPortals:\n    - name: example-portal\n      url: https://example-training-portal.com\n      robotUsername: robot@educates\n      robotPassword: ${EDUCATES_EXAMPLE_ROBOT_PASSWORD}\n      clientId: ${EDUCATES_EXAMPLE_ROBOT_CLIENT_ID}\n      clientSecret: ${EDUCATES_EXAMPLE_ROBOT_CLIENT_SECRET}\n</code></pre>"},{"location":"plugins/educates/backend/configure/#environment-variables","title":"Environment Variables","text":"<p>Required environment variables for each training portal:</p> <pre><code>EDUCATES_&lt;PORTAL_NAME&gt;_ROBOT_PASSWORD=your-robot-password\nEDUCATES_&lt;PORTAL_NAME&gt;_ROBOT_CLIENT_ID=your-client-id\nEDUCATES_&lt;PORTAL_NAME&gt;_ROBOT_CLIENT_SECRET=your-client-secret\n</code></pre>"},{"location":"plugins/educates/backend/configure/#portal-configuration","title":"Portal Configuration","text":""},{"location":"plugins/educates/backend/configure/#basic-portal-setup","title":"Basic Portal Setup","text":"<p>Minimum required configuration for each portal:</p> <pre><code>educates:\n  trainingPortals:\n    - name: portal-name\n      url: https://portal-url.com\n      robotUsername: robot@educates\n      robotPassword: ${EDUCATES_PORTAL_NAME_ROBOT_PASSWORD}\n      clientId: ${EDUCATES_PORTAL_NAME_ROBOT_CLIENT_ID}\n      clientSecret: ${EDUCATES_PORTAL_NAME_ROBOT_CLIENT_SECRET}\n</code></pre>"},{"location":"plugins/educates/backend/configure/#permission-configuration","title":"Permission Configuration","text":"<p>The Educates plugin uses Backstage's resource-based permission system. Configure permissions in your permission policy.</p>"},{"location":"plugins/educates/backend/configure/#permission-policy-setup","title":"Permission Policy Setup","text":"<p>Add the following to your permission policy file:</p> <pre><code>import { \n  portalViewPermission,\n  workshopStartPermission,\n} from '@terasky/backstage-plugin-educates-common';\nimport {\n  educatesPortalConditions,\n  educatesWorkshopConditions,\n  createEducatesPortalConditionalDecision,\n  createEducatesWorkshopConditionalDecision,\n} from '@terasky/backstage-plugin-educates-backend/alpha';\n\n// In your permission policy class\nasync handle(request: PolicyQuery): Promise&lt;PolicyDecision&gt; {\n  if (isPermission(request.permission, portalViewPermission)) {\n    // Allow users to view portals they have access to\n    return createEducatesPortalConditionalDecision(\n      request.permission,\n      educatesPortalConditions.hasPortalAccess({\n        userRefs: [request.identity.userEntityRef],\n        portalName: 'your-portal-name'\n      })\n    );\n  }\n\n  if (isPermission(request.permission, workshopStartPermission)) {\n    // Allow users to start workshops they have access to\n    return createEducatesWorkshopConditionalDecision(\n      request.permission,\n      educatesWorkshopConditions.hasWorkshopAccess({\n        userRefs: [request.identity.userEntityRef],\n        portalName: 'your-portal-name',\n        workshopName: 'specific-workshop'\n      })\n    );\n  }\n\n  return { result: AuthorizeResult.ALLOW };\n}\n</code></pre>"},{"location":"plugins/educates/backend/configure/#simple-permission-policy","title":"Simple Permission Policy","text":"<p>For a basic setup allowing all authenticated users:</p> <pre><code>import { \n  portalViewPermission,\n  workshopStartPermission,\n} from '@terasky/backstage-plugin-educates-common';\n\n// In your permission policy\nasync handle(request: PolicyQuery): Promise&lt;PolicyDecision&gt; {\n  if (isPermission(request.permission, portalViewPermission)) {\n    return { result: AuthorizeResult.ALLOW };\n  }\n\n  if (isPermission(request.permission, workshopStartPermission)) {\n    return { result: AuthorizeResult.ALLOW };\n  }\n\n  return { result: AuthorizeResult.ALLOW };\n}\n</code></pre>"},{"location":"plugins/educates/backend/configure/#advanced-permission-rules","title":"Advanced Permission Rules","text":"<p>You can customize access using the built-in permission rules:</p> <pre><code>import { rules } from '@terasky/backstage-plugin-educates-backend/alpha';\n\n// Example: Portal ownership rule\nconst portalOwnershipDecision = createEducatesPortalConditionalDecision(\n  request.permission,\n  rules.portal.isPortalOwner({\n    userRefs: [request.identity.userEntityRef]\n  })\n);\n\n// Example: Workshop access rule\nconst workshopAccessDecision = createEducatesWorkshopConditionalDecision(\n  request.permission,\n  rules.workshop.hasWorkshopAccess({\n    userRefs: [request.identity.userEntityRef],\n    portalName: 'production-portal',\n    workshopName: 'advanced-k8s'\n  })\n);\n</code></pre>"},{"location":"plugins/educates/backend/configure/#migration-from-legacy-permissions","title":"Migration from Legacy Permissions","text":"<p>If you're migrating from the legacy permissions, update your permission policy:</p> <pre><code>// OLD - Deprecated\n// educates.workshops.view\n// educates.workshop-sessions.create\n\n// NEW - Resource-based\nimport { \n  portalViewPermission,      // replaces educates.workshops.view\n  workshopStartPermission,   // replaces educates.workshop-sessions.create\n} from '@terasky/backstage-plugin-educates-common';\n</code></pre> <p>For installation instructions, refer to the Installation Guide.</p>"},{"location":"plugins/educates/backend/install/","title":"Installing the Educates Backend Plugin","text":"<p>This guide will help you install and set up the Educates backend plugin in your Backstage instance.</p>"},{"location":"plugins/educates/backend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A running Backstage backend instance</li> <li>Access to one or more Educates training portals</li> <li>Required credentials for each training portal</li> </ol>"},{"location":"plugins/educates/backend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/educates/backend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/backend add @terasky/backstage-plugin-educates-backend\n</code></pre>"},{"location":"plugins/educates/backend/install/#2-add-plugin-to-backend","title":"2. Add Plugin to Backend","text":"<p>Modify your <code>packages/backend/src/index.ts</code> to include the plugin:</p> <pre><code>import { createBackend } from '@backstage/backend-defaults';\n\nconst backend = createBackend();\n\n// ... other backend plugins\n\nbackend.add(import('@terasky/plugin-educates-backend'));\n\nbackend.start();\n</code></pre>"},{"location":"plugins/educates/backend/install/#3-configure-environment-variables","title":"3. Configure Environment Variables","text":"<p>Add the following environment variables to your <code>.env</code> file:</p> <pre><code># Example portal configuration\nEDUCATES_EXAMPLE_ROBOT_PASSWORD=your-robot-password\nEDUCATES_EXAMPLE_ROBOT_CLIENT_ID=your-client-id\nEDUCATES_EXAMPLE_ROBOT_CLIENT_SECRET=your-client-secret\n</code></pre>"},{"location":"plugins/educates/backend/install/#4-add-base-configuration","title":"4. Add Base Configuration","text":"<p>Add the following to your <code>app-config.yaml</code>:</p> <pre><code>educates:\n  trainingPortals:\n    - name: example-portal\n      url: https://example-training-portal.com\n      robotUsername: robot@educates\n      robotPassword: ${EDUCATES_EXAMPLE_ROBOT_PASSWORD}\n      clientId: ${EDUCATES_EXAMPLE_ROBOT_CLIENT_ID}\n      clientSecret: ${EDUCATES_EXAMPLE_ROBOT_CLIENT_SECRET}\n</code></pre>"},{"location":"plugins/educates/backend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The backend starts without errors</li> <li>The plugin endpoints are accessible</li> <li>Training portal connections are successful</li> </ol>"},{"location":"plugins/educates/backend/install/#testing-the-installation","title":"Testing the Installation","text":"<ol> <li> <p>Check the plugin health: <pre><code>curl http://localhost:7007/api/educates/health\n</code></pre></p> </li> <li> <p>List training portals: <pre><code>curl http://localhost:7007/api/educates/workshops/\\&lt;TRAINING PORTAL NAME\\&gt;/\n</code></pre></p> </li> </ol>"},{"location":"plugins/educates/backend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Connection Errors</p> <ul> <li>Verify portal URL is correct</li> <li>Check credentials in environment variables</li> <li>Ensure portal is accessible from backend</li> </ul> </li> <li> <p>Authentication Issues</p> <ul> <li>Confirm robot credentials are valid</li> <li>Check client ID and secret</li> <li>Verify token refresh is working</li> </ul> </li> <li> <p>Plugin Not Loading</p> <ul> <li>Check backend plugin registration</li> <li>Verify package installation</li> <li>Review backend logs for errors</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide.</p>"},{"location":"plugins/educates/frontend/about/","title":"Educates Frontend Plugin","text":""},{"location":"plugins/educates/frontend/about/#overview","title":"Overview","text":"<p>The Educates frontend plugin provides a comprehensive interface for discovering and accessing educational workshops within Backstage. It enables users to browse workshops from multiple training portals, view detailed information, and manage workshop sessions, all integrated seamlessly into the Backstage interface.</p>"},{"location":"plugins/educates/frontend/about/#features","title":"Features","text":""},{"location":"plugins/educates/frontend/about/#workshop-discovery","title":"Workshop Discovery","text":"<ul> <li>Browse available workshops across multiple portals</li> <li>Filter and search capabilities</li> <li>Workshop categorization and tagging</li> <li>Multi-portal support</li> </ul>"},{"location":"plugins/educates/frontend/about/#workshop-details","title":"Workshop Details","text":"<p>Comprehensive workshop information:</p> <ul> <li>Title and description</li> <li>Difficulty level</li> <li>Duration estimates</li> <li>Tags and labels</li> <li>Capacity information</li> <li>Availability status</li> </ul>"},{"location":"plugins/educates/frontend/about/#session-management","title":"Session Management","text":"<ul> <li>Launch workshops in new browser tabs</li> <li>Track active workshop sessions</li> </ul>"},{"location":"plugins/educates/frontend/about/#user-interface","title":"User Interface","text":"<ul> <li>Material design integration</li> <li>Responsive layout</li> <li>Intuitive navigation</li> <li>Consistent Backstage styling</li> </ul>"},{"location":"plugins/educates/frontend/about/#components","title":"Components","text":""},{"location":"plugins/educates/frontend/about/#educatespage","title":"EducatesPage","text":"<p>The main page component that provides:</p> <ul> <li>Workshop catalog view</li> <li>Portal selection</li> <li>Session management interface</li> </ul>"},{"location":"plugins/educates/frontend/about/#workshop-cards","title":"Workshop Cards","text":"<p>Individual workshop displays showing:</p> <ul> <li>Workshop title and description</li> <li>Key metadata</li> <li>Launch options</li> <li>Status indicators</li> </ul>"},{"location":"plugins/educates/frontend/about/#portal-selection","title":"Portal Selection","text":"<p>Interface for managing multiple training portals:</p> <ul> <li>Portal switching</li> <li>Portal-specific workshop lists</li> </ul>"},{"location":"plugins/educates/frontend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/educates/frontend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage core platform</li> <li>Educates backend plugin</li> <li>Training portal APIs</li> <li>Permission framework</li> </ul>"},{"location":"plugins/educates/frontend/about/#permission-framework","title":"Permission Framework","text":"<p>Built-in support for Backstage's resource-based permission system:</p> <ul> <li><code>educates.portal.view</code>: Required for viewing and accessing specific training portals</li> <li>Resource-based permission that controls access to individual portals</li> <li> <p>Supports conditional access based on user roles and portal ownership</p> </li> <li> <p><code>educates.workshop.start</code>: Required for launching workshop sessions</p> </li> <li>Resource-based permission that controls access to individual workshops</li> <li>Supports fine-grained access control per workshop</li> </ul>"},{"location":"plugins/educates/frontend/about/#deprecated-permissions","title":"Deprecated Permissions","text":"<p>\u26a0\ufe0f The following permissions are removed in this version:</p> <ul> <li><code>educates.workshops.view</code> \u2192 Use <code>educates.portal.view</code> instead</li> <li><code>educates.workshop-sessions.create</code> \u2192 Use <code>educates.workshop.start</code> instead</li> </ul>"},{"location":"plugins/educates/frontend/about/#type-definitions","title":"Type Definitions","text":"<p>Utilizes shared types from the common package:</p> <ul> <li><code>Workshop</code></li> <li><code>WorkshopEnvironment</code></li> <li><code>TrainingPortalStatus</code></li> <li><code>WorkshopSession</code></li> </ul>"},{"location":"plugins/educates/frontend/about/#user-experience","title":"User Experience","text":""},{"location":"plugins/educates/frontend/about/#workshop-discovery_1","title":"Workshop Discovery","text":"<ol> <li>Navigate to the Workshops page (requires <code>educates.portal.view</code> permission)</li> <li>Browse available workshops by portal</li> <li>View detailed workshop information</li> </ol>"},{"location":"plugins/educates/frontend/about/#workshop-launch","title":"Workshop Launch","text":"<ol> <li>Select desired workshop</li> <li>Review workshop details</li> <li>Click launch button (requires <code>educates.workshop.start</code> permission)</li> <li>Access workshop in new browser tab</li> </ol>"},{"location":"plugins/educates/frontend/about/#session-management_1","title":"Session Management","text":"<ol> <li>View active sessions</li> <li>Monitor session status</li> </ol>"},{"location":"plugins/educates/frontend/about/#permission-requirements","title":"Permission Requirements","text":"<p>To use the frontend plugin, users need appropriate permissions:</p>"},{"location":"plugins/educates/frontend/about/#basic-access","title":"Basic Access","text":"<ul> <li><code>educates.portal.view</code>: Required to view the workshops page and browse available workshops</li> <li><code>educates.workshop.start</code>: Required to launch workshop sessions</li> </ul>"},{"location":"plugins/educates/frontend/about/#advanced-access-control","title":"Advanced Access Control","text":"<p>The plugin supports resource-based permissions that can be configured for: - Specific training portals - Individual workshops - Conditional access based on user roles - Portal and workshop ownership rules</p>"},{"location":"plugins/educates/frontend/about/#permission-integration","title":"Permission Integration","text":"<p>The frontend automatically handles permission checks: - Workshop browse functionality requires portal view permissions - Launch buttons are only enabled for workshops the user can start - Portal switching respects portal-specific access controls - Workshop cards display appropriate access indicators</p>"},{"location":"plugins/educates/frontend/configure/","title":"Configuring the Educates Frontend Plugin","text":"<p>This guide covers the configuration options available for the Educates frontend plugin.</p>"},{"location":"plugins/educates/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The plugin will be automatically integrated into the navigation without requiring manual route configuration.</p>"},{"location":"plugins/educates/frontend/configure/#configuration-file","title":"Configuration File","text":"<p>The frontend plugin relies on the backend configuration. </p>"},{"location":"plugins/educates/frontend/configure/#available-permissions","title":"Available Permissions","text":"<p>Configure these permissions to control access to plugin features:</p> <ol> <li> <p><code>educates.workshops.view</code></p> <ul> <li>Required to view the workshops catalog</li> <li>Controls access to workshop details</li> </ul> </li> <li> <p><code>educates.workshop-sessions.create</code></p> <ul> <li>Required to launch workshop sessions</li> <li>Controls ability to create new sessions</li> </ul> </li> </ol>"},{"location":"plugins/educates/frontend/configure/#ui-customization","title":"UI Customization","text":""},{"location":"plugins/educates/frontend/configure/#theme-integration","title":"Theme Integration","text":"<p>The plugin follows your Backstage theme settings. Customize the appearance by modifying your theme configuration in <code>packages/app/src/themes/index.ts</code>:</p> <pre><code>import { createTheme } from '@material-ui/core';\n\nexport const customTheme = createTheme({\n  components: {\n    // Customize workshop card appearance\n    MuiCard: {\n      styleOverrides: {\n        root: {\n          // Your custom styles\n        },\n      },\n    },\n  },\n});\n</code></pre>"},{"location":"plugins/educates/frontend/configure/#portal-configuration","title":"Portal Configuration","text":"<p>Portal configuration is managed through the backend plugin. Refer to the backend configuration guide for details on:</p> <ul> <li>Adding training portals</li> <li>Configuring authentication</li> <li>Managing portal connections</li> <li>Setting up session handling</li> </ul>"},{"location":"plugins/educates/frontend/configure/#environment-variables","title":"Environment Variables","text":"<p>The frontend plugin doesn't require specific environment variables, but ensure the backend plugin's environment variables are properly configured as they affect frontend functionality.</p>"},{"location":"plugins/educates/frontend/install/","title":"Installing the Educates Frontend Plugin","text":"<p>This guide will help you install and set up the Educates frontend plugin in your Backstage instance.</p>"},{"location":"plugins/educates/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>The Educates backend plugin installed and configured</li> <li>Access to one or more Educates training portals</li> </ol>"},{"location":"plugins/educates/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/educates/frontend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/app add @terasky/backstage-plugin-educates\n</code></pre>"},{"location":"plugins/educates/frontend/install/#2-add-to-app-routes","title":"2. Add to App Routes","text":"<p>Add the Educates page to your app routes in <code>packages/app/src/App.tsx</code>:</p> <pre><code>import { EducatesPage } from '@terasky/backstage-plugin-educates';\n\nconst routes = (\n  &lt;FlatRoutes&gt;\n    {/* ... other routes ... */}\n    &lt;Route path=\"/educates\" element={&lt;EducatesPage /&gt;} /&gt;\n  &lt;/FlatRoutes&gt;\n);\n</code></pre>"},{"location":"plugins/educates/frontend/install/#3-add-to-sidebar","title":"3. Add to Sidebar","text":"<p>Add the Educates link to your sidebar in <code>packages/app/src/components/Root/Root.tsx</code>:</p> <pre><code>import { SchoolIcon } from '@material-ui/icons';\n\nexport const Root = () =&gt; (\n  &lt;SidebarPage&gt;\n    &lt;Sidebar&gt;\n      {/* ... other sidebar items ... */}\n      &lt;SidebarItem icon={SchoolIcon} to=\"/educates\" text=\"Workshops\" /&gt;\n    &lt;/Sidebar&gt;\n  &lt;/SidebarPage&gt;\n);\n</code></pre>"},{"location":"plugins/educates/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { educatesPlugin } from '@terasky/backstage-plugin-educates/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    educatesPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>App.tsx</code> and <code>Root.tsx</code> files. The plugin will be automatically integrated into the navigation.</p>"},{"location":"plugins/educates/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The Workshops link appears in your sidebar</li> <li>The workshops page loads successfully</li> <li>You can view available workshops from your training portals</li> </ol>"},{"location":"plugins/educates/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Page Not Found</p> <ul> <li>Verify route configuration in App.tsx</li> <li>Check sidebar link path</li> <li>Ensure all imports are correct</li> </ul> </li> <li> <p>No Workshops Displayed</p> <ul> <li>Confirm backend plugin is installed and configured</li> <li>Check training portal configuration</li> <li>Verify permissions are properly set up</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide.</p>"},{"location":"plugins/entity-scaffolder/overview/","title":"Entity Scaffolder Content Plugin","text":"<p>The Entity Scaffolder Content plugin for Backstage enables you to embed scaffolder templates directly within entity pages. This powerful feature allows you to contextualize templates based on the entity they're being accessed from, making template discovery and usage more intuitive.</p>"},{"location":"plugins/entity-scaffolder/overview/#features","title":"Features","text":"<ul> <li>Embedded Template Tab: Add a dedicated tab for scaffolder templates on entity pages</li> <li>Context-Aware Templates: Filter and populate templates based on entity context</li> <li>Dynamic Initial Values: Pre-populate template form fields using entity data</li> <li>Flexible Configuration: Customize template filtering and data mapping</li> <li>Seamless Integration: Works with existing scaffolder templates</li> </ul>"},{"location":"plugins/entity-scaffolder/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/entity-scaffolder/overview/#frontend-plugin","title":"Frontend Plugin","text":"<p>The plugin provides frontend components for:</p> <ul> <li>Displaying templates within entity pages</li> <li>Filtering templates based on entity context</li> <li>Pre-populating template forms with entity data</li> </ul> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/entity-scaffolder/overview/#screenshots","title":"Screenshots","text":"<p> Example of embedded scaffolder templates</p> <p> Template form with pre-populated data</p>"},{"location":"plugins/entity-scaffolder/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul>"},{"location":"plugins/entity-scaffolder/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the Entity Scaffolder Content plugin:</p> <ol> <li>Install the frontend plugin</li> <li>Configure entity page integration</li> <li>Set up template filters and data mapping</li> <li>Start using contextualized templates</li> </ol> <p>For detailed installation and configuration instructions, refer to the frontend documentation linked above. </p>"},{"location":"plugins/entity-scaffolder/frontend/about/","title":"Entity Scaffolder Content Frontend Plugin","text":""},{"location":"plugins/entity-scaffolder/frontend/about/#overview","title":"Overview","text":"<p>The Entity Scaffolder Content frontend plugin enhances Backstage's scaffolder functionality by allowing you to embed template selection and creation directly within entity pages. This integration provides a more contextual and streamlined experience for users working with templates.</p>"},{"location":"plugins/entity-scaffolder/frontend/about/#features","title":"Features","text":""},{"location":"plugins/entity-scaffolder/frontend/about/#template-integration","title":"Template Integration","text":"<ul> <li>Embed scaffolder templates in entity pages</li> <li>Add dedicated template tabs to entity layouts</li> <li>Seamless integration with existing entity pages</li> </ul>"},{"location":"plugins/entity-scaffolder/frontend/about/#context-aware-filtering","title":"Context-Aware Filtering","text":"<ul> <li>Filter templates based on entity metadata</li> <li>Custom filter rules and conditions</li> <li>Group templates by categories</li> <li>Dynamic template visibility</li> </ul>"},{"location":"plugins/entity-scaffolder/frontend/about/#data-pre-population","title":"Data Pre-population","text":"<ul> <li>Auto-fill template forms with entity data</li> <li>Dynamic value mapping</li> <li>Custom data transformation</li> <li>Context-aware defaults</li> </ul>"},{"location":"plugins/entity-scaffolder/frontend/about/#user-interface","title":"User Interface","text":"<ul> <li>Clean and intuitive template browsing</li> <li>Consistent Backstage design language</li> <li>Responsive layout</li> <li>Integrated form handling</li> </ul>"},{"location":"plugins/entity-scaffolder/frontend/about/#components","title":"Components","text":""},{"location":"plugins/entity-scaffolder/frontend/about/#entityscaffoldercontent","title":"EntityScaffolderContent","text":"<p>The main component that provides:</p> <ul> <li>Template listing and filtering</li> <li>Integration with entity context</li> <li>Template form rendering</li> <li>Data pre-population logic</li> </ul> <p>Example usage: <pre><code>&lt;EntityScaffolderContent\n  templateGroupFilters={[\n    {\n      title: 'Crossplane Claims',\n      filter: (entity, template) =&gt;\n        template.metadata?.labels?.forEntity === 'system' &amp;&amp;\n        entity.spec?.type === 'kubernetes-namespace',\n    },\n  ]}\n  buildInitialState={entity =&gt; ({\n    xrNamespace: entity.metadata.name,\n    clusters: [entity.metadata?.annotations?.['backstage.io/managed-by-location']?.split(\": \")[1] ?? '']\n  })}\n/&gt;\n</code></pre></p>"},{"location":"plugins/entity-scaffolder/frontend/about/#template-filters","title":"Template Filters","text":"<p>Configure how templates are filtered and grouped:</p> <ul> <li>Define filter conditions</li> <li>Group templates by purpose</li> <li>Apply entity-specific rules</li> <li>Handle template metadata</li> </ul>"},{"location":"plugins/entity-scaffolder/frontend/about/#initial-state-builder","title":"Initial State Builder","text":"<p>Customize how entity data maps to template fields:</p> <ul> <li>Transform entity metadata</li> <li>Set default values</li> <li>Handle complex data structures</li> <li>Apply business logic</li> </ul>"},{"location":"plugins/entity-scaffolder/frontend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/entity-scaffolder/frontend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage Scaffolder</li> <li>Entity Catalog</li> <li>Template Engine</li> <li>Form System</li> </ul>"},{"location":"plugins/entity-scaffolder/frontend/about/#component-props","title":"Component Props","text":""},{"location":"plugins/entity-scaffolder/frontend/about/#entityscaffoldercontent_1","title":"EntityScaffolderContent","text":"<ul> <li><code>templateGroupFilters</code>: Define template filtering and grouping</li> <li><code>buildInitialState</code>: Map entity data to template fields</li> <li><code>additionalTemplateFilters</code>: Extra template filtering rules</li> <li><code>defaultCategory</code>: Default template category</li> </ul>"},{"location":"plugins/entity-scaffolder/frontend/about/#user-experience","title":"User Experience","text":""},{"location":"plugins/entity-scaffolder/frontend/about/#template-discovery","title":"Template Discovery","text":"<ol> <li>Navigate to an entity page</li> <li>Access the templates tab</li> <li>View filtered, relevant templates</li> <li>Select appropriate template</li> </ol>"},{"location":"plugins/entity-scaffolder/frontend/about/#template-usage","title":"Template Usage","text":"<ol> <li>Choose a template</li> <li>Review pre-populated data</li> <li>Fill remaining fields</li> <li>Create from template</li> </ol>"},{"location":"plugins/entity-scaffolder/frontend/about/#template-filtering","title":"Template Filtering","text":"<ol> <li>Templates filtered automatically</li> <li>Grouped by configured categories</li> <li>Only relevant templates shown</li> <li>Entity context considered </li> </ol>"},{"location":"plugins/entity-scaffolder/frontend/configure/","title":"Configuring the Entity Scaffolder Content Frontend Plugin","text":"<p>This guide covers the configuration options available for the Entity Scaffolder Content frontend plugin.</p>"},{"location":"plugins/entity-scaffolder/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The configuration options described below are still available and can be customized through the app configuration.</p>"},{"location":"plugins/entity-scaffolder/frontend/configure/#component-configuration","title":"Component Configuration","text":""},{"location":"plugins/entity-scaffolder/frontend/configure/#entityscaffoldercontent-props","title":"EntityScaffolderContent Props","text":"<p>The main component accepts the following configuration props:</p> <pre><code>interface EntityScaffolderContentProps {\n  // Define template filtering and grouping\n  templateGroupFilters: Array&lt;{\n    title: string;\n    filter: (entity: Entity, template: Template) =&gt; boolean;\n  }&gt;;\n\n  // Map entity data to template fields\n  buildInitialState?: (entity: Entity) =&gt; Record&lt;string, unknown&gt;;\n\n  // Scaffolder Field Extensions Support\n  ScaffolderFieldExtensions?: ReactNode;  \n\n  // Default template category\n  defaultCategory?: string;\n}\n</code></pre>"},{"location":"plugins/entity-scaffolder/frontend/configure/#template-group-filters","title":"Template Group Filters","text":"<p>Configure how templates are filtered and grouped based on entity context:</p> <pre><code>const templateGroupFilters = [\n  {\n    title: 'Kubernetes Resources',\n    filter: (entity, template) =&gt;\n      template.metadata?.labels?.type === 'kubernetes' &amp;&amp;\n      entity.spec?.type === 'kubernetes-namespace',\n  },\n  {\n    title: 'Application Templates',\n    filter: (entity, template) =&gt;\n      template.metadata?.labels?.type === 'application' &amp;&amp;\n      entity.spec?.type === 'service',\n  },\n];\n</code></pre>"},{"location":"plugins/entity-scaffolder/frontend/configure/#initial-state-builder","title":"Initial State Builder","text":"<p>Define how entity data maps to template form fields:</p> <pre><code>const buildInitialState = (entity: Entity) =&gt; ({\n  // Basic metadata mapping\n  name: entity.metadata.name,\n  namespace: entity.metadata.namespace,\n\n  // Extract from annotations\n  cluster: entity.metadata?.annotations?.['backstage.io/managed-by-location']?.split(\": \")[1],\n\n  // Custom transformations\n  labels: Object.entries(entity.metadata.labels || {}).map(\n    ([key, value]) =&gt; `${key}=${value}`\n  ),\n});\n</code></pre>"},{"location":"plugins/entity-scaffolder/frontend/configure/#field-extensions-support","title":"Field Extensions Support","text":"<p>Add field extensions support:</p> <pre><code>import { ScaffolderFieldExtensions } from '@backstage/plugin-scaffolder-react';\nimport { EntityPickerFieldExtension, RepoUrlPickerFieldExtension } from '@backstage/plugin-scaffolder';\n\nScaffolderFieldExtensions={\n  &lt;ScaffolderFieldExtensions&gt;\n    &lt;RepoUrlPickerFieldExtension /&gt;\n    &lt;EntityPickerFieldExtension /&gt;\n  &lt;/ScaffolderFieldExtensions&gt;\n}\n</code></pre>"},{"location":"plugins/entity-scaffolder/frontend/configure/#entity-page-integration","title":"Entity Page Integration","text":""},{"location":"plugins/entity-scaffolder/frontend/configure/#basic-integration","title":"Basic Integration","text":"<p>Add the plugin to an entity page:</p> <pre><code>import { EntityScaffolderContent } from '@terasky/backstage-plugin-entity-scaffolder-content';\nimport { GitOpsManifestUpdaterExtension } from '@terasky/backstage-plugin-gitops-manifest-updater';\nimport { ScaffolderFieldExtensions } from '@backstage/plugin-scaffolder-react';\nimport { EntityPickerFieldExtension, RepoUrlPickerFieldExtension } from '@backstage/plugin-scaffolder';\n\nconst entityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/scaffolder\" \n      title=\"Templates\"\n    &gt;\n      &lt;EntityScaffolderContent\n        templateGroupFilters={templateGroupFilters}\n        buildInitialState={buildInitialState}\n        ScaffolderFieldExtensions={\n          &lt;ScaffolderFieldExtensions&gt;\n            &lt;RepoUrlPickerFieldExtension /&gt;\n            &lt;EntityPickerFieldExtension /&gt;\n            &lt;GitOpsManifestUpdaterExtension /&gt;\n          &lt;/ScaffolderFieldExtensions&gt;\n        }\n      /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/entity-scaffolder/frontend/configure/#advanced-integration","title":"Advanced Integration","text":"<p>Configure for multiple entity types:</p> <pre><code>const serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/scaffolder\" \n      title=\"Service Templates\"\n    &gt;\n      &lt;EntityScaffolderContent\n        templateGroupFilters={[\n          {\n            title: 'Service Templates',\n            filter: (entity, template) =&gt;\n              template.metadata?.labels?.type === 'service' &amp;&amp;\n              entity.spec?.type === 'service',\n          },\n        ]}\n        buildInitialState={entity =&gt; ({\n          serviceName: entity.metadata.name,\n          owner: entity.spec?.owner,\n          type: entity.spec?.type,\n        })}\n        defaultCategory=\"Service Templates\"\n      /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n\nconst systemEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/scaffolder\" \n      title=\"System Templates\"\n    &gt;\n      &lt;EntityScaffolderContent\n        templateGroupFilters={[\n          {\n            title: 'System Resources',\n            filter: (entity, template) =&gt;\n              template.metadata?.labels?.type === 'system' &amp;&amp;\n              entity.spec?.type === 'system',\n          },\n        ]}\n        buildInitialState={entity =&gt; ({\n          systemName: entity.metadata.name,\n          environment: entity.spec?.environment,\n        })}\n        defaultCategory=\"System Resources\"\n      /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/entity-scaffolder/frontend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Template Filtering</p> <ul> <li>Use clear, descriptive group titles</li> <li>Keep filter conditions simple and maintainable</li> <li>Consider template metadata structure</li> <li>Handle edge cases gracefully</li> </ul> </li> <li> <p>Data Mapping</p> <ul> <li>Validate entity data before mapping</li> <li>Provide sensible defaults</li> <li>Document data transformations</li> <li>Handle missing data gracefully</li> </ul> </li> <li> <p>Entity Integration</p> <ul> <li>Use consistent route paths</li> <li>Group related templates logically</li> <li>Consider user workflow</li> <li>Maintain clear navigation</li> </ul> </li> </ol> <p>For installation instructions, refer to the Installation Guide. </p>"},{"location":"plugins/entity-scaffolder/frontend/install/","title":"Installing the Entity Scaffolder Content Frontend Plugin","text":"<p>This guide will help you install and set up the Entity Scaffolder Content frontend plugin in your Backstage instance.</p>"},{"location":"plugins/entity-scaffolder/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>The Scaffolder plugin installed and configured</li> <li>Access to entity pages where you want to embed templates</li> </ol>"},{"location":"plugins/entity-scaffolder/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/entity-scaffolder/frontend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/app add @terasky/backstage-plugin-entity-scaffolder-content\n</code></pre>"},{"location":"plugins/entity-scaffolder/frontend/install/#2-add-to-entity-page","title":"2. Add to Entity Page","text":"<p>Modify your entity page configuration in <code>packages/app/src/components/catalog/EntityPage.tsx</code>:</p> <pre><code>import { EntityScaffolderContent } from '@terasky/backstage-plugin-entity-scaffolder-content';\n\n// Example for system entity page\nconst systemPage = (\n  &lt;EntityLayout&gt;\n    {/* ... other routes ... */}\n\n    &lt;EntityLayout.Route path=\"/scaffolder\" title=\"Templates\"&gt;\n      &lt;EntityScaffolderContent\n        templateGroupFilters={[\n          {\n            title: 'System Templates',\n            filter: (entity, template) =&gt;\n              template.metadata?.labels?.forEntity === 'system' &amp;&amp;\n              entity.spec?.type === 'kubernetes-namespace',\n          },\n        ]}\n        buildInitialState={entity =&gt; ({\n          namespace: entity.metadata.name,\n          // Add other initial state mappings\n        })}\n      /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n\n// Add similar configurations for other entity pages as needed\n</code></pre>"},{"location":"plugins/entity-scaffolder/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { entityScaffolderContentPlugin } from '@terasky/backstage-plugin-entity-scaffolder-content/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    entityScaffolderContentPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/entity-scaffolder/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The templates tab appears on configured entity pages</li> <li>Templates are properly filtered based on entity context</li> <li>Template forms are pre-populated with entity data</li> </ol>"},{"location":"plugins/entity-scaffolder/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Templates Tab Not Showing</p> <ul> <li>Verify EntityLayout.Route configuration</li> <li>Check component import path</li> <li>Ensure entity page configuration is applied</li> </ul> </li> <li> <p>Templates Not Filtered</p> <ul> <li>Review templateGroupFilters configuration</li> <li>Check template metadata and labels</li> <li>Verify entity type matching</li> </ul> </li> <li> <p>Form Pre-population Issues</p> <ul> <li>Check buildInitialState function</li> <li>Verify entity data access</li> <li>Review data transformation logic</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide. </p>"},{"location":"plugins/gitops-manifest-updater/overview/","title":"GitOps Manifest Updater Plugin","text":"<p>The GitOps Manifest Updater plugin provides a powerful form component for updating Kubernetes manifests in Git repositories. It dynamically generates forms based on OpenAPI schemas from Custom Resource Definitions (CRDs), making it easy to update manifest specifications while maintaining GitOps best practices.</p>"},{"location":"plugins/gitops-manifest-updater/overview/#features","title":"Features","text":"<ul> <li>Dynamic Form Generation: Automatically create forms from CRD OpenAPI schemas</li> <li>Git Integration: Seamless integration with GitHub through Backstage's SCM integration</li> <li>Automated PR Creation: Automatically create pull requests with manifest changes</li> <li>Flexible Configuration: Support for both entity annotations and manual URL input</li> <li>Structure Preservation: Maintains file paths and directory structure</li> <li>Scaffolder Integration: Works as a field extension in Backstage's scaffolder</li> </ul>"},{"location":"plugins/gitops-manifest-updater/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/gitops-manifest-updater/overview/#frontend-plugin","title":"Frontend Plugin","text":"<p>The plugin provides frontend components for:</p> <ul> <li>Dynamic form generation and validation</li> <li>Git repository integration</li> <li>Pull request creation and management</li> <li>Manifest file handling</li> </ul> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/gitops-manifest-updater/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul>"},{"location":"plugins/gitops-manifest-updater/overview/#example-usage","title":"Example Usage","text":"<p>The plugin can be used in various scenarios:</p> <ol> <li> <p>Component Updates</p> <ul> <li>Update deployment configurations</li> <li>Modify resource requests/limits</li> <li>Change environment variables</li> </ul> </li> <li> <p>Infrastructure Management</p> <ul> <li>Update Crossplane resources</li> <li>Modify cluster configurations</li> <li>Adjust infrastructure settings</li> </ul> </li> <li> <p>Application Configuration</p> <ul> <li>Update application settings</li> <li>Modify feature flags</li> <li>Change runtime parameters</li> </ul> </li> </ol>"},{"location":"plugins/gitops-manifest-updater/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the GitOps Manifest Updater plugin:</p> <ol> <li>Install the frontend plugin</li> <li>Configure scaffolder integration</li> <li>Set up Git repository access</li> <li>Start using dynamic manifest forms</li> </ol> <p>For detailed installation and configuration instructions, refer to the frontend documentation linked above.</p>"},{"location":"plugins/gitops-manifest-updater/frontend/about/","title":"GitOps Manifest Updater Frontend Plugin","text":""},{"location":"plugins/gitops-manifest-updater/frontend/about/#overview","title":"Overview","text":"<p>The GitOps Manifest Updater frontend plugin provides a dynamic form component that integrates with Backstage's scaffolder to enable easy updates to Kubernetes manifests in Git repositories. The plugin uses OpenAPI schemas from CRDs to generate intuitive forms for updating manifest specifications.</p>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#features","title":"Features","text":""},{"location":"plugins/gitops-manifest-updater/frontend/about/#dynamic-form-generation","title":"Dynamic Form Generation","text":"<ul> <li>Automatic form creation from CRD schemas</li> <li>Field validation based on OpenAPI specs</li> <li>Support for complex data structures</li> <li>Custom field renderers</li> </ul>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#git-integration","title":"Git Integration","text":"<ul> <li>GitHub repository support</li> <li>Automatic PR creation</li> <li>Branch management</li> <li>File path preservation</li> </ul>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#scaffolder-integration","title":"Scaffolder Integration","text":"<ul> <li>Custom field extension</li> <li>Template compatibility</li> <li>Context-aware defaults</li> <li>Entity data integration</li> </ul>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#user-interface","title":"User Interface","text":"<ul> <li>Intuitive form layout</li> <li>Real-time validation</li> <li>Error handling</li> <li>Progress feedback</li> </ul>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#components","title":"Components","text":""},{"location":"plugins/gitops-manifest-updater/frontend/about/#gitopsmanifestupdaterextension","title":"GitOpsManifestUpdaterExtension","text":"<p>The main component that provides:</p> <ul> <li>Form generation and handling</li> <li>Git repository integration</li> <li>PR creation workflow</li> <li>Schema validation</li> </ul> <p>Example usage: <pre><code>&lt;ScaffolderFieldExtensions&gt;\n  &lt;GitOpsManifestUpdaterExtension /&gt;\n&lt;/ScaffolderFieldExtensions&gt;\n</code></pre></p>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#form-generation","title":"Form Generation","text":"<p>The plugin generates forms based on:</p> <ul> <li>CRD OpenAPI schemas</li> <li>Field definitions</li> <li>Validation rules</li> <li>Default values</li> </ul>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#repository-integration","title":"Repository Integration","text":"<p>Handles repository operations:</p> <ul> <li>File reading</li> <li>Change tracking</li> <li>PR creation</li> <li>Branch management</li> </ul>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/gitops-manifest-updater/frontend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage Scaffolder</li> <li>GitHub API</li> <li>OpenAPI Schema Parser</li> <li>Form System</li> </ul>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#component-props","title":"Component Props","text":""},{"location":"plugins/gitops-manifest-updater/frontend/about/#gitopsmanifestupdaterextension_1","title":"GitOpsManifestUpdaterExtension","text":"<ul> <li>Integrates with scaffolder field extensions</li> <li>Handles form state management</li> <li>Processes manifest updates</li> <li>Creates pull requests</li> </ul>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#schema-handling","title":"Schema Handling","text":"<ul> <li>OpenAPI schema parsing</li> <li>Form field mapping</li> <li>Validation rules</li> <li>Default value handling</li> </ul>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#user-experience","title":"User Experience","text":""},{"location":"plugins/gitops-manifest-updater/frontend/about/#manifest-updates","title":"Manifest Updates","text":"<ol> <li>Select target repository</li> <li>Choose manifest file</li> <li>Update fields in form</li> <li>Submit changes</li> </ol>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#pull-request-creation","title":"Pull Request Creation","text":"<ol> <li>Changes detected</li> <li>Branch created</li> <li>PR generated</li> <li>Review and merge</li> </ol>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#form-interaction","title":"Form Interaction","text":"<ol> <li>Dynamic field rendering</li> <li>Real-time validation</li> <li>Error feedback</li> <li>Submit confirmation</li> </ol>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#example-integrations","title":"Example Integrations","text":""},{"location":"plugins/gitops-manifest-updater/frontend/about/#entity-page-integration","title":"Entity Page Integration","text":"<pre><code>const serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route path=\"/scaffolder\" title=\"Entity Scaffolder\"&gt;\n      &lt;EntityScaffolderContent\n        templateGroupFilters={[\n          {\n            title: 'Management Templates',\n            filter: (entity, template) =&gt;\n              template.metadata?.labels?.target === 'component',\n          },\n        ]}\n        buildInitialState={entity =&gt; ({\n          entity: stringifyEntityRef(entity)\n        })}\n        ScaffolderFieldExtensions={\n          &lt;ScaffolderFieldExtensions&gt;\n            &lt;GitOpsManifestUpdaterExtension /&gt;\n          &lt;/ScaffolderFieldExtensions&gt;\n        }\n      /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/about/#template-integration","title":"Template Integration","text":"<pre><code>apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: update-manifest\n  title: Update Kubernetes Manifest\nspec:\n  parameters:\n    - title: Update Manifest\n      properties:\n        manifestUpdate:\n          title: Manifest Update\n          type: string\n          ui:field: GitOpsManifestUpdater\n          ui:options:\n            repositoryUrl: ${{ parameters.repoUrl }}\n            branch: main\n            path: manifests/\n</code></pre> <p>For installation and configuration details, refer to the Installation Guide and Configuration Guide.</p>"},{"location":"plugins/gitops-manifest-updater/frontend/configure/","title":"Configuring the GitOps Manifest Updater Frontend Plugin","text":"<p>This guide covers the configuration options available for the GitOps Manifest Updater frontend plugin.</p>"},{"location":"plugins/gitops-manifest-updater/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The plugin will be automatically integrated into the appropriate locations without requiring manual route configuration.</p>"},{"location":"plugins/gitops-manifest-updater/frontend/configure/#example-configuration-for-github-based-scm","title":"Example Configuration for GitHub based SCM","text":"<pre><code>apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: update-kubernetes-manifest\n  title: Update Kubernetes Manifest\n  labels:\n    target: component\n  description: A template to update a claim manifest in Git based on the registered OpenAPI Schema of the XRD\nspec:\n  owner: user:guest\n  type: service\n  parameters:\n    - title: Entity Selection\n      required:\n        - entity\n      properties:\n        entity:\n          title: Entity\n          type: string\n          description: Select the entity to update\n          ui:field: EntityPicker\n          ui:options:\n            catalogFilter:\n              - kind: Component\n        sourceFileUrl:\n          title: Source File URL\n          type: string\n          description: Override the source file URL (optional - only needed if entity doesn't have terasky.backstage.io/source-file-url annotation)\n    - title: GitOps Manifest Updater\n      required:\n        - gitOpsManifestUpdater\n      properties:\n        gitOpsManifestUpdater:\n          title: GitOps Manifest Updater\n          type: object\n          ui:field: GitOpsManifestUpdater\n  steps:\n    - id: get-entity\n      name: Get Entity\n      action: catalog:fetch\n      input:\n        entityRef: ${{ parameters.entity }}\n\n    - id: get-annotation-url\n      name: Get Annotation URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: \n          annotations: ${{ steps['get-entity'].output.entity.metadata.annotations }}\n        expression: |\n          annotations.\"terasky.backstage.io/source-file-url\"\n\n    - id: resolve-url\n      name: Resolve URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: \n          sourceFileUrl: ${{ parameters.sourceFileUrl }}\n          annotationUrl: ${{ steps['get-annotation-url'].output.result }}\n        expression: |\n          $exists(sourceFileUrl) ? sourceFileUrl : annotationUrl\n\n    - id: validate-url\n      name: Validate URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['resolve-url'].output.result }}\n        expression: |\n          $string($) ? $ : $error(\"No source URL provided. Please either add the terasky.backstage.io/source-file-url annotation to the entity or provide a sourceFileUrl parameter\")\n\n    - id: get-filepath\n      name: Get File Path\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          $join($filter($split($, \"/\"), function($v, $i) { $i &gt;= 7}), \"/\")\n\n    - id: fetch-base\n      name: Fetch Current Manifest\n      action: fetch:plain:file\n      input:\n        url: ${{ steps['validate-url'].output.result }}\n        targetPath: ${{ steps['get-filepath'].output.result }}\n\n    - id: serialize-patch\n      name: Evaluate Changes\n      action: roadiehq:utils:serialize:yaml\n      input:\n        data:\n          spec: ${{ parameters.gitOpsManifestUpdater }}\n\n    - id: merge-patch\n      name: Merge Changes\n      action: roadiehq:utils:merge\n      input:\n        path: ${{ steps['get-filepath'].output.result }}\n        content: ${{ steps['serialize-patch'].output.serialized }}\n\n    - id: read-file\n      name: Read File\n      action: roadiehq:utils:fs:parse\n      input:\n        path: ${{ steps['get-filepath'].output.result }}\n\n    - id: parse-url\n      name: Parse URL for PR\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          {\n            \"owner\": $split($, \"/\")[3],\n            \"repo\": $split($, \"/\")[4],\n            \"branch\": $split($, \"/\")[6]\n          }\n\n    - id: format-branch-name\n      name: Format Branch Name\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          \"backstage-sourced-update-\" &amp; $join($filter($split($, \"/\"), function($v, $i) { $i &gt;= 7}), \"-\")\n\n    - id: create-pull-request\n      name: create-pull-request\n      action: publish:github:pull-request\n      input:\n        repoUrl: ${{ 'github.com?owner=' + steps['parse-url'].output.result.owner + '&amp;repo=' + steps['parse-url'].output.result.repo }}\n        branchName: ${{ steps['format-branch-name'].output.result }}\n        title: Updating Kubernetes YAML for ${{ steps['get-entity'].output.entity.metadata.name }}\n        description: Updating Kubernetes YAML for ${{ steps['get-entity'].output.entity.metadata.name }}\n        targetBranchName: ${{ steps['parse-url'].output.result.branch }}\n\n  output:\n    links:\n      - title: Pull Request\n        url: ${{ steps['create-pull-request'].output.remoteUrl }}\n      - title: Download YAML Manifest\n        url: data:application/yaml;charset=utf-8,${{ steps['read-file'].output.content }}\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/configure/#example-configuration-for-gitlab-based-scm","title":"Example Configuration for Gitlab based SCM","text":"<pre><code>apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: update-kubernetes-manifest-gitlab\n  title: Update Kubernetes Manifest From Gitlab\n  labels:\n    target: component\n  description: A template to update a claim manifest in Git based on the registered OpenAPI Schema of the XRD\nspec:\n  owner: user:guest\n  type: service\n  parameters:\n    - title: Entity Selection\n      required:\n        - entity\n      properties:\n        entity:\n          title: Entity\n          type: string\n          description: Select the entity to update\n          ui:field: EntityPicker\n          ui:options:\n            catalogFilter:\n              - kind: Component\n        sourceFileUrl:\n          title: Source File URL\n          type: string\n          description: Override the source file URL (optional - only needed if entity doesn't have terasky.backstage.io/source-file-url annotation)\n    - title: GitOps Manifest Updater\n      required:\n        - gitOpsManifestUpdater\n      properties:\n        gitOpsManifestUpdater:\n          title: GitOps Manifest Updater\n          type: object\n          ui:field: GitOpsManifestUpdater\n  steps:\n    - id: get-entity\n      name: Get Entity\n      action: catalog:fetch\n      input:\n        entityRef: ${{ parameters.entity }}\n\n    - id: get-annotation-url\n      name: Get Annotation URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: \n          annotations: ${{ steps['get-entity'].output.entity.metadata.annotations }}\n        expression: |\n          annotations.\"terasky.backstage.io/source-file-url\"\n\n    - id: resolve-url\n      name: Resolve URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: \n          sourceFileUrl: ${{ parameters.sourceFileUrl }}\n          annotationUrl: ${{ steps['get-annotation-url'].output.result }}\n        expression: |\n          $exists(sourceFileUrl) ? sourceFileUrl : annotationUrl\n\n    - id: validate-url\n      name: Validate URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['resolve-url'].output.result }}\n        expression: |\n          $string($) ? $ : $error(\"No source URL provided. Please either add the terasky.backstage.io/source-file-url annotation to the entity or provide a sourceFileUrl parameter\")\n\n    - id: get-filepath\n      name: Get File Path\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          $join($filter($split($, \"/\"), function($v, $i) { $i &gt;= 8}), \"/\")\n\n    - id: fetch-base\n      name: Fetch Current Manifest\n      action: fetch:plain:file\n      input:\n        url: ${{ steps['validate-url'].output.result }}\n        targetPath: ${{ steps['get-filepath'].output.result }}\n\n    - id: serialize-patch\n      name: Evaluate Changes\n      action: roadiehq:utils:serialize:yaml\n      input:\n        data:\n          spec: ${{ parameters.gitOpsManifestUpdater }}\n\n    - id: merge-patch\n      name: Merge Changes\n      action: roadiehq:utils:merge\n      input:\n        path: ${{ steps['get-filepath'].output.result }}\n        content: ${{ steps['serialize-patch'].output.serialized }}\n\n    - id: read-file\n      name: Read File\n      action: roadiehq:utils:fs:parse\n      input:\n        path: ${{ steps['get-filepath'].output.result }}\n\n    - id: parse-url\n      name: Parse URL for PR\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          {\n            \"owner\": $split($, \"/\")[3],\n            \"repo\": $split($, \"/\")[4],\n            \"branch\": $split($, \"/\")[7]\n          }\n\n    - id: format-branch-name\n      name: Format Branch Name\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          \"backstage-sourced-update-\" &amp; $join($filter($split($, \"/\"), function($v, $i) { $i &gt;= 8}), \"-\")\n\n    - id: create-merge-request\n      name: create-merge-request\n      action: publish:gitlab:merge-request\n      input:\n        repoUrl: ${{ 'gitlab.com?owner=' + steps['parse-url'].output.result.owner + '&amp;repo=' + steps['parse-url'].output.result.repo }}\n        branchName: ${{ steps['format-branch-name'].output.result }}\n        title: Updating Kubernetes YAML for ${{ steps['get-entity'].output.entity.metadata.name }}\n        description: Updating Kubernetes YAML for ${{ steps['get-entity'].output.entity.metadata.name }}\n        targetBranchName: ${{ steps['parse-url'].output.result.branch }}\n\n  output:\n    links:\n      - title: Merge Request\n        url: ${{ steps['create-merge-request'].output.mergeRequestUrl }}\n      - title: Download YAML Manifest\n        url: data:application/yaml;charset=utf-8,${{ steps['read-file'].output.content }}\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/configure/#component-configuration","title":"Component Configuration","text":""},{"location":"plugins/gitops-manifest-updater/frontend/configure/#integration-examples","title":"Integration Examples","text":""},{"location":"plugins/gitops-manifest-updater/frontend/configure/#basic-integration","title":"Basic Integration","text":"<pre><code>&lt;ScaffolderFieldExtensions&gt;\n  &lt;GitOpsManifestUpdaterExtension /&gt;\n&lt;/ScaffolderFieldExtensions&gt;\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/configure/#advanced-integration","title":"Advanced Integration","text":"<pre><code>&lt;ScaffolderFieldExtensions&gt;\n  &lt;GitOpsManifestUpdaterExtension\n    defaultBranch=\"develop\"\n    defaultPath=\"k8s/\"\n    schemaValidator={customValidator}\n    pullRequestCreator={customPRCreator}\n  /&gt;\n&lt;/ScaffolderFieldExtensions&gt;\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/configure/#template-examples","title":"Template Examples","text":""},{"location":"plugins/gitops-manifest-updater/frontend/configure/#kubernetes-resource-update","title":"Kubernetes Resource Update","text":"<pre><code>apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: update-kubernetes-manifest\n  title: Update Kubernetes Manifest\n  labels:\n    target: component\n  description: A template to update a claim manifest in Git based on the registered OpenAPI Schema of the XRD\nspec:\n  owner: user:guest\n  type: service\n  parameters:\n    - title: Entity Selection\n      required:\n        - entity\n      properties:\n        entity:\n          title: Entity\n          type: string\n          description: Select the entity to update\n          ui:field: EntityPicker\n          ui:options:\n            catalogFilter:\n              - kind: Component\n        sourceFileUrl:\n          title: Source File URL\n          type: string\n          description: Override the source file URL (optional - only needed if entity doesn't have terasky.backstage.io/source-file-url annotation)\n    - title: GitOps Manifest Updater\n      required:\n        - gitOpsManifestUpdater\n      properties:\n        gitOpsManifestUpdater:\n          title: GitOps Manifest Updater\n          type: object\n          ui:field: GitOpsManifestUpdater\n  steps:\n    - id: get-entity\n      name: Get Entity\n      action: catalog:fetch\n      input:\n        entityRef: ${{ parameters.entity }}\n\n    - id: get-annotation-url\n      name: Get Annotation URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: \n          annotations: ${{ steps['get-entity'].output.entity.metadata.annotations }}\n        expression: |\n          annotations.\"terasky.backstage.io/source-file-url\"\n\n    - id: resolve-url\n      name: Resolve URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: \n          sourceFileUrl: ${{ parameters.sourceFileUrl }}\n          annotationUrl: ${{ steps['get-annotation-url'].output.result }}\n        expression: |\n          $exists(sourceFileUrl) ? sourceFileUrl : annotationUrl\n\n    - id: validate-url\n      name: Validate URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['resolve-url'].output.result }}\n        expression: |\n          $string($) ? $ : $error(\"No source URL provided. Please either add the terasky.backstage.io/source-file-url annotation to the entity or provide a sourceFileUrl parameter\")\n\n    - id: get-filepath\n      name: Get File Path\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          $join($filter($split($, \"/\"), function($v, $i) { $i &gt;= 7}), \"/\")\n\n    - id: fetch-base\n      name: Fetch Current Manifest\n      action: fetch:plain:file\n      input:\n        url: ${{ steps['validate-url'].output.result }}\n        targetPath: ${{ steps['get-filepath'].output.result }}\n\n    - id: serialize-patch\n      name: Evaluate Changes\n      action: roadiehq:utils:serialize:yaml\n      input:\n        data:\n          spec: ${{ parameters.gitOpsManifestUpdater }}\n\n    - id: merge-patch\n      name: Merge Changes\n      action: roadiehq:utils:merge\n      input:\n        path: ${{ steps['get-filepath'].output.result }}\n        content: ${{ steps['serialize-patch'].output.serialized }}\n\n    - id: read-file\n      name: Read File\n      action: roadiehq:utils:fs:parse\n      input:\n        path: ${{ steps['get-filepath'].output.result }}\n\n    - id: parse-url\n      name: Parse URL for PR\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          {\n            \"owner\": $split($, \"/\")[3],\n            \"repo\": $split($, \"/\")[4],\n            \"branch\": $split($, \"/\")[6]\n          }\n\n    - id: format-branch-name\n      name: Format Branch Name\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          \"backstage-sourced-update-\" &amp; $join($filter($split($, \"/\"), function($v, $i) { $i &gt;= 7}), \"-\")\n\n    - id: create-pull-request\n      name: create-pull-request\n      action: publish:github:pull-request\n      input:\n        repoUrl: ${{ 'github.com?owner=' + steps['parse-url'].output.result.owner + '&amp;repo=' + steps['parse-url'].output.result.repo }}\n        branchName: ${{ steps['format-branch-name'].output.result }}\n        title: Updating Kubernetes YAML for ${{ steps['get-entity'].output.entity.metadata.name }}\n        description: Updating Kubernetes YAML for ${{ steps['get-entity'].output.entity.metadata.name }}\n        targetBranchName: ${{ steps['parse-url'].output.result.branch }}\n\n  output:\n    links:\n      - title: Pull Request\n        url: ${{ steps['create-pull-request'].output.remoteUrl }}\n      - title: Download YAML Manifest\n        url: data:application/yaml;charset=utf-8,${{ steps['read-file'].output.content }}\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Template Design</p> <ul> <li>Use clear, descriptive titles</li> <li>Provide helpful descriptions</li> <li>Set appropriate default values</li> <li>Include validation rules</li> </ul> </li> <li> <p>Repository Structure</p> <ul> <li>Organize manifests logically</li> <li>Use consistent file paths</li> <li>Follow GitOps practices</li> <li>Maintain clear documentation</li> </ul> </li> <li> <p>Pull Requests</p> <ul> <li>Use descriptive titles</li> <li>Provide detailed descriptions</li> <li>Apply appropriate labels</li> <li>Follow team conventions</li> </ul> </li> </ol> <p>For installation instructions, refer to the Installation Guide.</p>"},{"location":"plugins/gitops-manifest-updater/frontend/install/","title":"Installing the GitOps Manifest Updater Frontend Plugin","text":"<p>This guide will help you install and set up the GitOps Manifest Updater frontend plugin in your Backstage instance.</p>"},{"location":"plugins/gitops-manifest-updater/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>The Scaffolder plugin installed and configured</li> <li>Access to GitHub repositories</li> <li>Kubernetes CRDs with OpenAPI schemas</li> </ol>"},{"location":"plugins/gitops-manifest-updater/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/gitops-manifest-updater/frontend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/app add @terasky/backstage-plugin-gitops-manifest-updater\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/install/#2-add-to-scaffolder-route","title":"2. Add to Scaffolder Route","text":"<p>Modify your app routes in <code>packages/app/src/App.tsx</code>:</p> <pre><code>import { GitOpsManifestUpdaterExtension } from '@terasky/backstage-plugin-gitops-manifest-updater';\nimport { ScaffolderFieldExtensions } from '@backstage/plugin-scaffolder-react';\n\nconst routes = (\n  &lt;FlatRoutes&gt;\n    {/* ... other routes ... */}\n    &lt;Route path=\"/create\" element={&lt;ScaffolderPage /&gt;}&gt;\n      &lt;ScaffolderFieldExtensions&gt;\n        &lt;GitOpsManifestUpdaterExtension /&gt;\n      &lt;/ScaffolderFieldExtensions&gt;\n    &lt;/Route&gt;\n  &lt;/FlatRoutes&gt;\n);\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/install/#3-add-to-entity-pages","title":"3. Add to Entity Pages","text":"<p>Add the plugin to your entity pages in <code>packages/app/src/components/catalog/EntityPage.tsx</code>:</p> <pre><code>import { GitOpsManifestUpdaterExtension } from '@terasky/backstage-plugin-gitops-manifest-updater';\nimport { ScaffolderFieldExtensions } from '@backstage/plugin-scaffolder-react';\n\nconst serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route path=\"/scaffolder\" title=\"Entity Scaffolder\"&gt;\n      &lt;EntityScaffolderContent\n        templateGroupFilters={[\n          {\n            title: 'Management Templates',\n            filter: (entity, template) =&gt;\n              template.metadata?.labels?.target === 'component',\n          },\n        ]}\n        buildInitialState={entity =&gt; ({\n          entity: stringifyEntityRef(entity)\n        })}\n        ScaffolderFieldExtensions={\n          &lt;ScaffolderFieldExtensions&gt;\n            &lt;RepoUrlPickerFieldExtension /&gt;\n            &lt;EntityPickerFieldExtension /&gt;\n            &lt;GitOpsManifestUpdaterExtension /&gt;\n          &lt;/ScaffolderFieldExtensions&gt;\n        }\n      /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/install/#4-add-example-template","title":"4. Add Example Template","text":"<p>Add the example template to your templates directory:</p> <pre><code>apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: update-kubernetes-manifest\n  title: Update Kubernetes Manifest\n  labels:\n    target: component\n  description: A template to update a claim manifest in Git based on the registered OpenAPI Schema of the XRD\nspec:\n  owner: user:guest\n  type: service\n  parameters:\n    - title: Entity Selection\n      required:\n        - entity\n      properties:\n        entity:\n          title: Entity\n          type: string\n          description: Select the entity to update\n          ui:field: EntityPicker\n          ui:options:\n            catalogFilter:\n              - kind: Component\n        sourceFileUrl:\n          title: Source File URL\n          type: string\n          description: Override the source file URL (optional - only needed if entity doesn't have terasky.backstage.io/source-file-url annotation)\n    - title: GitOps Manifest Updater\n      required:\n        - gitOpsManifestUpdater\n      properties:\n        gitOpsManifestUpdater:\n          title: GitOps Manifest Updater\n          type: object\n          ui:field: GitOpsManifestUpdater\n  steps:\n    - id: get-entity\n      name: Get Entity\n      action: catalog:fetch\n      input:\n        entityRef: ${{ parameters.entity }}\n\n    - id: get-annotation-url\n      name: Get Annotation URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: \n          annotations: ${{ steps['get-entity'].output.entity.metadata.annotations }}\n        expression: |\n          annotations.\"terasky.backstage.io/source-file-url\"\n\n    - id: resolve-url\n      name: Resolve URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: \n          sourceFileUrl: ${{ parameters.sourceFileUrl }}\n          annotationUrl: ${{ steps['get-annotation-url'].output.result }}\n        expression: |\n          $exists(sourceFileUrl) ? sourceFileUrl : annotationUrl\n\n    - id: validate-url\n      name: Validate URL\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['resolve-url'].output.result }}\n        expression: |\n          $string($) ? $ : $error(\"No source URL provided. Please either add the terasky.backstage.io/source-file-url annotation to the entity or provide a sourceFileUrl parameter\")\n\n    - id: get-filepath\n      name: Get File Path\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          $join($filter($split($, \"/\"), function($v, $i) { $i &gt;= 7}), \"/\")\n\n    - id: fetch-base\n      name: Fetch Current Manifest\n      action: fetch:plain:file\n      input:\n        url: ${{ steps['validate-url'].output.result }}\n        targetPath: ${{ steps['get-filepath'].output.result }}\n\n    - id: serialize-patch\n      name: Evaluate Changes\n      action: roadiehq:utils:serialize:yaml\n      input:\n        data:\n          spec: ${{ parameters.gitOpsManifestUpdater }}\n\n    - id: merge-patch\n      name: Merge Changes\n      action: roadiehq:utils:merge\n      input:\n        path: ${{ steps['get-filepath'].output.result }}\n        content: ${{ steps['serialize-patch'].output.serialized }}\n\n    - id: read-file\n      name: Read File\n      action: roadiehq:utils:fs:parse\n      input:\n        path: ${{ steps['get-filepath'].output.result }}\n\n    - id: parse-url\n      name: Parse URL for PR\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          {\n            \"owner\": $split($, \"/\")[3],\n            \"repo\": $split($, \"/\")[4],\n            \"branch\": $split($, \"/\")[6]\n          }\n\n    - id: format-branch-name\n      name: Format Branch Name\n      action: roadiehq:utils:jsonata\n      input:\n        data: ${{ steps['validate-url'].output.result }}\n        expression: |\n          \"backstage-sourced-update-\" &amp; $join($filter($split($, \"/\"), function($v, $i) { $i &gt;= 7}), \"-\")\n\n    - id: create-pull-request\n      name: create-pull-request\n      action: publish:github:pull-request\n      input:\n        repoUrl: ${{ 'github.com?owner=' + steps['parse-url'].output.result.owner + '&amp;repo=' + steps['parse-url'].output.result.repo }}\n        branchName: ${{ steps['format-branch-name'].output.result }}\n        title: Updating Kubernetes YAML for ${{ steps['get-entity'].output.entity.metadata.name }}\n        description: Updating Kubernetes YAML for ${{ steps['get-entity'].output.entity.metadata.name }}\n        targetBranchName: ${{ steps['parse-url'].output.result.branch }}\n\n  output:\n    links:\n      - title: Pull Request\n        url: ${{ steps['create-pull-request'].output.remoteUrl }}\n      - title: Download YAML Manifest\n        url: data:application/yaml;charset=utf-8,${{ steps['read-file'].output.content }}\n</code></pre>"},{"location":"plugins/gitops-manifest-updater/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { gitopsManifestUpdaterPlugin } from '@terasky/backstage-plugin-gitops-manifest-updater/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    gitopsManifestUpdaterPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>App.tsx</code> and other files. The plugin will be automatically integrated into the appropriate locations.</p>"},{"location":"plugins/gitops-manifest-updater/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The GitOpsManifestUpdater field is available in templates</li> <li>Forms are generated correctly from CRD schemas</li> <li>Pull requests are created successfully</li> </ol>"},{"location":"plugins/gitops-manifest-updater/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Field Not Available</p> <ul> <li>Verify scaffolder field extension registration</li> <li>Check component imports</li> <li>Ensure template configuration is correct</li> </ul> </li> <li> <p>Schema Loading Issues</p> <ul> <li>Verify CRD accessibility</li> <li>Check OpenAPI schema format</li> <li>Review error messages in browser console</li> </ul> </li> <li> <p>PR Creation Problems</p> <ul> <li>Check GitHub token permissions</li> <li>Verify repository access</li> <li>Review branch protection rules</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide.</p>"},{"location":"plugins/kro/overview/","title":"KRO (Kubernetes Resource Orchestrator) Plugins","text":"<p>The KRO plugins for Backstage provide a comprehensive solution for managing and visualizing KRO resources within your Backstage instance. These plugins enable teams to effectively monitor and control their Kubernetes resources provisioned through KRO.</p>"},{"location":"plugins/kro/overview/#plugin-suite-components","title":"Plugin Suite Components","text":"<p>The KRO plugin suite consists of several components:</p> <ul> <li>Frontend Plugin (<code>@terasky/backstage-plugin-kro-resources-frontend</code>): </li> <li>Provides visualization and management capabilities for KRO resources</li> <li>Displays resource graphs and relationships</li> <li>Shows YAML configurations and events</li> <li> <p>Integrates with Backstage's permission framework</p> </li> <li> <p>Backend Plugin (<code>@terasky/backstage-plugin-kro-resources-backend</code>):</p> </li> <li>Handles API integration with Kubernetes clusters</li> <li>Manages resource data retrieval and processing</li> <li>Provides endpoints for resource operations</li> <li>Implements permission management and access control</li> <li> <p>Exposes MCP actions for programmatic access</p> </li> <li> <p>Common Library (<code>@terasky/backstage-plugin-kro-common</code>):</p> </li> <li>Shared utilities and types</li> <li>Permission definitions</li> <li>Common interfaces for frontend and backend</li> <li>Resource type definitions</li> </ul>"},{"location":"plugins/kro/overview/#key-features","title":"Key Features","text":"<ul> <li>Resource Visualization: View KRO RGDs, instances, and managed resources</li> <li>YAML Management: Access and manage YAML configurations for all resource types</li> <li>Event Monitoring: Track events related to your KRO resources</li> <li>Resource Graph: Visual representation of resource relationships</li> <li>Permission Controls: Granular access control for different resource types and actions</li> <li>Overview Cards: Quick insights into resource status and relationships</li> </ul>"},{"location":"plugins/kro/overview/#screenshots","title":"Screenshots","text":""},{"location":"plugins/kro/overview/#resource-graph-view","title":"Resource Graph View","text":""},{"location":"plugins/kro/overview/#resource-table-view","title":"Resource Table View","text":""},{"location":"plugins/kro/overview/#overview-information","title":"Overview Information","text":""},{"location":"plugins/kro/overview/#available-permissions","title":"Available Permissions","text":"<p>The plugin suite provides granular permission controls for:</p> <ul> <li>KRO RGDs (list, view YAML, show events)</li> <li>KRO Instances (list, view YAML, show events)</li> <li>Managed Resources (list, view YAML, show events)</li> <li>Additional Resources like CRDs (list, view YAML, show events)</li> <li>Resource Graph visualization</li> </ul>"},{"location":"plugins/kro/overview/#mcp-actions-integration","title":"MCP Actions Integration","text":"<p>The KRO plugin provides MCP (Model Control Protocol) actions for interacting with KRO resources. To enable these actions:</p> <ol> <li> <p>First, ensure you have the MCP actions backend plugin installed and configured. See the MCP Actions Backend Plugin documentation for setup instructions.</p> </li> <li> <p>Add the plugin to your actions configuration in <code>app-config.yaml</code>:</p> </li> </ol> <pre><code>backend:\n  actions:\n    pluginSources:\n      - 'catalog'\n      - 'kro'\n      # ... other action sources\n</code></pre>"},{"location":"plugins/kro/overview/#available-mcp-actions","title":"Available MCP Actions","text":"<p>The plugin provides the following MCP actions:</p> <ul> <li><code>get_kro_resources</code>: Get all resources for a KRO instance</li> <li>Input: Cluster name, namespace, RGD details, and instance information</li> <li> <p>Output: List of resources and their relationships</p> </li> <li> <p><code>get_kro_resource_events</code>: Get events for a Kubernetes resource managed by KRO</p> </li> <li>Input: Cluster name, namespace, resource name, and kind</li> <li> <p>Output: List of events with timestamps and details</p> </li> <li> <p><code>get_kro_resource_graph</code>: Get the resource graph for a KRO instance</p> </li> <li>Input: Cluster name, namespace, RGD details, and instance information</li> <li>Output: Resource graph data showing relationships between resources</li> </ul>"},{"location":"plugins/kro/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the KRO plugins, you'll need to:</p> <ol> <li>Install and configure the Kubernetes Ingestor plugin</li> <li>Set up the permissions backend (optional but recommended)</li> <li>Install the frontend components</li> <li>Configure the plugins according to your needs</li> <li>Configure MCP actions in your app-config.yaml</li> </ol> <p>For detailed installation and configuration instructions, refer to the individual plugin documentation:</p> <ul> <li>Kubernetes Ingestor Plugin Installation</li> <li>Kubernetes Ingestor Plugin Configuration</li> <li>Frontend Plugin Installation</li> <li>Frontend Plugin Configuration</li> <li>Backend Plugin Installation</li> <li>Backend Plugin Configuration</li> </ul>"},{"location":"plugins/kro/backend/about/","title":"KRO Resources Backend Plugin","text":"<p>The KRO Resources backend plugin (<code>@terasky/backstage-plugin-kro-resources-backend</code>) provides comprehensive functionality for managing KRO resources in your Backstage instance, including API integration, resource operations, and permission management.</p>"},{"location":"plugins/kro/backend/about/#features","title":"Features","text":"<ul> <li>Resource Management:</li> <li>Resource data retrieval and processing</li> <li>Event monitoring and tracking</li> <li>YAML configuration management</li> <li>Resource relationship mapping</li> <li> <p>Resource graph generation</p> </li> <li> <p>API Integration:</p> </li> <li>Kubernetes cluster communication</li> <li>Resource status monitoring</li> <li>Event streaming</li> <li> <p>Resource operation execution</p> </li> <li> <p>Permission Management:</p> </li> <li>Pre-defined permissions for KRO resources</li> <li>Granular control over resource access</li> <li>Integration with Backstage's permission framework</li> <li> <p>Flexible policy configuration</p> </li> <li> <p>MCP Actions:</p> </li> <li>Resource data retrieval</li> <li>Event monitoring</li> <li>Resource graph generation</li> <li>Resource operation execution</li> </ul>"},{"location":"plugins/kro/backend/about/#available-permissions","title":"Available Permissions","text":"<p>The plugin defines the following permissions:</p>"},{"location":"plugins/kro/backend/about/#instance-permissions","title":"Instance Permissions","text":"<ul> <li><code>kro.instances.list</code>: Control access to listing KRO instances</li> <li><code>kro.instances.view-yaml</code>: Control access to viewing instance YAML</li> <li><code>kro.instances.show-events</code>: Control access to viewing instance events</li> </ul>"},{"location":"plugins/kro/backend/about/#rgd-permissions","title":"RGD Permissions","text":"<ul> <li><code>kro.rgds.list</code>: Control access to listing RGDs</li> <li><code>kro.rgds.view-yaml</code>: Control access to viewing RGD YAML</li> <li><code>kro.rgds.show-events</code>: Control access to viewing RGD events</li> </ul>"},{"location":"plugins/kro/backend/about/#resource-permissions","title":"Resource Permissions","text":"<ul> <li><code>kro.resources.list</code>: Control access to listing managed resources</li> <li><code>kro.resources.view-yaml</code>: Control access to viewing resource YAML</li> <li><code>kro.resources.show-events</code>: Control access to viewing resource events</li> </ul>"},{"location":"plugins/kro/backend/about/#view-permissions","title":"View Permissions","text":"<ul> <li><code>kro.resource-graph.show</code>: Control access to resource graph visualization</li> <li><code>kro.overview.view</code>: Control access to KRO overview information</li> </ul> <p>All permissions are defined with the <code>read</code> action attribute.</p>"},{"location":"plugins/kro/backend/about/#integration-points","title":"Integration Points","text":"<p>The plugin integrates with:</p> <ul> <li>Backstage permission framework</li> <li>Kubernetes backend plugin</li> <li>Catalog backend for entity information</li> </ul>"},{"location":"plugins/kro/backend/about/#architecture","title":"Architecture","text":"<p>The plugin follows Backstage's backend architecture:</p> <pre><code>graph TD\n    A[Permission Framework] --&gt; B[KRO Permissions Plugin]\n    B --&gt; C[Permission Policies]\n    B --&gt; D[Permission Rules]\n    E[Kubernetes Plugin] --&gt; B\n    F[Catalog] --&gt; B\n</code></pre>"},{"location":"plugins/kro/backend/configure/","title":"Configuring the KRO Resources Backend Plugin","text":""},{"location":"plugins/kro/backend/configure/#configuration-options","title":"Configuration Options","text":"<p>The plugin can be configured through your <code>app-config.yaml</code>:</p> <pre><code>kro:\n  # Enable/disable permission controls\n  enablePermissions: true\n</code></pre>"},{"location":"plugins/kro/backend/install/","title":"Installing the KRO Resources Backend Plugin","text":""},{"location":"plugins/kro/backend/install/#prerequisites","title":"Prerequisites","text":"<ul> <li>Backstage backend</li> <li>Permission framework enabled</li> <li>Kubernetes plugin</li> </ul>"},{"location":"plugins/kro/backend/install/#installation-steps","title":"Installation Steps","text":"<ol> <li>Install the required packages:</li> </ol> <p><pre><code># From your Backstage root directory\nyarn --cwd packages/backend add @terasky/backstage-plugin-kro-resources-backend \n</code></pre> 2. Add the plugin to your backend:</p> <pre><code>// In your backend initialization\nbackend.add(import('@terasky/backstage-plugin-kro-resources-backend'));\n</code></pre>"},{"location":"plugins/kro/backend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Permission Errors: Ensure the service account has necessary RBAC permissions</li> <li>Connection Issues: Verify Kubernetes cluster configuration</li> <li>Missing Dependencies: Check all required packages are installed</li> <li>MCP Action Errors: Verify MCP configuration in app-config.yaml</li> </ol>"},{"location":"plugins/kro/frontend/about/","title":"KRO Resources Frontend Plugin","text":"<p>The KRO Resources frontend plugin (<code>@terasky/backstage-plugin-kro-resources-frontend</code>) provides a comprehensive UI for managing and visualizing KRO resources in your Backstage instance.</p>"},{"location":"plugins/kro/frontend/about/#features","title":"Features","text":"<ul> <li>Resource Graph: Interactive visualization of KRO resources and their relationships</li> <li>Resource Table: Detailed view of KRO instances and their managed resources</li> <li>Resource status and health monitoring</li> <li>Relationship tracking</li> <li>Resource type filtering</li> <li>Search and sort capabilities</li> <li>YAML Management: </li> <li>Access and inspect YAML configurations</li> <li>Copy to clipboard functionality</li> <li>Download YAML files</li> <li>Syntax highlighting</li> <li>Event Monitoring: </li> <li>Track events for all KRO-related resources</li> <li>Real-time event updates</li> <li>Event filtering and search</li> <li>Timestamp-based sorting</li> <li>Overview Cards: </li> <li>Quick status insights for KRO instances</li> <li>Resource counts and statistics</li> <li>Health status indicators</li> <li>Quick action buttons</li> </ul>"},{"location":"plugins/kro/frontend/about/#components","title":"Components","text":"<p>The plugin provides several React components:</p> <ul> <li><code>KroOverviewCard</code>: Shows status and basic information about a KRO instance</li> <li>Resource statistics</li> <li>Health indicators</li> <li>Quick actions</li> <li>Status summaries</li> <li><code>KroResourceGraph</code>: Interactive graph visualization of resource relationships</li> <li>Zoomable interface</li> <li>Node filtering</li> <li>Relationship highlighting</li> <li>Interactive node selection</li> <li><code>KroResourceTable</code>: Detailed table view of resources</li> <li>YAML and event access</li> <li>Status indicators</li> <li>Action buttons</li> <li>Filtering capabilities</li> <li><code>isKroAvailable</code>: Utility components for permission-based rendering</li> <li>Conditional rendering</li> <li>Permission checks</li> <li>Feature flags support</li> </ul>"},{"location":"plugins/kro/frontend/about/#integration-points","title":"Integration Points","text":"<p>The plugin integrates with:</p> <ul> <li>KRO Resources backend plugin for:</li> <li>Resource data retrieval</li> <li>Event monitoring</li> <li>YAML management</li> <li>Resource operations</li> <li>Permission framework for:</li> <li>Access control</li> <li>Feature gating</li> <li>Operation authorization</li> <li>Catalog for:</li> <li>Entity information</li> <li>Relationship mapping</li> <li>Component discovery</li> <li>New Frontend System (Alpha) for:</li> <li>Automatic route registration</li> <li>Component integration</li> <li>Extension points</li> </ul>"},{"location":"plugins/kro/frontend/about/#screenshots","title":"Screenshots","text":""},{"location":"plugins/kro/frontend/about/#resource-graph","title":"Resource Graph","text":""},{"location":"plugins/kro/frontend/about/#resource-table","title":"Resource Table","text":""},{"location":"plugins/kro/frontend/about/#yaml-viewer","title":"YAML Viewer","text":""},{"location":"plugins/kro/frontend/about/#events-view","title":"Events View","text":""},{"location":"plugins/kro/frontend/about/#overview-card","title":"Overview Card","text":""},{"location":"plugins/kro/frontend/install/","title":"Installing the KRO Resources Frontend Plugin","text":""},{"location":"plugins/kro/frontend/install/#prerequisites","title":"Prerequisites","text":"<ul> <li>Backstage application</li> <li>KRO Resources backend plugin (<code>@terasky/backstage-plugin-kro-resources-backend</code>)</li> <li>Kubernetes plugin</li> </ul>"},{"location":"plugins/kro/frontend/install/#installation-steps","title":"Installation Steps","text":"<ol> <li>Install the plugin package:</li> </ol> <pre><code># From your Backstage root directory\nyarn add --cwd packages/app @terasky/backstage-plugin-kro-resources-frontend\n</code></pre>"},{"location":"plugins/kro/frontend/install/#2-import-components","title":"2. Import Components","text":"<p>Add the necessary imports to your Entity Page file (typically <code>packages/app/src/components/catalog/EntityPage.tsx</code>):</p> <pre><code>import { \n    IfKroOverviewAvailable, \n    IfKroResourceGraphAvailable, \n    IfKroResourcesListAvailable, \n    isKroAvailable, \n    KroOverviewCard, \n    KroResourceGraph, \n    KroResourceTable, \n    useKroResourceListAvailable, \n    useKroResourceGraphAvailable \n} from '@terasky/backstage-plugin-kro-resources-frontend';\n</code></pre>"},{"location":"plugins/kro/frontend/install/#3-configure-the-entity-page","title":"3. Configure the Entity Page","text":"<p>Add the KRO components to your Entity Page:</p> <pre><code>const kroOverviewContent = (\n  &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n    &lt;Grid item md={6}&gt;\n      &lt;EntityAboutCard variant=\"gridItem\" /&gt;\n    &lt;/Grid&gt;\n    &lt;IfKroOverviewAvailable&gt;\n      &lt;Grid item md={6}&gt;\n        &lt;KroOverviewCard /&gt;\n      &lt;/Grid&gt;\n    &lt;/IfKroOverviewAvailable&gt;\n    &lt;Grid item md={4} xs={12}&gt;\n      &lt;EntityLinksCard /&gt;\n    &lt;/Grid&gt;\n  &lt;/Grid&gt;\n);\n\n// Create the KRO entity page component with permission checks\nconst KroEntityPage = () =&gt; {\n  const isKroResourceListAvailable = useKroResourceListAvailable();\n  const isKroResourceGraphAvailable = useKroResourceGraphAvailable();\n\n  return (\n    &lt;EntityLayout&gt;\n      &lt;EntityLayout.Route path=\"/\" title=\"Overview\"&gt;\n        {kroOverviewContent}\n      &lt;/EntityLayout.Route&gt;\n\n      &lt;EntityLayout.Route if={isKroResourceListAvailable} path=\"/kro-resources\" title=\"KRO Resources\"&gt;\n        &lt;IfKroResourcesListAvailable&gt;\n          &lt;KroResourceTable /&gt;\n        &lt;/IfKroResourcesListAvailable&gt;\n      &lt;/EntityLayout.Route&gt;\n\n      &lt;EntityLayout.Route if={isKroResourceGraphAvailable} path=\"/kro-graph\" title=\"KRO Graph\"&gt;\n        &lt;IfKroResourceGraphAvailable&gt;\n          &lt;KroResourceGraph /&gt;\n        &lt;/IfKroResourceGraphAvailable&gt;\n      &lt;/EntityLayout.Route&gt;\n    &lt;/EntityLayout&gt;\n  );\n};\n</code></pre>"},{"location":"plugins/kro/frontend/install/#4-add-to-entity-switch","title":"4. Add to Entity Switch","text":"<p>Include the KRO entity page in your entity switch:</p> <pre><code>const componentPage = (\n  &lt;EntitySwitch&gt;\n    {/* ... other cases ... */}\n    &lt;EntitySwitch.Case if={isComponentType('kro-instance')}&gt;\n      &lt;KroEntityPage /&gt;\n    &lt;/EntitySwitch.Case&gt;\n  &lt;/EntitySwitch&gt;\n);\n</code></pre>"},{"location":"plugins/kro/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { kroResourcesPlugin } from '@terasky/backstage-plugin-kro-resources-frontend/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    kroResourcesPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/kro/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The components are properly imported in your Entity Page</li> <li>The KRO tabs appear for appropriate entity types</li> <li>The permission checks are working as expected</li> </ol>"},{"location":"plugins/kro/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Missing Tabs: Ensure the entity has the correct component type</li> <li>Permission Issues: Verify the permissions backend is properly configured</li> <li>Resource Loading: Check the Kubernetes Ingestor configuration</li> </ol>"},{"location":"plugins/kubernetes/overview/","title":"Kubernetes Resources Plugin","text":"<p>The Kubernetes Resources plugin provides a powerful visualization and management interface for Kubernetes resources within Backstage. It enables users to explore resource relationships, view configurations, and monitor cluster events through an intuitive graphical interface.</p>"},{"location":"plugins/kubernetes/overview/#features","title":"Features","text":"<ul> <li>Interactive Resource Graph: Visualize relationships between Kubernetes resources</li> <li>YAML Manifest Viewer: View and copy resource configurations</li> <li>Event Monitoring: Track Kubernetes events for specific resources</li> <li>Resource Dependencies: Map and explore resource relationships</li> <li>Permission Controls: Fine-grained access control for different resource types</li> <li>Multi-Cluster Support: View resources across multiple Kubernetes clusters</li> </ul>"},{"location":"plugins/kubernetes/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/kubernetes/overview/#frontend-plugin","title":"Frontend Plugin","text":"<p>The plugin provides frontend components for: - Resource graph visualization - YAML manifest viewing - Event monitoring - Resource exploration  </p> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/kubernetes/overview/#backend-plugin","title":"Backend Plugin","text":"<p>The plugin requires a backend deployment that: - Aggregates resource data - Tracks dependencies - Manages permissions - Handles cluster communication  </p> <p>Learn more about the backend plugin</p>"},{"location":"plugins/kubernetes/overview/#screenshots","title":"Screenshots","text":"<p> Interactive resource dependency graph</p> <p> Resource events and YAML configuration view</p> <p> Table view of Kubernetes resources</p> <p> Permission-based access control</p>"},{"location":"plugins/kubernetes/overview/#available-permissions","title":"Available Permissions","text":"<p>The plugin supports the following permissions:</p> <ul> <li><code>kubernetes-resources.resources.list</code>: List and view Kubernetes resources</li> <li><code>kubernetes-resources.secrets.list</code>: List and view Secret resources</li> <li><code>kubernetes-resources.secrets.view-yaml</code>: View Secret YAML content</li> <li><code>kubernetes-resources.yaml.view</code>: View resource YAML content</li> <li><code>kubernetes-resources.events.show</code>: View resource events</li> <li><code>kubernetes-resources.graph.show</code>: View resource dependency graph</li> </ul>"},{"location":"plugins/kubernetes/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Frontend Plugin<ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul> </li> <li>Backend Plugin<ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul> </li> </ul>"},{"location":"plugins/kubernetes/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the Kubernetes Resources plugin:</p> <ol> <li>Deploy the backend component to your clusters</li> <li>Install the frontend plugin</li> <li>Configure proxy settings</li> <li>Set up entity annotations</li> <li>Configure permissions (optional)</li> </ol> <p>For detailed installation and configuration instructions, refer to the frontend and backend documentation linked above. </p>"},{"location":"plugins/kubernetes/backend/about/","title":"Kubernetes Resources Permissions Backend Plugin","text":""},{"location":"plugins/kubernetes/backend/about/#overview","title":"Overview","text":"<p>The Kubernetes Resources Permissions backend plugin provides comprehensive permission management and access control for Kubernetes resources within your Backstage instance. It integrates seamlessly with Backstage's permission framework to enforce fine-grained access policies for different types of Kubernetes resources.</p>"},{"location":"plugins/kubernetes/backend/about/#features","title":"Features","text":""},{"location":"plugins/kubernetes/backend/about/#permission-management","title":"Permission Management","text":"<ul> <li>Fine-grained access control for Kubernetes resources</li> </ul>"},{"location":"plugins/kubernetes/backend/about/#access-control","title":"Access Control","text":"<ul> <li>Resource-level permissions</li> <li>Action-based permissions (list, view YAML, show events)</li> <li>Integration with Backstage's permission framework</li> </ul>"},{"location":"plugins/kubernetes/backend/about/#api-endpoints","title":"API Endpoints","text":"<ul> <li>Permission check endpoints</li> <li>Resource access validation</li> <li>Policy enforcement endpoints</li> </ul>"},{"location":"plugins/kubernetes/backend/about/#technical-architecture","title":"Technical Architecture","text":""},{"location":"plugins/kubernetes/backend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage Permission Framework</li> <li>Kubernetes Resources Frontend Plugin</li> </ul>"},{"location":"plugins/kubernetes/backend/about/#permission-model","title":"Permission Model","text":"<p>The plugin implements a comprehensive permission model covering:</p>"},{"location":"plugins/kubernetes/backend/about/#permissions","title":"Permissions:","text":"<ul> <li>List Kubernetes Resources: kubernetes-resources.resources.list<ul> <li>Controls whether a user can list and view Kubernetes resources</li> </ul> </li> <li>List Kubernetes Secrets: kubernetes-resources.secrets.list<ul> <li>Controls whether a user can list and view Secret resources</li> </ul> </li> <li>View Secret YAML: kubernetes-resources.secrets.view-yaml<ul> <li>Controls whether a user can view the YAML content of Secret resources</li> </ul> </li> <li>View Resource YAML: kubernetes-resources.yaml.view<ul> <li>Controls whether a user can view the YAML content of Kubernetes resources</li> </ul> </li> <li>View Resource Events: kubernetes-resources.events.show<ul> <li>Controls whether a user can view events related to Kubernetes resources</li> </ul> </li> <li>View Resource Graph: kubernetes-resources.graph.show<ul> <li>Controls whether a user can view the resource dependency graph</li> </ul> </li> </ul>"},{"location":"plugins/kubernetes/backend/about/#security-considerations","title":"Security Considerations","text":"<ul> <li>Secure permission validation</li> <li>Token-based authentication</li> <li>Role-based access control</li> <li>Audit logging capabilities</li> </ul>"},{"location":"plugins/kubernetes/backend/about/#integration-benefits","title":"Integration Benefits","text":"<ol> <li> <p>Enhanced Security</p> <ul> <li>Granular access control</li> <li>Consistent permission enforcement</li> <li>Audit trail capabilities</li> </ul> </li> <li> <p>Improved Compliance</p> <ul> <li>Policy-based access control</li> <li>Resource usage tracking</li> <li>Access pattern monitoring</li> </ul> </li> <li> <p>Better User Experience</p> <ul> <li>Seamless integration with frontend</li> <li>Consistent permission behavior</li> <li>Clear access control feedback</li> </ul> </li> </ol>"},{"location":"plugins/kubernetes/backend/about/#use-cases","title":"Use Cases","text":""},{"location":"plugins/kubernetes/backend/about/#resource-access-control","title":"Resource Access Control","text":"<ul> <li>Control who can view different resource types</li> <li>Manage access to sensitive configurations</li> <li>Restrict event viewing capabilities</li> </ul>"},{"location":"plugins/kubernetes/backend/about/#compliance-management","title":"Compliance Management","text":"<ul> <li>Enforce organizational policies</li> <li>Track resource access patterns</li> <li>Maintain audit trails</li> </ul>"},{"location":"plugins/kubernetes/backend/about/#team-collaboration","title":"Team Collaboration","text":"<ul> <li>Define team-specific access levels</li> <li>Share resources securely</li> <li>Manage cross-team permissions</li> </ul>"},{"location":"plugins/kubernetes/backend/configure/","title":"Configuring the Kubernetes Resources Permissions Backend Plugin","text":"<p>The Kubernetes Resources Permissions backend plugin integrates with Backstage's permission framework to provide access control for Kubernetes resources.</p>"},{"location":"plugins/kubernetes/backend/configure/#available-permissions","title":"Available Permissions","text":"<p>The plugin provides the following permissions for managing Kubernetes resources:  </p> <ul> <li>List Kubernetes Resources: kubernetes-resources.resources.list  <ul> <li>Controls whether a user can list and view Kubernetes resources  </li> </ul> </li> <li>List Kubernetes Secrets: kubernetes-resources.secrets.list  <ul> <li>Controls whether a user can list and view Secret resources  </li> </ul> </li> <li>View Secret YAML: kubernetes-resources.secrets.view-yaml  <ul> <li>Controls whether a user can view the YAML content of Secret resources  </li> </ul> </li> <li>View Resource YAML: kubernetes-resources.yaml.view  <ul> <li>Controls whether a user can view the YAML content of Kubernetes resources  </li> </ul> </li> <li>View Resource Events: kubernetes-resources.events.show  <ul> <li>Controls whether a user can view events related to Kubernetes resources  </li> </ul> </li> <li>View Resource Graph: kubernetes-resources.graph.show  <ul> <li>Controls whether a user can view the resource dependency graph  </li> </ul> </li> </ul>"},{"location":"plugins/kubernetes/backend/configure/#basic-configuration","title":"Basic Configuration","text":"<p>The plugin uses Backstage's permission framework. To enable it, add the following to your <code>app-config.yaml</code>:</p> <pre><code>permission:\n  enabled: true # Enable Backstage permission framework\n</code></pre> <p>Plugin configuration: <pre><code>kubernetesResources:\n  enablePermissions: true # Enable Kubernetes permission checks\n  concurrency: 10 # How many concurrent requests to make against the Kubernetes API to fetch resources\n\nproxy:\n  '/kubernetes-resources/&lt;CLUSTER NAME&gt;':\n      target: 'http://&lt;THE INGRESS URL OF THE DEPLOYED AGENT&gt;'\n      changeOrigin: true\n      headers:\n        Authorization: 'Bearer &lt;SAME TOKEN AS IS USED IN THE K8S PLUGIN CONFIGURATION&gt;\n</code></pre></p>"},{"location":"plugins/kubernetes/backend/configure/#using-the-community-rbac-plugin","title":"Using the Community RBAC Plugin","text":"<p>You can use the RBAC plugins from the backstage community and create roles via the UI or via a CSV file.</p>"},{"location":"plugins/kubernetes/backend/configure/#example-via-csv-and-config","title":"Example via CSV and config","text":"<p>app-config.yaml snippet <pre><code>permission:\n  enabled: true\n  rbac:\n    policies-csv-file: /path/to/permissions.csv\n    policyFileReload: true\n    pluginsWithPermission:\n      - kubernetes\n      - kubernetes-resources\n</code></pre></p> <p>CSV file snippet <pre><code>p, role:default/platformteam, kubernetes.proxy, use, allow\np, role:default/platformteam, kubernetes.resources.read, read, allow\np, role:default/platformteam, kubernetes.clusters.read, read, allow\np, role:default/platformteam, kubernetes-resources.graph.show, read, allow\np, role:default/platformteam, kubernetes-resources.secrets.list, read, allow\np, role:default/platformteam, kubernetes-resources.secrets.view-yaml, read, allow\np, role:default/platformteam, kubernetes-resources.resources.list, read, allow\np, role:default/platformteam, kubernetes-resources.events.show, read, allow\np, role:default/platformteam, kubernetes-resources.yaml.view, read, allow\ng, group:default/all_users, role:default/platformteam\n</code></pre></p>"},{"location":"plugins/kubernetes/backend/configure/#best-practices","title":"Best Practices","text":""},{"location":"plugins/kubernetes/backend/configure/#security","title":"Security","text":"<ol> <li> <p>Permission Policies</p> <ul> <li>Follow the principle of least privilege</li> <li>Regularly review and update policies</li> <li>Use specific permissions over wildcards</li> </ul> </li> <li> <p>Authentication</p> <ul> <li>Use secure authentication methods</li> <li>Implement token rotation</li> <li>Enable audit logging</li> </ul> </li> </ol>"},{"location":"plugins/kubernetes/backend/configure/#monitoring","title":"Monitoring","text":"<ol> <li> <p>Logging</p> <ul> <li>Configure appropriate log levels</li> <li>Implement log rotation</li> <li>Set up log aggregation</li> </ul> </li> <li> <p>Metrics</p> <ul> <li>Monitor permission checks</li> <li>Track API usage</li> <li>Set up alerts for anomalies</li> </ul> </li> </ol>"},{"location":"plugins/kubernetes/backend/configure/#troubleshooting","title":"Troubleshooting","text":""},{"location":"plugins/kubernetes/backend/configure/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Permission Denied</p> <ul> <li>Check policy configuration</li> <li>Verify user roles</li> <li>Review permission logs</li> </ul> </li> <li> <p>Integration Problems</p> <ul> <li>Verify service connections</li> <li>Check authentication configuration</li> <li>Review Kubernetes plugin configurations</li> </ul> </li> </ol>"},{"location":"plugins/kubernetes/backend/install/","title":"Installing the Kubernetes Resources Permissions Backend Plugin","text":"<p>This guide will help you install and set up the kubernetes resources Permissions backend plugin in your Backstage instance.</p>"},{"location":"plugins/kubernetes/backend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the backend plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>Node.js and npm/yarn installed</li> <li>Access to your Backstage backend configuration</li> <li>Deployed the required agent in the target kubernetes cluster following the docs here</li> </ol>"},{"location":"plugins/kubernetes/backend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/kubernetes/backend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the backend plugin package using your package manager:</p> <pre><code>yarn --cwd packages/backend add @terasky/backstage-plugin-kubernetes-resources-permissions-backend\n</code></pre>"},{"location":"plugins/kubernetes/backend/install/#2-add-to-backend","title":"2. Add to Backend","text":"<p>Modify your backend entry point (typically <code>packages/backend/src/index.ts</code>):</p> <pre><code>// In your backend initialization\nbackend.add(import('@terasky/backstage-plugin-kubernetes-resources-permissions-backend'));\n</code></pre>"},{"location":"plugins/kubernetes/backend/install/#3-configure-permissions","title":"3. Configure Permissions","text":"<p>Add the following to your <code>app-config.yaml</code>:</p> <pre><code>permission:\n  enabled: true # Enable Backstage permission framework\n\nkubernetesResources:\n  enablePermissions: true # Enable Kubernetes permission checks\n\nproxy:\n  '/kubernetes-resources/&lt;CLUSTER NAME&gt;':\n      target: 'http://&lt;THE INGRESS URL OF THE DEPLOYED AGENT&gt;'\n      changeOrigin: true\n      headers:\n        Authorization: 'Bearer &lt;SAME TOKEN AS IS USED IN THE K8S PLUGIN CONFIGURATION&gt;\n</code></pre>"},{"location":"plugins/kubernetes/backend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The backend starts without errors</li> <li>Permission endpoints are accessible</li> <li>Integration with the frontend plugin works correctly</li> </ol>"},{"location":"plugins/kubernetes/backend/install/#testing-the-installation","title":"Testing the Installation","text":"<ol> <li> <p>Check Backend Health <pre><code>curl http://localhost:7007/api/kubernetes-resources/health\n</code></pre></p> </li> <li> <p>Test Frontend Integration</p> <ul> <li>Open a kubernetes resource in the frontend</li> <li>Verify permission checks are working</li> <li>Check access control behavior</li> </ul> </li> </ol>"},{"location":"plugins/kubernetes/backend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>"},{"location":"plugins/kubernetes/backend/install/#1-backend-startup-issues","title":"1. Backend Startup Issues","text":"<pre><code># Check backend logs\nyarn workspace backend start --verbose\n</code></pre>"},{"location":"plugins/kubernetes/backend/install/#2-permission-framework-issues","title":"2. Permission Framework Issues","text":"<ul> <li>Verify permission framework is enabled</li> <li>Check permission policy configuration</li> <li>Review backend plugin configuration</li> </ul>"},{"location":"plugins/kubernetes/backend/install/#3-integration-problems","title":"3. Integration Problems","text":"<ul> <li>Ensure frontend and backend versions match</li> <li>Check network connectivity</li> <li>Verify API endpoint configuration</li> </ul>"},{"location":"plugins/kubernetes/backend/install/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure permission policies</li> <li>Set up role-based access control</li> <li>Test with different user roles</li> <li>Monitor permission enforcement</li> </ol> <p>Proceed to the Configuration Guide for detailed setup instructions.</p>"},{"location":"plugins/kubernetes/frontend/about/","title":"Kubernetes Resources Frontend Plugin","text":""},{"location":"plugins/kubernetes/frontend/about/#overview","title":"Overview","text":"<p>The Kubernetes Resources frontend plugin provides a rich user interface for visualizing and managing Kubernetes resources within Backstage. It offers both graph and table views of resources, along with detailed information about resource configurations and events.</p>"},{"location":"plugins/kubernetes/frontend/about/#features","title":"Features","text":""},{"location":"plugins/kubernetes/frontend/about/#resource-graph-view","title":"Resource Graph View","text":"<ul> <li>Interactive dependency visualization</li> <li>Resource relationship mapping</li> <li>Zoom and pan controls</li> <li>Resource filtering</li> <li>Click-through navigation</li> </ul>"},{"location":"plugins/kubernetes/frontend/about/#resource-details","title":"Resource Details","text":"<ul> <li>YAML manifest viewer</li> <li>Resource events timeline</li> <li>Configuration download</li> <li>Copy to clipboard</li> <li>Resource metadata display</li> </ul>"},{"location":"plugins/kubernetes/frontend/about/#table-view","title":"Table View","text":"<ul> <li>Resource listing</li> <li>Sorting and filtering</li> <li>Status indicators</li> <li>Quick actions</li> <li>Bulk operations</li> </ul>"},{"location":"plugins/kubernetes/frontend/about/#permission-integration","title":"Permission Integration","text":"<ul> <li>Role-based access control</li> <li>Resource-level permissions</li> <li>Secret handling</li> <li>Event visibility control</li> <li>YAML access management</li> </ul>"},{"location":"plugins/kubernetes/frontend/about/#components","title":"Components","text":""},{"location":"plugins/kubernetes/frontend/about/#kubernetesresourcespage","title":"KubernetesResourcesPage","text":"<p>The main component that provides: - Resource table view - Filtering capabilities - Resource details - Event monitoring  </p> <p>Example usage: <pre><code>import { KubernetesResourcesPage, isKubernetesResourcesAvailable } from '@terasky/backstage-plugin-kubernetes-resources-frontend';\n\nconst entityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/kubernetes-resource-page\" \n      if={isKubernetesResourcesAvailable}\n      title=\"Kubernetes Resources\"\n    &gt;\n      &lt;KubernetesResourcesPage /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre></p>"},{"location":"plugins/kubernetes/frontend/about/#kubernetesresourcegraph","title":"KubernetesResourceGraph","text":"<p>Interactive graph visualization component: - Resource dependency mapping - Interactive navigation - Resource details on click - Zoom and pan controls  </p> <p>Example usage: <pre><code>import { KubernetesResourceGraph, isKubernetesResourcesAvailable } from '@terasky/backstage-plugin-kubernetes-resources-frontend';\n\nconst entityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/kubernetes-resource-graph\" \n      if={isKubernetesResourcesAvailable}\n      title=\"Resource Graph\"\n    &gt;\n      &lt;KubernetesResourceGraph /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre></p>"},{"location":"plugins/kubernetes/frontend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/kubernetes/frontend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Kubernetes backend service</li> <li>Permission framework</li> <li>Entity catalog</li> <li>Proxy configuration</li> </ul>"},{"location":"plugins/kubernetes/frontend/about/#required-annotations","title":"Required Annotations","text":"<pre><code>annotations:\n  terasky.backstage.io/kubernetes-resource-name: 'resource-name'\n  terasky.backstage.io/kubernetes-resource-kind: 'ResourceKind'\n  terasky.backstage.io/kubernetes-resource-api-version: 'group/version'\n  terasky.backstage.io/kubernetes-resource-namespace: 'namespace' # Optional\n  backstage.io/managed-by-origin-location: 'cluster-name'\n</code></pre>"},{"location":"plugins/kubernetes/frontend/about/#permission-framework","title":"Permission Framework","text":"<p>The plugin integrates with Backstage's permission framework to control: - Resource visibility - YAML access - Event viewing - Secret management - Graph access  </p>"},{"location":"plugins/kubernetes/frontend/about/#user-experience","title":"User Experience","text":""},{"location":"plugins/kubernetes/frontend/about/#resource-discovery","title":"Resource Discovery","text":"<ol> <li>Navigate to resource page</li> <li>Filter and search resources</li> <li>View resource details</li> <li>Explore dependencies</li> </ol>"},{"location":"plugins/kubernetes/frontend/about/#graph-navigation","title":"Graph Navigation","text":"<ol> <li>Open graph view</li> <li>Explore resource relationships</li> <li>Click resources for details</li> <li>View related events</li> </ol>"},{"location":"plugins/kubernetes/frontend/about/#resource-management","title":"Resource Management","text":"<ol> <li>View resource YAML</li> <li>Monitor resource events</li> <li>Download configurations</li> <li>Track dependencies</li> </ol>"},{"location":"plugins/kubernetes/frontend/about/#example-integrations","title":"Example Integrations","text":""},{"location":"plugins/kubernetes/frontend/about/#basic-integration","title":"Basic Integration","text":"<pre><code>import {\n  KubernetesResourcesPage,\n  KubernetesResourceGraph,\n  isKubernetesResourcesAvailable,\n} from '@terasky/backstage-plugin-kubernetes-resources-frontend';\n\nconst serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/kubernetes-resource-page\" \n      if={isKubernetesResourcesAvailable}\n      title=\"Resources\"\n    &gt;\n      &lt;KubernetesResourcesPage /&gt;\n    &lt;/EntityLayout.Route&gt;\n    &lt;EntityLayout.Route \n      path=\"/kubernetes-resource-graph\" \n      if={isKubernetesResourcesAvailable}\n      title=\"Resource Graph\"\n    &gt;\n      &lt;KubernetesResourceGraph /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/kubernetes/frontend/about/#advanced-integration","title":"Advanced Integration","text":"<pre><code>import {\n  KubernetesResourcesPage,\n  KubernetesResourceGraph,\n  isKubernetesResourcesAvailable,\n} from '@terasky/backstage-plugin-kubernetes-resources-frontend';\n\nconst kubernetesContent = (\n  &lt;&gt;\n    &lt;EntitySwitch&gt;\n      &lt;EntitySwitch.Case if={isKubernetesResourcesAvailable}&gt;\n        &lt;Grid container spacing={3}&gt;\n          &lt;Grid item xs={12}&gt;\n            &lt;KubernetesResourcesPage /&gt;\n          &lt;/Grid&gt;\n          &lt;Grid item xs={12}&gt;\n            &lt;KubernetesResourceGraph /&gt;\n          &lt;/Grid&gt;\n        &lt;/Grid&gt;\n      &lt;/EntitySwitch.Case&gt;\n    &lt;/EntitySwitch&gt;\n  &lt;/&gt;\n);\n\nconst serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/kubernetes\" \n      title=\"Kubernetes\"\n    &gt;\n      {kubernetesContent}\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre> <p>For installation and configuration details, refer to the Installation Guide and Configuration Guide. </p>"},{"location":"plugins/kubernetes/frontend/configure/","title":"Configuring the Kubernetes Resources Frontend Plugin","text":"<p>This guide covers the configuration options available for the Kubernetes Resources frontend plugin.</p>"},{"location":"plugins/kubernetes/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The configuration in <code>app-config.yaml</code> is still respected:</p> <pre><code>kubernetesResources:\n  # Whether to enable permission checks\n  enablePermissions: true\n\n  # Maximum concurrent requests to Kubernetes API\n  concurrency: 10\n</code></pre> <p>The plugin will be automatically integrated into the appropriate entity pages without requiring manual route configuration.</p>"},{"location":"plugins/kubernetes/frontend/configure/#configuration-file","title":"Configuration File","text":"<p>The plugin is configured through your <code>app-config.yaml</code>. Here's a comprehensive example:</p> <pre><code>kubernetesResources:\n  # Whether to enable permission checks\n  enablePermissions: true\n\n  # Maximum concurrent requests to Kubernetes API\n  concurrency: 10\n</code></pre>"},{"location":"plugins/kubernetes/frontend/configure/#permission-configuration","title":"Permission Configuration","text":"<p>If you're using the permission framework, configure it in your backend:</p> <pre><code>import { kubernetesResourcesPermissions } from '@terasky/backstage-plugin-kubernetes-resources-common';\n\nexport default async function createRouter(\n  env: PluginEnvironment,\n): Promise&lt;Router&gt; {\n  return createRouter({\n    config: env.config,\n    logger: env.logger,\n    discovery: env.discovery,\n    policy: {\n      permission: {\n        name: kubernetesResourcesPermissions.resourcesList,\n        attributes: {},\n      },\n      result: AuthorizeResult.ALLOW,\n    },\n  });\n}\n</code></pre>"},{"location":"plugins/kubernetes/frontend/configure/#component-configuration","title":"Component Configuration","text":""},{"location":"plugins/kubernetes/frontend/configure/#kubernetesresourcespage-props","title":"KubernetesResourcesPage Props","text":"<pre><code>interface KubernetesResourcesPageProps {\n  // Optional: Default cluster selection\n  defaultCluster?: string;\n\n  // Optional: Default namespace\n  defaultNamespace?: string;\n\n  // Optional: Resource types to show\n  resourceTypes?: string[];\n\n  // Optional: Refresh interval in seconds\n  refreshInterval?: number;\n}\n</code></pre>"},{"location":"plugins/kubernetes/frontend/configure/#kubernetesresourcegraph-props","title":"KubernetesResourceGraph Props","text":"<pre><code>interface KubernetesResourceGraphProps {\n  // Optional: Graph layout direction\n  direction?: 'TB' | 'LR';\n\n  // Optional: Node spacing\n  nodeSpacing?: number;\n\n  // Optional: Edge routing\n  edgeRouting?: 'bezier' | 'straight';\n\n  // Optional: Auto-refresh interval\n  refreshInterval?: number;\n}\n</code></pre>"},{"location":"plugins/kubernetes/frontend/configure/#integration-examples","title":"Integration Examples","text":""},{"location":"plugins/kubernetes/frontend/configure/#basic-page-integration","title":"Basic Page Integration","text":"<pre><code>import { KubernetesResourcesPage } from '@terasky/backstage-plugin-kubernetes-resources-frontend';\n\nconst resourcesPage = (\n  &lt;KubernetesResourcesPage\n    defaultCluster=\"production\"\n    defaultNamespace=\"default\"\n    refreshInterval={30}\n  /&gt;\n);\n</code></pre>"},{"location":"plugins/kubernetes/frontend/configure/#advanced-graph-integration","title":"Advanced Graph Integration","text":"<pre><code>import { KubernetesResourceGraph } from '@terasky/backstage-plugin-kubernetes-resources-frontend';\n\nconst graphPage = (\n  &lt;KubernetesResourceGraph\n    direction=\"LR\"\n    nodeSpacing={100}\n    edgeRouting=\"bezier\"\n    refreshInterval={60}\n  /&gt;\n);\n</code></pre>"},{"location":"plugins/kubernetes/frontend/configure/#proxy-configuration","title":"Proxy Configuration","text":"<p>Configure proxy settings for each cluster:</p> <pre><code>proxy:\n  '/kubernetes-resources/production':\n    target: 'http://k8s-tracker.prod.example.com'\n    changeOrigin: true\n    headers:\n      Authorization: 'Bearer ${K8S_TOKEN}'\n\n  '/kubernetes-resources/staging':\n    target: 'http://k8s-tracker.staging.example.com'\n    changeOrigin: true\n    headers:\n      Authorization: 'Bearer ${K8S_STAGING_TOKEN}'\n</code></pre>"},{"location":"plugins/kubernetes/frontend/configure/#entity-annotations","title":"Entity Annotations","text":"<p>Configure entity annotations for resource mapping:</p> <pre><code>annotations:\n  # Required annotations\n  terasky.backstage.io/kubernetes-resource-name: 'nginx-deployment'\n  terasky.backstage.io/kubernetes-resource-kind: 'Deployment'\n  terasky.backstage.io/kubernetes-resource-api-version: 'apps/v1'\n  backstage.io/managed-by-origin-location: 'production'\n\n  # Optional annotations\n  terasky.backstage.io/kubernetes-resource-namespace: 'web-apps'\n</code></pre>"},{"location":"plugins/kubernetes/frontend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Proxy Configuration</p> <ul> <li>Use environment variables for tokens</li> <li>Configure timeouts appropriately</li> <li>Enable error handling</li> <li>Set proper headers</li> </ul> </li> <li> <p>Permission Management</p> <ul> <li>Define clear role boundaries</li> <li>Restrict secret access</li> <li>Control YAML visibility</li> <li>Manage event access</li> </ul> </li> <li> <p>Resource Organization</p> <ul> <li>Use consistent naming</li> <li>Group related resources</li> <li>Set appropriate refresh intervals</li> <li>Configure proper layouts</li> </ul> </li> </ol> <p>For installation instructions, refer to the Installation Guide. </p>"},{"location":"plugins/kubernetes/frontend/install/","title":"Installing the Kubernetes Resources Frontend Plugin","text":"<p>This guide will help you install and set up the Kubernetes Resources frontend plugin in your Backstage instance.</p>"},{"location":"plugins/kubernetes/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>The Kubernetes backend deployment installed in your clusters</li> <li>Access to Kubernetes clusters</li> <li>Proper proxy configuration</li> </ol>"},{"location":"plugins/kubernetes/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/kubernetes/frontend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/app add @terasky/backstage-plugin-kubernetes-resources-frontend\n</code></pre>"},{"location":"plugins/kubernetes/frontend/install/#2-add-to-entity-page","title":"2. Add to Entity Page","text":"<p>Modify your entity page configuration in <code>packages/app/src/components/catalog/EntityPage.tsx</code>:</p> <pre><code>import {\n  KubernetesResourcesPage,\n  KubernetesResourceGraph,\n  isKubernetesResourcesAvailable,\n} from '@terasky/backstage-plugin-kubernetes-resources-frontend';\n\nconst serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/kubernetes-resource-page\" \n      if={isKubernetesResourcesAvailable}\n      title=\"Kubernetes Resources\"\n    &gt;\n      &lt;KubernetesResourcesPage /&gt;\n    &lt;/EntityLayout.Route&gt;\n    &lt;EntityLayout.Route \n      path=\"/kubernetes-resource-graph\" \n      if={isKubernetesResourcesAvailable}\n      title=\"Resource Graph\"\n    &gt;\n      &lt;KubernetesResourceGraph /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/kubernetes/frontend/install/#3-configure-proxy-settings","title":"3. Configure Proxy Settings","text":"<p>Add proxy configuration to your <code>app-config.yaml</code>:</p> <pre><code>proxy:\n  '/kubernetes-resources/&lt;CLUSTER NAME&gt;':\n    target: 'http://&lt;THE INGRESS URL OF THE DEPLOYED APP&gt;'\n    changeOrigin: true\n    headers:\n      Authorization: 'Bearer &lt;SAME TOKEN AS IS USED IN THE K8S PLUGIN CONFIGURATION&gt;'\n</code></pre>"},{"location":"plugins/kubernetes/frontend/install/#4-deploy-backend-component","title":"4. Deploy Backend Component","text":"<p>Deploy the Kubernetes dependency tracker to your clusters:</p> <pre><code>export INGRESS_HOST_NAME=\"k8s-dependency-tracker.example.com\"\nwget https://github.com/TeraSky-OSS/kubernetes-dependency-tracker/releases/download/0.1.0/kubernetes-manifest.yaml\nsed -i \"s/REPLACE_ME/${INGRESS_HOST_NAME}/g\" kubernetes-manifest.yaml\nkubectl apply -f kubernetes-manifest.yaml\n</code></pre>"},{"location":"plugins/kubernetes/frontend/install/#5-configure-entity-annotations","title":"5. Configure Entity Annotations","text":"<p>Add required annotations to your catalog entities:</p> <pre><code>annotations:\n  terasky.backstage.io/kubernetes-resource-name: 'resource-name'\n  terasky.backstage.io/kubernetes-resource-kind: 'ResourceKind'\n  terasky.backstage.io/kubernetes-resource-api-version: 'group/version'\n  terasky.backstage.io/kubernetes-resource-namespace: 'namespace' # Optional\n  backstage.io/managed-by-origin-location: 'cluster-name'\n</code></pre>"},{"location":"plugins/kubernetes/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { kubernetesResourcesPlugin } from '@terasky/backstage-plugin-kubernetes-resources-frontend/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    kubernetesResourcesPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/kubernetes/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The Kubernetes resources pages are accessible</li> <li>Resource graphs are rendering correctly</li> <li>Events and YAML views are working</li> <li>Proxy configuration is functioning</li> </ol>"},{"location":"plugins/kubernetes/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Resources Not Loading</li> <li>Check proxy configuration</li> <li>Verify backend deployment</li> <li>Ensure cluster access</li> <li> <p>Check entity annotations</p> </li> <li> <p>Graph Not Rendering</p> </li> <li>Verify browser console for errors</li> <li>Check resource permissions</li> <li>Ensure backend connectivity</li> <li> <p>Review proxy settings</p> </li> <li> <p>Permission Issues</p> </li> <li>Configure permission framework</li> <li>Check token permissions</li> <li>Verify role bindings</li> <li>Review access controls</li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide. </p>"},{"location":"plugins/kubernetes-ingestor/overview/","title":"Kubernetes Ingestor Plugin","text":"<p>The Kubernetes Ingestor plugin is a powerful backend plugin for Backstage that automatically creates catalog entities from Kubernetes resources. It provides comprehensive support for standard Kubernetes workloads, custom resources, Crossplane resources, and KRO (Kubernetes Resource Orchestrator) resources, making it easy to maintain an up-to-date catalog of your infrastructure and applications.</p>"},{"location":"plugins/kubernetes-ingestor/overview/#features","title":"Features","text":"<ul> <li>Automatic Resource Discovery: Ingest standard Kubernetes workloads automatically</li> <li>Custom Resource Support: Add custom GVKs for ingestion</li> <li>Crossplane Integration: Auto-ingest Crossplane claims and XRDs</li> <li>KRO Integration: Auto-ingest KRO RGDs and instances</li> <li>Template Generation: Create templates for Crossplane XRDs and KRO RGDs</li> <li>API Entity Creation: Generate API entities for XRDs and RGDs</li> <li>Relationship Mapping: Track dependencies between resources and APIs</li> <li>Flexible Configuration: Customize ingestion behavior and mapping</li> <li>Annotation Support: Rich annotation system for entity customization</li> </ul>"},{"location":"plugins/kubernetes-ingestor/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/kubernetes-ingestor/overview/#backend-plugin","title":"Backend Plugin","text":"<p>The plugin provides backend functionality for: - Resource discovery and ingestion - Template generation - API entity creation - Relationship management  </p> <p>Learn more about the backend plugin</p>"},{"location":"plugins/kubernetes-ingestor/overview/#resource-types","title":"Resource Types","text":""},{"location":"plugins/kubernetes-ingestor/overview/#standard-workloads","title":"Standard Workloads","text":"<ul> <li>Deployments</li> <li>StatefulSets</li> <li>DaemonSets</li> <li>Jobs</li> <li>CronJobs</li> <li>And more...</li> </ul>"},{"location":"plugins/kubernetes-ingestor/overview/#crossplane-resources","title":"Crossplane Resources","text":"<ul> <li>Claims (v1)</li> <li>XRs (v2)</li> <li>XRDs</li> <li>APIs</li> <li>Dependencies</li> </ul>"},{"location":"plugins/kubernetes-ingestor/overview/#kro-resources","title":"KRO Resources","text":"<ul> <li>RGDs (Resource Graph Definitions)</li> <li>RGD Instances</li> <li>Generated CRDs</li> <li>Managed Resources</li> <li>Dependencies</li> </ul>"},{"location":"plugins/kubernetes-ingestor/overview/#custom-resources","title":"Custom Resources","text":"<ul> <li>User-defined GVKs</li> <li>Custom workload types</li> <li>Specific resource kinds</li> </ul>"},{"location":"plugins/kubernetes-ingestor/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul>"},{"location":"plugins/kubernetes-ingestor/overview/#annotations","title":"Annotations","text":"<p>The plugin supports a rich set of annotations for customizing entity creation:</p> <pre><code>General Annotations:\n  terasky.backstage.io/add-to-catalog: true/false\n  terasky.backstage.io/exclude-from-catalog: true/false\n  terasky.backstage.io/backstage-namespace: string\n  terasky.backstage.io/owner: string\n\nNamespace Annotations:\n  terasky.backstage.io/system-type: string\n  terasky.backstage.io/domain: string\n\nWorkload Resource Annotations:\n  terasky.backstage.io/system: string\n  terasky.backstage.io/source-code-repo-url: string\n  terasky.backstage.io/source-branch: string\n  terasky.backstage.io/techdocs-path: string\n  terasky.backstage.io/kubernetes-label-selector: string\n  terasky.backstage.io/component-type: string\n  terasky.backstage.io/subcomponent-of: string\n  terasky.backstage.io/lifecycle: string\n  terasky.backstage.io/dependsOn: string\n  terasky.backstage.io/providesApis: string\n  terasky.backstage.io/consumesApis: string\n  terasky.backstage.io/component-annotations: string\n  terasky.backstage.io/links: string\n  terasky.backstage.io/title: string\n  terasky.backstage.io/name: string\n  terasky.backstage.io/description: string\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the Kubernetes Ingestor plugin: 1. Install the backend plugin 2. Configure RBAC settings 3. Set up ingestion rules 4. Configure template generation 5. Start discovering resources  </p> <p>For detailed installation and configuration instructions, refer to the backend documentation linked above.</p>"},{"location":"plugins/kubernetes-ingestor/backend/about/","title":"Kubernetes Ingestor Backend Plugin","text":""},{"location":"plugins/kubernetes-ingestor/backend/about/#overview","title":"Overview","text":"<p>The Kubernetes Ingestor backend plugin is a catalog entity provider that automatically creates and maintains Backstage catalog entities from Kubernetes resources. It supports standard workloads, custom resources, and provides deep integration with Crossplane for managing cloud infrastructure.</p>"},{"location":"plugins/kubernetes-ingestor/backend/about/#features","title":"Features","text":""},{"location":"plugins/kubernetes-ingestor/backend/about/#resource-discovery","title":"Resource Discovery","text":"<ul> <li>Automatic workload detection</li> <li>Custom resource type support</li> <li>Namespace filtering</li> <li>Selective ingestion</li> <li>Multi-cluster support</li> </ul>"},{"location":"plugins/kubernetes-ingestor/backend/about/#crossplane-integration","title":"Crossplane Integration","text":"<ul> <li>Claim resource ingestion (v1)</li> <li>XR resource ingestion (v2)</li> <li>XRD template generation</li> <li>API entity creation</li> <li>Relationship tracking</li> </ul>"},{"location":"plugins/kubernetes-ingestor/backend/about/#template-generation","title":"Template Generation","text":"<ul> <li>XRD-based templates</li> <li>Multiple publishing targets</li> <li>Git integration</li> <li>YAML download option</li> <li>Customizable outputs</li> </ul>"},{"location":"plugins/kubernetes-ingestor/backend/about/#entity-management","title":"Entity Management","text":"<ul> <li>Automatic updates</li> <li>Relationship mapping</li> <li>System organization</li> <li>Metadata handling</li> <li>Annotation processing</li> </ul>"},{"location":"plugins/kubernetes-ingestor/backend/about/#components","title":"Components","text":""},{"location":"plugins/kubernetes-ingestor/backend/about/#entity-provider","title":"Entity Provider","text":"<p>The core component that: - Discovers resources - Creates entities - Maintains relationships - Updates catalog  </p>"},{"location":"plugins/kubernetes-ingestor/backend/about/#template-generator","title":"Template Generator","text":"<p>Generates software templates for: - Crossplane XRDs - Custom resources - Resource creation - Configuration management  </p>"},{"location":"plugins/kubernetes-ingestor/backend/about/#api-manager","title":"API Manager","text":"<p>Handles API-related tasks: - API entity creation - Relationship tracking - Version management - Documentation links  </p>"},{"location":"plugins/kubernetes-ingestor/backend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/kubernetes-ingestor/backend/about/#resource-processing","title":"Resource Processing","text":"<p>The plugin processes resources through: 1. Discovery phase 2. Filtering phase 3. Entity creation 4. Relationship mapping 5. Catalog update  </p>"},{"location":"plugins/kubernetes-ingestor/backend/about/#mapping-models","title":"Mapping Models","text":"<p>Supports various mapping models: - Namespace mapping - Name mapping - Title mapping - System mapping - Reference mapping  </p>"},{"location":"plugins/kubernetes-ingestor/backend/about/#task-runners","title":"Task Runners","text":"<p>Configurable task runners for: - Resource discovery - Template generation - API updates - Relationship maintenance  </p>"},{"location":"plugins/kubernetes-ingestor/backend/about/#integration-points","title":"Integration Points","text":""},{"location":"plugins/kubernetes-ingestor/backend/about/#kubernetes-integration","title":"Kubernetes Integration","text":"<ul> <li>Cluster access</li> <li>Resource watching</li> <li>Event handling</li> <li>State management</li> </ul>"},{"location":"plugins/kubernetes-ingestor/backend/about/#crossplane-integration_1","title":"Crossplane Integration","text":"<ul> <li>XRD processing</li> <li>Claim handling</li> <li>API generation</li> <li>Template creation</li> </ul>"},{"location":"plugins/kubernetes-ingestor/backend/about/#git-integration","title":"Git Integration","text":"<ul> <li>Repository access</li> <li>PR creation</li> <li>Branch management</li> <li>File handling</li> </ul>"},{"location":"plugins/kubernetes-ingestor/backend/about/#use-cases","title":"Use Cases","text":""},{"location":"plugins/kubernetes-ingestor/backend/about/#standard-workload-management","title":"Standard Workload Management","text":"<ol> <li>Discover workloads</li> <li>Create components</li> <li>Map relationships</li> <li>Maintain metadata</li> </ol>"},{"location":"plugins/kubernetes-ingestor/backend/about/#crossplane-resource-management","title":"Crossplane Resource Management","text":"<ol> <li>Process XRDs</li> <li>Generate templates</li> <li>Create API entities</li> <li>Track relationships</li> </ol>"},{"location":"plugins/kubernetes-ingestor/backend/about/#custom-resource-management","title":"Custom Resource Management","text":"<ol> <li>Define custom types</li> <li>Configure ingestion</li> <li>Process resources</li> <li>Create entities</li> </ol>"},{"location":"plugins/kubernetes-ingestor/backend/about/#example-workflows","title":"Example Workflows","text":""},{"location":"plugins/kubernetes-ingestor/backend/about/#workload-discovery","title":"Workload Discovery","text":"<pre><code>kubernetesIngestor:\n  components:\n    enabled: true\n    taskRunner:\n      frequency: 10\n      timeout: 600\n    excludedNamespaces:\n      - kube-system\n    customWorkloadTypes:\n      - group: pkg.crossplane.io\n        apiVersion: v1\n        plural: providers\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/about/#template-generation_1","title":"Template Generation","text":"<pre><code>kubernetesIngestor:\n  crossplane:\n    xrds:\n      publishPhase:\n        allowedTargets: ['github.com', 'gitlab.com']\n        target: github\n        git:\n          repoUrl: github.com?owner=org&amp;repo=templates\n          targetBranch: main\n        allowRepoSelection: true\n</code></pre> <p>For installation and configuration details, refer to the Installation Guide and Configuration Guide.</p>"},{"location":"plugins/kubernetes-ingestor/backend/configure/","title":"Configuring the Kubernetes Ingestor Backend Plugin","text":"<p>This guide covers the configuration options available for the Kubernetes Ingestor backend plugin.</p>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#configuration-file","title":"Configuration File","text":"<p>The plugin is configured through your <code>app-config.yaml</code>. Here's a comprehensive example:</p> <pre><code>kubernetesIngestor:\n  # Mappings of kubernetes resource metadata to backstage entity metadata\n  # The list bellow are the default values when the mappings are not set in the app-config.yaml\n  # The recommended values are:\n  # namespaceModel: 'cluster' # cluster, namespace, default\n  # nameModel: 'name-cluster' # name-cluster, name-namespace, name\n  # titleModel: 'name' # name, name-cluster, name-namespace\n  # systemModel: 'cluster-namespace' # cluster, namespace, cluster-namespace, default\n  # referencesNamespaceModel: 'default' # default, same\n  mappings:\n    namespaceModel: 'cluster' # cluster, namespace, default\n    nameModel: 'name-cluster' # name-cluster, name-namespace, name-kind, name\n    titleModel: 'name' # name, name-cluster, name-namespace\n    systemModel: 'namespace' # cluster, namespace, cluster-namespace, default\n    referencesNamespaceModel: 'default' # default, same\n  # A list of cluster names to ingest resources from. If empty, resources from all clusters under kubernetes.clusterLocatorMethods.clusters will be ingested.\n  # allowedClusterNames:\n  #   - my-cluster-name\n  components:\n    # Whether to enable creation of backstage components for Kubernetes workloads\n    enabled: true\n    taskRunner:\n      # How often to query the clusters for data\n      frequency: 10\n      # Max time to process the data per cycle\n      timeout: 600\n    # Namespaces to exclude the resources from\n    excludedNamespaces:\n      - kube-public\n      - kube-system\n    # Custom Resource Types to also generate components for\n    customWorkloadTypes:\n      - group: pkg.crossplane.io\n        apiVersion: v1\n        plural: providers\n        # singular: provider # explicit singular form - needed when auto-detection fails\n    # By default all standard kubernetes workload types are ingested. This allows you to disable this behavior\n    disableDefaultWorkloadTypes: false\n    # Allows ingestion to be opt-in or opt-out by either requiring or not a dedicated annotation to ingest a resource (terasky.backstage.io/add-to-catalog or terasky.backstage.io/exclude-from-catalog)\n    onlyIngestAnnotatedResources: false\n  crossplane:\n    # Whether to completely disable crossplane related code for both XRDs and Claims. defaults to enabled if not provided for backwards compatibility\n    enabled: true\n    # This section is relevant for crossplane v1 claims as well as Crossplane v2 XRs.\n    # In the future when v1 and claims are deprecated this field will change names but currently \n    # for backwards compatibility will stay as is\n    claims:\n      # Whether to create components for all claim resources (v1) and XRs (v2) in your cluster\n      ingestAllClaims: true\n    xrds:\n      # Settings related to the final steps of a software template\n      publishPhase:\n        # Base URLs of Git servers you want to allow publishing to\n        allowedTargets: ['github.com', 'gitlab.com']\n        # What to publish to. currently supports github, gitlab, bitbucket, bitbucketCloud and YAML (provides a link to download the file)\n        target: github\n        git:\n          # Follows the backstage standard format which is github.com?owner=&lt;REPO OWNER&gt;&amp;repo=&lt;REPO NAME&gt;\n          repoUrl:\n          targetBranch: main\n        # Whether the user should be able to select the repo they want to push the manifest to or not\n        allowRepoSelection: true\n      # Whether to enable the creation of software templates for all XRDs\n      enabled: true\n      taskRunner:\n        # How often to query the clusters for data\n        frequency: 10\n        # Max time to process the data per cycle\n        timeout: 600\n      # Allows ingestion to be opt-in or opt-out by either requiring or not a dedicated annotation to ingest a xrd (terasky.backstage.io/add-to-catalog or terasky.backstage.io/exclude-from-catalog)\n      ingestAllXRDs: true\n      # Will convert default values from the XRD into placeholders in the UI instead of always adding them to the generated manifest.\n      convertDefaultValuesToPlaceholders: true\n  genericCRDTemplates:\n    # Settings related to the final steps of a software template\n    publishPhase:\n      # Base URLs of Git servers you want to allow publishing to\n      allowedTargets: ['github.com', 'gitlab.com']\n      # What to publish to. currently supports github, gitlab, bitbucket, bitbucketCloud and YAML (provides a link to download the file)\n      target: github\n      git:\n        # Follows the backstage standard format which is github.com?owner=&lt;REPO OWNER&gt;&amp;repo=&lt;REPO NAME&gt;\n        repoUrl:\n        targetBranch: main\n      # Whether the user should be able to select the repo they want to push the manifest to or not\n      allowRepoSelection: true\n    crdLabelSelector:\n      key: terasky.backstage.io/generate-form\n      value: \"true\"\n    crds:\n      - certificates.cert-manager.io\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#mapping-models","title":"Mapping Models","text":""},{"location":"plugins/kubernetes-ingestor/backend/configure/#namespace-model","title":"Namespace Model","text":"<p>Controls how Kubernetes namespaces map to Backstage: - <code>cluster</code>: Use cluster name - <code>namespace</code>: Use namespace name - <code>default</code>: Use default namespace  </p>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#name-model","title":"Name Model","text":"<p>Determines entity name generation: - <code>name-cluster</code>: Combine name and cluster - <code>name-namespace</code>: Combine name and namespace - <code>name-kind</code>: Combine name and resource kind - <code>name</code>: Use resource name only  </p>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#title-model","title":"Title Model","text":"<p>Controls entity title generation: - <code>name</code>: Use resource name - <code>name-cluster</code>: Combine name and cluster - <code>name-namespace</code>: Combine name and namespace  </p>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#system-model","title":"System Model","text":"<p>Defines system mapping: - <code>cluster</code>: Use cluster name - <code>namespace</code>: Use namespace name - <code>cluster-namespace</code>: Combine both - <code>default</code>: Use default system  </p>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#component-configuration","title":"Component Configuration","text":""},{"location":"plugins/kubernetes-ingestor/backend/configure/#task-runner-settings","title":"Task Runner Settings","text":"<pre><code>taskRunner:\n  # Run every 10 seconds\n  frequency: 10\n\n  # Allow up to 10 minutes per cycle\n  timeout: 600\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#resource-type-configuration","title":"Resource Type Configuration","text":"<pre><code>components:\n  # Custom resource types\n  customWorkloadTypes:\n    - group: apps.example.com\n      apiVersion: v1\n      plural: applications\n      singular: application\n\n  # Exclude system namespaces\n  excludedNamespaces:\n    - kube-system\n    - kube-public\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#crossplane-integration","title":"Crossplane Integration","text":""},{"location":"plugins/kubernetes-ingestor/backend/configure/#claims-configuration","title":"Claims Configuration","text":"<pre><code>crossplane:\n  enabled: true\n  claims:\n    # Auto-ingest all claims\n    ingestAllClaims: true\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#xrd-configuration","title":"XRD Configuration","text":"<pre><code>xrds:\n  # Template generation settings\n  publishPhase:\n    target: github\n    git:\n      repoUrl: github.com?owner=org&amp;repo=templates\n      targetBranch: main\n\n  # Processing settings\n  convertDefaultValuesToPlaceholders: true\n  ingestAllXRDs: true\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Resource Mapping</p> <ul> <li>Choose consistent mapping models</li> <li>Use clear naming conventions</li> <li>Consider namespace organization</li> <li>Plan system boundaries</li> </ul> </li> <li> <p>Performance Tuning</p> <ul> <li>Adjust task runner frequency</li> <li>Set appropriate timeouts</li> <li>Configure excluded namespaces</li> <li>Optimize resource selection</li> </ul> </li> <li> <p>Template Management</p> <ul> <li>Use version control</li> <li>Maintain consistent structure</li> <li>Document customizations</li> <li>Test generated templates</li> </ul> </li> </ol> <p>For installation instructions, refer to the Installation Guide.</p>"},{"location":"plugins/kubernetes-ingestor/backend/install/","title":"Installing the Kubernetes Ingestor Backend Plugin","text":"<p>This guide will help you install and set up the Kubernetes Ingestor backend plugin in your Backstage instance.</p>"},{"location":"plugins/kubernetes-ingestor/backend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage backend instance</li> <li>Access to Kubernetes clusters</li> <li>Proper RBAC configuration</li> <li>Git repository access (for template publishing)</li> </ol>"},{"location":"plugins/kubernetes-ingestor/backend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/kubernetes-ingestor/backend/install/#1-add-the-packages","title":"1. Add the Packages","text":"<p>Install the required packages using yarn:</p> <pre><code># Install the main plugin\nyarn --cwd packages/backend add @terasky/backstage-plugin-kubernetes-ingestor\n\n# Install the utilities package for template generation\nyarn --cwd packages/backend add @terasky/backstage-plugin-scaffolder-backend-module-terasky-utils\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/install/#2-add-to-backend","title":"2. Add to Backend","text":"<p>Modify your backend in <code>packages/backend/src/index.ts</code>:</p> <pre><code>import { createBackend } from '@backstage/backend-defaults';\n\nconst backend = createBackend();\n\n// Add the Kubernetes Ingestor plugin\nbackend.add(import('@terasky/backstage-plugin-kubernetes-ingestor'));\n\n// Add required scaffolder modules for template generation\nbackend.add(import('@backstage/plugin-scaffolder-backend-module-github'));\nbackend.add(import('@backstage/plugin-scaffolder-backend-module-gitlab'));\nbackend.add(import('@backstage/plugin-scaffolder-backend-module-bitbucket'));\nbackend.add(import('@terasky/backstage-plugin-scaffolder-backend-module-terasky-utils'));\n\nbackend.start();\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/install/#3-configure-rbac","title":"3. Configure RBAC","text":"<p>Set up the required RBAC permissions in your Kubernetes clusters:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: backstage-kubernetes-ingestor\nrules:\n  - apiGroups: [\"*\"]\n    resources: [\"*\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: backstage-kubernetes-ingestor\nsubjects:\n  - kind: ServiceAccount\n    name: backstage-kubernetes-ingestor\n    namespace: backstage\nroleRef:\n  kind: ClusterRole\n  name: backstage-kubernetes-ingestor\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/install/#4-configure-plugin","title":"4. Configure Plugin","text":"<p>Add configuration to your <code>app-config.yaml</code>:</p> <pre><code>kubernetesIngestor:\n  # Resource mapping configuration\n  mappings:\n    namespaceModel: 'cluster'\n    nameModel: 'name-cluster'\n    titleModel: 'name'\n    systemModel: 'namespace'\n    referencesNamespaceModel: 'default'\n\n  # Component ingestion settings\n  components:\n    enabled: true\n    taskRunner:\n      frequency: 10\n      timeout: 600\n    excludedNamespaces:\n      - kube-public\n      - kube-system\n    customWorkloadTypes:\n      - group: pkg.crossplane.io\n        apiVersion: v1\n        plural: providers\n\n  # Crossplane integration\n  crossplane:\n    enabled: true\n    claims:\n      ingestAllClaims: true\n    xrds:\n      enabled: true\n      publishPhase:\n        allowedTargets: ['github.com', 'gitlab.com']\n        target: github\n        git:\n          repoUrl: github.com?owner=org&amp;repo=templates\n          targetBranch: main\n        allowRepoSelection: true\n      taskRunner:\n        frequency: 10\n        timeout: 600\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/install/#5-configure-git-integration","title":"5. Configure Git Integration","text":"<p>Set up environment variables for Git access:</p> <pre><code>export GITHUB_TOKEN=your-token\nexport GITLAB_TOKEN=your-token\nexport BITBUCKET_TOKEN=your-token\n</code></pre>"},{"location":"plugins/kubernetes-ingestor/backend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The backend starts without errors</li> <li>Resources are being ingested</li> <li>Templates are being generated</li> <li>APIs are being created</li> </ol>"},{"location":"plugins/kubernetes-ingestor/backend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Resource Discovery Issues</p> <ul> <li>Check RBAC configuration</li> <li>Verify cluster access</li> <li>Review excluded namespaces</li> <li>Check task runner logs</li> </ul> </li> <li> <p>Template Generation Problems</p> <ul> <li>Verify Git credentials</li> <li>Check repository access</li> <li>Review XRD configuration</li> <li>Check scaffolder modules</li> </ul> </li> <li> <p>API Creation Issues</p> <ul> <li>Verify Crossplane setup</li> <li>Check XRD access</li> <li>Review relationship mapping</li> <li>Check API entity format</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide.</p>"},{"location":"plugins/kyverno/overview/","title":"Kyverno Plugin","text":"<p>The Kyverno plugin for Backstage provides comprehensive integration with Kyverno policy reports, enabling teams to monitor and manage their Kubernetes policy compliance directly within the Backstage interface.</p>"},{"location":"plugins/kyverno/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/kyverno/overview/#frontend-plugin-teraskybackstage-plugin-kyverno-policy-reports","title":"Frontend Plugin (<code>@terasky/backstage-plugin-kyverno-policy-reports</code>)","text":"<p>The frontend plugin adds visualization capabilities for Kyverno policy reports, allowing users to: - View policy reports associated with components - Monitor compliance statistics and metrics - Access detailed policy information and YAML configurations - Track policy results across different clusters - View Crossplane-specific policy reports - Display overview cards with compliance statistics - Provide YAML viewers with copy/download functionality</p> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/kyverno/overview/#backend-plugin-teraskybackstage-plugin-kyverno-policy-reports-backend","title":"Backend Plugin (<code>@terasky/backstage-plugin-kyverno-policy-reports-backend</code>)","text":"<p>The backend plugin provides comprehensive functionality: - Integration with Kubernetes clusters to fetch policy reports - API endpoints for retrieving policy information - Permission management and access control - MCP actions for programmatic access - Support for both namespaced and cluster-scoped policies - Integration with Backstage's permission framework</p> <p>Learn more about the backend plugin</p>"},{"location":"plugins/kyverno/overview/#common-library-teraskybackstage-plugin-kyverno-common","title":"Common Library (<code>@terasky/backstage-plugin-kyverno-common</code>)","text":"<p>The common library provides shared functionality: - Permission definitions and types - Common interfaces and models - Shared utilities for frontend and backend - Type definitions for policy reports and resources</p>"},{"location":"plugins/kyverno/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Frontend Plugin<ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul> </li> <li>Backend Plugin<ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul> </li> </ul>"},{"location":"plugins/kyverno/overview/#screenshots","title":"Screenshots","text":""},{"location":"plugins/kyverno/overview/#policy-reports-overview","title":"Policy Reports Overview","text":""},{"location":"plugins/kyverno/overview/#detailed-resource-view","title":"Detailed Resource View","text":""},{"location":"plugins/kyverno/overview/#policy-yaml-view","title":"Policy YAML View","text":""},{"location":"plugins/kyverno/overview/#component-overview","title":"Component Overview","text":""},{"location":"plugins/kyverno/overview/#mcp-actions-integration","title":"MCP Actions Integration","text":"<p>The Kyverno plugin provides MCP (Model Control Protocol) actions for interacting with Kyverno policies and policy reports. To enable these actions:</p> <ol> <li> <p>First, ensure you have the MCP actions backend plugin installed and configured. See the MCP Actions Backend Plugin documentation for setup instructions.</p> </li> <li> <p>Add the plugin to your actions configuration in <code>app-config.yaml</code>:</p> </li> </ol> <pre><code>backend:\n  actions:\n    pluginSources:\n      - 'catalog'\n      - 'kyverno'\n      # ... other action sources\n</code></pre>"},{"location":"plugins/kyverno/overview/#available-mcp-actions","title":"Available MCP Actions","text":"<p>The plugin provides the following MCP actions:</p> <ul> <li><code>get_kyverno_policy_reports</code>: Get policy reports for a specific entity</li> <li>Input: Entity metadata (name and namespace)</li> <li> <p>Output: List of policy reports with results and summaries</p> </li> <li> <p><code>get_kyverno_policy</code>: Get details of a specific Kyverno policy</p> </li> <li>Input: Cluster name, policy name, and optional namespace</li> <li>Output: Full policy details and configuration</li> </ul>"},{"location":"plugins/kyverno/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the Kyverno plugin:</p> <ol> <li>Install and configure the backend plugin</li> <li>Set up the frontend components</li> <li>Configure MCP actions in your app-config.yaml</li> <li>Configure permission rules and access policies</li> <li>Start monitoring your policy compliance</li> </ol>"},{"location":"plugins/kyverno/backend/about/","title":"Kyverno Policy Reports Backend Plugin","text":""},{"location":"plugins/kyverno/backend/about/#overview","title":"Overview","text":"<p>The Kyverno Policy Reports backend plugin (<code>@terasky/backstage-plugin-kyverno-policy-reports-backend</code>) provides comprehensive functionality for managing Kyverno policy reports in your Backstage instance. This includes API integration with Kubernetes clusters, policy report retrieval and processing, permission management, and MCP actions support.</p>"},{"location":"plugins/kyverno/backend/about/#features","title":"Features","text":""},{"location":"plugins/kyverno/backend/about/#kubernetes-integration","title":"Kubernetes Integration","text":"<ul> <li>Direct communication with Kubernetes API server</li> <li>Policy report retrieval and processing</li> <li>Support for both namespaced and cluster-scoped policies</li> <li>Real-time policy status monitoring</li> </ul>"},{"location":"plugins/kyverno/backend/about/#policy-report-management","title":"Policy Report Management","text":"<ul> <li>Comprehensive policy report retrieval</li> <li>Policy YAML manifest access</li> <li>Policy status tracking</li> <li>Support for Crossplane resources</li> <li>Event monitoring and aggregation</li> </ul>"},{"location":"plugins/kyverno/backend/about/#permission-management","title":"Permission Management","text":"<ul> <li>Integration with Backstage's permission framework</li> <li>Fine-grained access control for policy reports</li> <li>Configurable permission policies</li> <li>Role-based access control</li> </ul>"},{"location":"plugins/kyverno/backend/about/#mcp-actions-support","title":"MCP Actions Support","text":"<ul> <li>Policy report retrieval actions</li> <li>Policy details access</li> <li>Integration with Backstage's actions framework</li> <li>Programmatic access to policy data</li> </ul>"},{"location":"plugins/kyverno/backend/about/#api-integration","title":"API Integration","text":"<ul> <li>RESTful API endpoints</li> <li>Secure data access</li> <li>Permission validation middleware</li> <li>Frontend component integration</li> <li>Kubernetes API proxy support</li> </ul>"},{"location":"plugins/kyverno/backend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/kyverno/backend/about/#available-permissions","title":"Available Permissions","text":"<p>The plugin provides three main permission types:</p> <ol> <li> <p>Overview Access (<code>kyverno.overview.view</code>)</p> <ul> <li>Access to summary policy report data</li> <li>High-level compliance metrics</li> <li>Component status overview</li> </ul> </li> <li> <p>Report Access (<code>kyverno.reports.view</code>)</p> <ul> <li>Access to detailed policy reports</li> <li>Resource-specific compliance data</li> <li>Policy violation details</li> </ul> </li> <li> <p>Policy YAML Access (<code>kyverno.policy.view-yaml</code>)</p> <ul> <li>Access to policy YAML manifests</li> <li>Policy configuration details</li> <li>Rule specifications</li> </ul> </li> </ol>"},{"location":"plugins/kyverno/backend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage Permission Framework</li> <li>Kyverno Policy Reports Frontend</li> <li>Kubernetes API Server</li> <li>Backstage Catalog</li> </ul>"},{"location":"plugins/kyverno/backend/about/#security-considerations","title":"Security Considerations","text":"<ul> <li>Role-based access control</li> <li>Permission validation</li> <li>Secure data handling</li> <li>Audit trail capabilities</li> </ul>"},{"location":"plugins/kyverno/backend/configure/","title":"Configuring the Kyverno Policy Reports Backend Plugin","text":"<p>This guide covers the configuration options for the Kyverno Policy Reports backend plugin.</p>"},{"location":"plugins/kyverno/backend/configure/#basic-configuration","title":"Basic Configuration","text":"<p>The plugin uses Backstage's permission framework. To enable it, add the following to your <code>app-config.yaml</code>:</p> <pre><code>permission:\n  enabled: true # Enable Backstage permission framework\n\nkyverno:\n  enablePermissions: true # Whether to enable permission checks for the kyverno plugin.\n</code></pre>"},{"location":"plugins/kyverno/backend/configure/#using-the-community-rbac-plugin","title":"Using the Community RBAC Plugin","text":"<p>You can use the RBAC plugins from the backstage community and create roles via the UI or via a CSV file.</p>"},{"location":"plugins/kyverno/backend/configure/#example-via-csv-and-config","title":"Example via CSV and config","text":"<p>app-config.yaml snippet <pre><code>permission:\n  enabled: true\n  rbac:\n    policies-csv-file: /path/to/permissions.csv\n    policyFileReload: true\n    pluginsWithPermission:\n      - kubernetes\n      - kyverno\n</code></pre></p> <p>CSV file snippet <pre><code>p, role:default/platformteam, kubernetes.proxy, use, allow\np, role:default/platformteam, kubernetes.resources.read, read, allow\np, role:default/platformteam, kubernetes.clusters.read, read, allow\np, role:default/platformteam, kyverno.overview.view, read, allow\np, role:default/platformteam, kyverno.policy.view-yaml, read, allow\np, role:default/platformteam, kyverno.reports.view, read, allow\ng, group:default/all_users, role:default/platformteam\n</code></pre></p>"},{"location":"plugins/kyverno/backend/configure/#available-permissions","title":"Available Permissions","text":"<p>The plugin provides three main permission types that you can use in your policies:</p> <ol> <li><code>kyverno.overview.view</code>: Controls access to overview policy report data</li> <li><code>kyverno.reports.view</code>: Controls access to detailed policy report data</li> <li><code>kyverno.policy.view-yaml</code>: Controls access to policy YAML manifests</li> </ol>"},{"location":"plugins/kyverno/backend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Permission Management</p> <ul> <li>Follow the principle of least privilege</li> <li>Regularly review and update policies</li> <li>Use specific permissions over wildcards</li> </ul> </li> <li> <p>Security</p> <ul> <li>Enable audit logging</li> <li>Implement proper error handling</li> <li>Validate all inputs</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Verify Kubernetes plugin configurations</li> <li>Check authentication settings</li> <li>Monitor permission enforcement</li> </ul> </li> </ol>"},{"location":"plugins/kyverno/backend/install/","title":"Installing the Kyverno Backend Plugin","text":"<p>This guide will help you install and set up the Kyverno backend plugin in your Backstage instance.</p>"},{"location":"plugins/kyverno/backend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage backend</li> <li>Kyverno installed in your Kubernetes cluster(s)</li> <li>Access to modify your Backstage backend configuration</li> </ol>"},{"location":"plugins/kyverno/backend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/kyverno/backend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/backend add @terasky/backstage-plugin-kyverno-policy-reports-backend\n</code></pre>"},{"location":"plugins/kyverno/backend/install/#2-add-to-backend","title":"2. Add to Backend","text":"<p>Add the plugin to your backend (typically <code>packages/backend/src/index.ts</code>):</p> <pre><code>backend.add(import('@terasky/backstage-plugin-kyverno-policy-reports-backend'));\n</code></pre>"},{"location":"plugins/kyverno/backend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The backend starts without errors</li> <li>Permission endpoints are accessible</li> <li>Integration with the frontend plugin works correctly</li> </ol>"},{"location":"plugins/kyverno/backend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Backend Startup Issues</p> <ul> <li>Check the backend logs for errors</li> <li>Verify the plugin import statement</li> <li>Ensure all dependencies are installed</li> </ul> </li> <li> <p>Permission Framework Issues</p> <ul> <li>Confirm the permission framework is enabled</li> <li>Check permission policy configuration</li> <li>Verify integration with frontend components</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide.</p>"},{"location":"plugins/kyverno/frontend/about/","title":"Kyverno Policy Reports Frontend Plugin","text":""},{"location":"plugins/kyverno/frontend/about/#overview","title":"Overview","text":"<p>The Kyverno Policy Reports frontend plugin (<code>@terasky/backstage-plugin-kyverno-policy-reports</code>) enhances your Backstage instance with comprehensive visualization capabilities for Kyverno policy reports. It provides detailed insights into policy compliance, violations, and overall security posture of your Kubernetes resources, with special support for Crossplane resources.</p>"},{"location":"plugins/kyverno/frontend/about/#features","title":"Features","text":""},{"location":"plugins/kyverno/frontend/about/#policy-report-overview","title":"Policy Report Overview","text":"<ul> <li>Aggregated policy compliance metrics</li> <li>Error, fail, pass, skip, and warning counts</li> <li>Cluster-wide policy status visualization</li> <li>Component-level compliance summary</li> </ul>"},{"location":"plugins/kyverno/frontend/about/#detailed-policy-analysis","title":"Detailed Policy Analysis","text":"<ul> <li>Resource-specific policy results</li> <li>Expandable detailed views</li> <li>Policy YAML inspection capabilities</li> <li>Copy-to-clipboard functionality</li> </ul>"},{"location":"plugins/kyverno/frontend/about/#crossplane-integration","title":"Crossplane Integration","text":"<ul> <li>Support for Crossplane Claims and Composite resources</li> <li>Dedicated policy report views for Crossplane components</li> <li>Integrated compliance monitoring for cloud resources</li> </ul>"},{"location":"plugins/kyverno/frontend/about/#components","title":"Components","text":""},{"location":"plugins/kyverno/frontend/about/#kyvernopolicyreportstable","title":"KyvernoPolicyReportsTable","text":"<p>The main component for displaying policy reports: - Cluster-organized policy results - Expandable resource details - Policy YAML viewer integration - Sorting and filtering capabilities  </p>"},{"location":"plugins/kyverno/frontend/about/#kyvernooverviewcard","title":"KyvernoOverviewCard","text":"<p>A summary card for the component overview page: - Quick compliance status view - Key metrics visualization - Direct access to detailed reports  </p>"},{"location":"plugins/kyverno/frontend/about/#crossplane-specific-components","title":"Crossplane-Specific Components","text":"<p>Special components for Crossplane integration: - <code>KyvernoCrossplanePolicyReportsTable</code> - <code>KyvernoCrossplaneOverviewCard</code> </p>"},{"location":"plugins/kyverno/frontend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/kyverno/frontend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Kubernetes resources</li> <li>Kyverno policies</li> <li>Crossplane resources</li> <li>Backstage catalog entities</li> </ul>"},{"location":"plugins/kyverno/frontend/about/#permission-framework","title":"Permission Framework","text":"<ul> <li>Integration with Backstage permissions</li> <li>Configurable access controls</li> <li>Role-based viewing capabilities</li> </ul>"},{"location":"plugins/kyverno/frontend/about/#available-permissions","title":"Available Permissions","text":"<ul> <li><code>kyverno.overview.view</code>: Access to overview data</li> <li><code>kyverno.reports.view</code>: Access to detailed reports</li> <li><code>kyverno.policy.view-yaml</code>: Access to policy YAML content</li> </ul>"},{"location":"plugins/kyverno/frontend/about/#screenshots","title":"Screenshots","text":""},{"location":"plugins/kyverno/frontend/about/#policy-reports-table","title":"Policy Reports Table","text":""},{"location":"plugins/kyverno/frontend/about/#detailed-resource-view","title":"Detailed Resource View","text":""},{"location":"plugins/kyverno/frontend/about/#policy-yaml-inspection","title":"Policy YAML Inspection","text":""},{"location":"plugins/kyverno/frontend/about/#overview-card","title":"Overview Card","text":""},{"location":"plugins/kyverno/frontend/configure/","title":"Configuring the Kyverno Policy Reports Frontend Plugin","text":"<p>This guide covers the configuration options for the Kyverno Policy Reports frontend plugin.</p>"},{"location":"plugins/kyverno/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The configuration in <code>app-config.yaml</code> is still respected:</p> <pre><code>kyverno:\n  enablePermissions: false  # Whether to enable permission checks for the kyverno plugin\n</code></pre> <p>The plugin will be automatically integrated into the appropriate entity pages without requiring manual route configuration.</p>"},{"location":"plugins/kyverno/frontend/configure/#basic-configuration","title":"Basic Configuration","text":"<p>Add the following to your <code>app-config.yaml</code>:</p> <pre><code>kyverno:\n  enablePermissions: false  # Whether to enable permission checks for the kyverno plugin\n</code></pre>"},{"location":"plugins/kyverno/frontend/configure/#configuration-options","title":"Configuration Options","text":""},{"location":"plugins/kyverno/frontend/configure/#permission-framework-integration","title":"Permission Framework Integration","text":"<p>When <code>enablePermissions</code> is set to <code>true</code>, the plugin integrates with Backstage's permission framework. The following permissions are available: - <code>kyverno.overview.view</code>: Access to overview policy report data - <code>kyverno.reports.view</code>: Access to detailed policy report data - <code>kyverno.policy.view-yaml</code>: Access to view the YAML manifest of Kyverno policies  </p>"},{"location":"plugins/kyverno/frontend/configure/#component-customization","title":"Component Customization","text":""},{"location":"plugins/kyverno/frontend/configure/#overview-card-placement","title":"Overview Card Placement","text":"<p>You can customize where the Kyverno overview card appears in your entity overview page:</p> <pre><code>&lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n  &lt;EntitySwitch&gt;\n    &lt;EntitySwitch.Case if={isKubernetesAvailable}&gt;\n      &lt;Grid item md={6} xs={12}&gt;  // Adjust size as needed\n        &lt;KyvernoOverviewCard /&gt;\n      &lt;/Grid&gt;\n    &lt;/EntitySwitch.Case&gt;\n  &lt;/EntitySwitch&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"plugins/kyverno/frontend/configure/#policy-reports-table-customization","title":"Policy Reports Table Customization","text":"<p>The policy reports table can be placed in a dedicated tab:</p> <pre><code>&lt;EntityLayout&gt;\n  &lt;EntityLayout.Route \n    path=\"/kyverno-policy-reports\" \n    title=\"Kyverno Policy Reports\"\n  &gt;\n    &lt;KyvernoPolicyReportsTable /&gt;\n  &lt;/EntityLayout.Route&gt;\n&lt;/EntityLayout&gt;\n</code></pre>"},{"location":"plugins/kyverno/frontend/configure/#crossplane-integration","title":"Crossplane Integration","text":"<p>For Crossplane resources, use the dedicated components:</p> <pre><code>// Overview Card\n&lt;KyvernoCrossplaneOverviewCard /&gt;\n\n// Policy Reports Table\n&lt;KyvernoCrossplanePolicyReportsTable /&gt;\n</code></pre>"},{"location":"plugins/kyverno/frontend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Permission Management</p> <ul> <li>Start with permissions disabled during initial setup</li> <li>Enable permissions once basic functionality is verified</li> <li>Configure granular permissions based on user roles</li> </ul> </li> <li> <p>Component Placement</p> <ul> <li>Place the overview card where it's easily visible</li> <li>Group policy-related components together</li> <li>Consider the relationship with other security tools</li> </ul> </li> <li> <p>User Experience</p> <ul> <li>Provide clear access to policy details</li> <li>Ensure consistent placement across different entity types</li> <li>Consider adding documentation links for policy understanding</li> </ul> </li> </ol>"},{"location":"plugins/kyverno/frontend/install/","title":"Installing the Kyverno Policy Reports Frontend Plugin","text":"<p>This guide will help you install and set up the Kyverno Policy Reports frontend plugin in your Backstage instance.</p>"},{"location":"plugins/kyverno/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>Kyverno installed in your Kubernetes cluster(s)</li> <li>The Kyverno Policy Reports backend plugin (<code>@terasky/backstage-plugin-kyverno-policy-reports-backend</code>) installed</li> </ol>"},{"location":"plugins/kyverno/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/kyverno/frontend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/app add @terasky/backstage-plugin-kyverno-policy-reports\n</code></pre>"},{"location":"plugins/kyverno/frontend/install/#2-import-components","title":"2. Import Components","text":"<p>Add the necessary imports to your Entity Page file (typically <code>packages/app/src/components/catalog/EntityPage.tsx</code>):</p> <pre><code>import { \n  KyvernoPolicyReportsTable, \n  KyvernoOverviewCard,\n  // Optional: For Crossplane integration\n  KyvernoCrossplanePolicyReportsTable,\n  KyvernoCrossplaneOverviewCard\n} from '@terasky/backstage-plugin-kyverno-policy-reports';\n</code></pre>"},{"location":"plugins/kyverno/frontend/install/#3-add-to-entity-page","title":"3. Add to Entity Page","text":""},{"location":"plugins/kyverno/frontend/install/#basic-setup","title":"Basic Setup","text":"<p>Add the Kyverno components to your entity page:</p> <pre><code>const overviewContent = (\n  &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n    {/* ... other grid items ... */}\n\n    &lt;EntitySwitch&gt;\n      &lt;EntitySwitch.Case if={isKubernetesAvailable}&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;KyvernoOverviewCard /&gt;\n        &lt;/Grid&gt;\n      &lt;/EntitySwitch.Case&gt;\n    &lt;/EntitySwitch&gt;\n\n    {/* ... other grid items ... */}\n  &lt;/Grid&gt;\n);\n\nconst serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    {/* ... other routes ... */}\n\n    &lt;EntityLayout.Route path=\"/kyverno-policy-reports\" title=\"Kyverno Policy Reports\"&gt;\n      &lt;KyvernoPolicyReportsTable /&gt;\n    &lt;/EntityLayout.Route&gt;\n\n    {/* ... other routes ... */}\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/kyverno/frontend/install/#crossplane-integration-optional","title":"Crossplane Integration (Optional)","text":"<p>If you're using Crossplane, add the Crossplane-specific components:</p> <pre><code>const crossplaneOverviewContent = (\n  &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n    {/* ... other grid items ... */}\n\n    &lt;EntitySwitch&gt;\n      &lt;EntitySwitch.Case if={isKubernetesAvailable}&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;KyvernoCrossplaneOverviewCard /&gt;\n        &lt;/Grid&gt;\n      &lt;/EntitySwitch.Case&gt;\n    &lt;/EntitySwitch&gt;\n\n    {/* ... other grid items ... */}\n  &lt;/Grid&gt;\n);\n\nconst crossplaneEntityPage = (\n  &lt;EntityLayout&gt;\n    {/* ... other routes ... */}\n\n    &lt;EntityLayout.Route path=\"/kyverno-policy-reports\" title=\"Kyverno Policy Reports\"&gt;\n      &lt;KyvernoCrossplanePolicyReportsTable /&gt;\n    &lt;/EntityLayout.Route&gt;\n\n    {/* ... other routes ... */}\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/kyverno/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { kyvernoPolicyReportsPlugin } from '@terasky/backstage-plugin-kyverno-policy-reports/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    kyvernoPolicyReportsPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/kyverno/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The Kyverno overview card appears on component pages</li> <li>The policy reports tab is accessible</li> <li>Policy data is being properly displayed</li> </ol>"},{"location":"plugins/kyverno/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Missing Overview Card</p> <ul> <li>Ensure the component is properly imported</li> <li>Check if <code>isKubernetesAvailable</code> returns true</li> <li>Verify the grid layout configuration</li> </ul> </li> <li> <p>No Policy Data</p> <ul> <li>Confirm Kyverno is running in your cluster</li> <li>Check if policy reports are being generated</li> <li>Verify permissions if using the backend plugin</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide.</p>"},{"location":"plugins/scaffolder-actions/overview/","title":"Scaffolder Backend Module TeraSky Utils Plugin","text":"<p>The Scaffolder Backend Module TeraSky Utils plugin provides a collection of useful scaffolder actions for managing Kubernetes resources and Backstage entities. These actions enhance the template creation and management capabilities of Backstage.</p>"},{"location":"plugins/scaffolder-actions/overview/#features","title":"Features","text":"<ul> <li>Crossplane Claim Generation: Convert parameters to Kubernetes YAML manifests</li> <li>Catalog Info Cleanup: Clean and format Backstage entity manifests</li> <li>File System Management: Organized file output handling</li> <li>Template Integration: Seamless integration with scaffolder templates</li> </ul>"},{"location":"plugins/scaffolder-actions/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/scaffolder-actions/overview/#backend-plugin","title":"Backend Plugin","text":"<p>The plugin provides backend actions for: </p> <ul> <li>Manifest generation </li> <li>Entity cleanup </li> <li>File system operations </li> <li>Template processing </li> </ul> <p>Learn more about the backend plugin</p>"},{"location":"plugins/scaffolder-actions/overview/#available-actions","title":"Available Actions","text":""},{"location":"plugins/scaffolder-actions/overview/#teraskyclaim-template","title":"terasky:claim-template","text":"<p>Converts input parameters into Kubernetes YAML manifests: </p> <ul> <li>Generates Crossplane claim manifests </li> <li>Organizes by cluster/namespace/kind </li> <li>Maintains consistent file structure </li> <li>Handles parameter transformation </li> </ul>"},{"location":"plugins/scaffolder-actions/overview/#teraskycatalog-info-cleaner","title":"terasky:catalog-info-cleaner","text":"<p>Processes Backstage entity manifests: </p> <ul> <li>Removes runtime information </li> <li>Formats catalog-info.yaml files </li> <li>Prepares for git-based management </li> <li>Maintains entity structure </li> </ul>"},{"location":"plugins/scaffolder-actions/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>About</li> <li>Installation</li> </ul>"},{"location":"plugins/scaffolder-actions/overview/#use-cases","title":"Use Cases","text":""},{"location":"plugins/scaffolder-actions/overview/#crossplane-resource-management","title":"Crossplane Resource Management","text":"<ol> <li>Template parameter collection</li> <li>Manifest generation</li> <li>File system organization</li> <li>Resource deployment</li> </ol>"},{"location":"plugins/scaffolder-actions/overview/#entity-management","title":"Entity Management","text":"<ol> <li>Auto-ingested component cleanup</li> <li>Git-based catalog preparation</li> <li>Entity manifest formatting</li> <li>Version control integration</li> </ol>"},{"location":"plugins/scaffolder-actions/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the Scaffolder Backend Module TeraSky Utils plugin:</p> <ol> <li>Install the backend plugin</li> <li>Configure scaffolder integration</li> <li>Create templates using actions</li> <li>Start managing resources</li> </ol> <p>For detailed installation and configuration instructions, refer to the backend documentation linked above. </p>"},{"location":"plugins/scaffolder-actions/backend/about/","title":"Scaffolder Backend Module TeraSky Utils Backend Plugin","text":""},{"location":"plugins/scaffolder-actions/backend/about/#overview","title":"Overview","text":"<p>The Scaffolder Backend Module TeraSky Utils backend plugin extends Backstage's scaffolder with powerful actions for managing Kubernetes resources and Backstage entities. It provides specialized actions for generating Crossplane claims and cleaning up catalog entities.</p>"},{"location":"plugins/scaffolder-actions/backend/about/#features","title":"Features","text":""},{"location":"plugins/scaffolder-actions/backend/about/#claim-template-action","title":"Claim Template Action","text":"<ul> <li>Parameter to YAML conversion</li> <li>Structured file organization</li> <li>Crossplane integration</li> <li>Resource management</li> </ul>"},{"location":"plugins/scaffolder-actions/backend/about/#catalog-info-cleaner","title":"Catalog Info Cleaner","text":"<ul> <li>Entity manifest cleanup</li> <li>Runtime data removal</li> <li>Git preparation</li> <li>YAML formatting</li> </ul>"},{"location":"plugins/scaffolder-actions/backend/about/#components","title":"Components","text":""},{"location":"plugins/scaffolder-actions/backend/about/#teraskyclaim-template","title":"terasky:claim-template","text":"<p>The action that provides: - Parameter processing - YAML generation - File system handling - Resource organization  </p> <p>Example usage: <pre><code>apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: crossplane-claim\nspec:\n  steps:\n    - id: generate-claim\n      name: Generate Crossplane Claim\n      action: terasky:claim-template\n      input:\n        cluster: production\n        namespace: web-apps\n        kind: PostgreSQLInstance\n        parameters:\n          size: small\n          version: \"13\"\n</code></pre></p>"},{"location":"plugins/scaffolder-actions/backend/about/#teraskycatalog-info-cleaner","title":"terasky:catalog-info-cleaner","text":"<p>The action that handles: - Entity processing - Data cleanup - File generation - Format standardization  </p> <p>Example usage: <pre><code>apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: catalog-cleanup\nspec:\n  steps:\n    - id: clean-entity\n      name: Clean Entity Manifest\n      action: terasky:catalog-info-cleaner\n      input:\n        entity:\n          apiVersion: backstage.io/v1alpha1\n          kind: Component\n          metadata:\n            name: example-service\n</code></pre></p>"},{"location":"plugins/scaffolder-actions/backend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/scaffolder-actions/backend/about/#action-processing","title":"Action Processing","text":"<p>The plugin processes actions through: 1. Input validation 2. Data transformation 3. File generation 4. Output organization  </p>"},{"location":"plugins/scaffolder-actions/backend/about/#file-system-handling","title":"File System Handling","text":"<p>Manages file operations for: - Manifest creation - Directory structure - File naming - Path organization  </p>"},{"location":"plugins/scaffolder-actions/backend/about/#integration-points","title":"Integration Points","text":"<ul> <li>Backstage Scaffolder  </li> <li>Kubernetes API  </li> <li>Entity Catalog  </li> <li>File System  </li> </ul>"},{"location":"plugins/scaffolder-actions/backend/about/#use-cases","title":"Use Cases","text":""},{"location":"plugins/scaffolder-actions/backend/about/#crossplane-claim-generation","title":"Crossplane Claim Generation","text":"<ol> <li>Collect parameters  </li> <li>Generate manifest  </li> <li>Organize files  </li> <li>Prepare deployment  </li> </ol>"},{"location":"plugins/scaffolder-actions/backend/about/#entity-cleanup","title":"Entity Cleanup","text":"<ol> <li>Process entity</li> <li>Remove runtime data</li> <li>Format manifest</li> <li>Save to file</li> </ol>"},{"location":"plugins/scaffolder-actions/backend/about/#action-schemas","title":"Action Schemas","text":""},{"location":"plugins/scaffolder-actions/backend/about/#generic-crd-action-schema","title":"Generic CRD Action Schema","text":"<pre><code>schema: {\n  input: {\n    ownerParam: z =&gt; z.any(),\n    parameters: z =&gt; z.record(z.any()),\n    nameParam: z =&gt; z.string(),\n    namespaceParam: z =&gt; z.string().optional(),\n    excludeParams: z =&gt; z.array(z.string()),\n    apiVersion: z =&gt; z.string(),\n    kind: z =&gt; z.string(),\n    removeEmptyParams: z =&gt; z.boolean().optional(),\n    clusters: z =&gt; z.array(z.string()).min(1),\n  },\n  output: {\n    manifest: z =&gt; z.string(),\n    filePaths: z =&gt; z.array(z.string()),\n  },\n}\n</code></pre>"},{"location":"plugins/scaffolder-actions/backend/about/#crossplane-claim-action-schema","title":"Crossplane Claim Action Schema","text":"<pre><code>schema: {\n  input: {\n    parameters: z =&gt; z.record(z.any()).describe('Pass through of input parameters'),\n    nameParam: z =&gt; z.string().describe('Template parameter to map to the name of the claim').defaultName'),\n    namespaceParam: z =&gt; z.string().describe('Template parameter to map to the namespace of the claim').ult('xrNamespace'),\n    excludeParams: z =&gt; z.array(z.string()).describe('Template parameters to exclude from the claim').ult(['xrName', 'xrNamespace', 'clusters', 'targetBranch', 'repoUrl', '_editData']),\n    apiVersion: z =&gt; z.string().describe('API Version of the claim'),\n    kind: z =&gt; z.string().describe('Kind of the claim'),\n    clusters: z =&gt; z.array(z.string()).min(1).describe('The target clusters to apply the resource to'),\n    removeEmptyParams: z =&gt; z.boolean().describe('If set to false, empty parameters will be rendered in manifest. by default they are removed').default(true),\n    ownerParam: z =&gt; z.string().describe('Template parameter to map to the owner of the claim'),\n  },\n  output: {\n    manifest: z =&gt; z.string().describe('The templated Kubernetes resource manifest'),\n    filePaths: z =&gt; z.array(z.string()).describe('The file paths of the written manifests'),\n  },\n}\n</code></pre>"},{"location":"plugins/scaffolder-actions/backend/about/#entity-cleanup-action-schema","title":"Entity Cleanup Action Schema","text":"<pre><code>schema: {\n  input: {\n    entity: z =&gt; z.record(z.any()).describe('Pass through of entity object'),\n  },\n  output: {\n    manifest: z =&gt; z.string().describe('The templated Kubernetes resource manifest'),\n    filePath: z =&gt; z.string().describe('The file path of the written manifests'),\n  },\n}\n</code></pre> <p>For installation and configuration details, refer to the Installation Guide.</p>"},{"location":"plugins/scaffolder-actions/backend/install/","title":"Installing the Scaffolder Backend Module TeraSky Utils Backend Plugin","text":"<p>This guide will help you install and set up the Scaffolder Backend Module TeraSky Utils backend plugin in your Backstage instance.</p>"},{"location":"plugins/scaffolder-actions/backend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage backend instance</li> <li>The Scaffolder plugin installed and configured</li> <li>Access to Kubernetes clusters (for claim templates)</li> <li>Git repository access (for entity publishing)</li> </ol>"},{"location":"plugins/scaffolder-actions/backend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/scaffolder-actions/backend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/backend add @terasky/backstage-plugin-scaffolder-backend-module-terasky-utils\n</code></pre>"},{"location":"plugins/scaffolder-actions/backend/install/#2-add-to-backend","title":"2. Add to Backend","text":"<p>Modify your backend in <code>packages/backend/src/index.ts</code>:</p> <pre><code>import { createBackend } from '@backstage/backend-defaults';\n\nconst backend = createBackend();\n\n// Add the TeraSky Utils module\nbackend.add(import('@terasky/backstage-plugin-scaffolder-backend-module-terasky-utils'));\n\n// Add required scaffolder modules for template publishing\nbackend.add(import('@backstage/plugin-scaffolder-backend-module-github'));\nbackend.add(import('@backstage/plugin-scaffolder-backend-module-gitlab'));\nbackend.add(import('@backstage/plugin-scaffolder-backend-module-bitbucket'));\n\nbackend.start();\n</code></pre>"},{"location":"plugins/scaffolder-actions/backend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The backend starts without errors</li> <li>Templates are registered correctly</li> <li>Actions are available in the scaffolder</li> <li>File generation works as expected</li> </ol>"},{"location":"plugins/scaffolder-actions/backend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Action Not Found</p> <ul> <li>Check plugin installation</li> <li>Verify backend configuration</li> <li>Review module imports</li> <li>Check action registration</li> </ul> </li> <li> <p>File Generation Issues</p> <ul> <li>Check file permissions</li> <li>Verify template syntax</li> <li>Review input parameters</li> <li>Check output paths</li> </ul> </li> <li> <p>Git Integration Problems</p> <ul> <li>Verify tokens</li> <li>Check repository access</li> <li>Review publishing configuration</li> <li>Check error messages</li> </ul> </li> </ol>"},{"location":"plugins/scaleops/overview/","title":"ScaleOps Plugin","text":"<p>The ScaleOps plugin integrates ScaleOps cost optimization data into your Backstage instance, providing visibility into potential and realized savings for your Kubernetes resources. It offers a comprehensive dashboard view and direct links to the ScaleOps platform for detailed analysis.</p>"},{"location":"plugins/scaleops/overview/#features","title":"Features","text":"<ul> <li>Cost Optimization Insights: View potential and realized savings</li> <li>Multi-Cluster Support: Monitor resources across clusters</li> <li>Dashboard Integration: Direct links to ScaleOps dashboard</li> <li>Authentication Support: Multiple authentication methods</li> <li>Resource Monitoring: Track Kubernetes resource usage</li> <li>Cost Analysis: Detailed cost breakdown views</li> </ul>"},{"location":"plugins/scaleops/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/scaleops/overview/#frontend-plugin","title":"Frontend Plugin","text":"<p>The plugin provides frontend components for: - Cost visualization - Resource monitoring - Savings analysis - Dashboard integration  </p> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/scaleops/overview/#screenshots","title":"Screenshots","text":"<p> ScaleOps dashboard overview showing cost optimization opportunities</p> <p> Detailed view of resource utilization and savings</p>"},{"location":"plugins/scaleops/overview/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>About</li> <li>Installation</li> <li>Configuration</li> </ul>"},{"location":"plugins/scaleops/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the ScaleOps plugin:</p> <ol> <li>Install the frontend plugin</li> <li>Configure ScaleOps integration</li> <li>Set up authentication</li> <li>Add to entity pages</li> <li>Start monitoring costs</li> </ol> <p>For detailed installation and configuration instructions, refer to the frontend documentation linked above.</p>"},{"location":"plugins/scaleops/frontend/about/","title":"ScaleOps Frontend Plugin","text":""},{"location":"plugins/scaleops/frontend/about/#overview","title":"Overview","text":"<p>The ScaleOps frontend plugin provides a comprehensive interface for viewing and analyzing cost optimization data from ScaleOps within your Backstage instance. It enables teams to monitor resource utilization, track potential savings, and access detailed cost analysis directly from their service catalog.</p>"},{"location":"plugins/scaleops/frontend/about/#features","title":"Features","text":""},{"location":"plugins/scaleops/frontend/about/#cost-optimization-dashboard","title":"Cost Optimization Dashboard","text":"<ul> <li>Potential savings analysis</li> <li>Realized savings tracking</li> <li>Resource utilization metrics</li> <li>Cost breakdown views</li> <li>Multi-cluster visibility</li> </ul>"},{"location":"plugins/scaleops/frontend/about/#resource-monitoring","title":"Resource Monitoring","text":"<ul> <li>Resource usage tracking</li> <li>Utilization patterns</li> <li>Optimization suggestions</li> <li>Performance metrics</li> <li>Trend analysis</li> </ul>"},{"location":"plugins/scaleops/frontend/about/#integration-features","title":"Integration Features","text":"<ul> <li>ScaleOps dashboard links</li> <li>Authentication handling</li> <li>Multi-cluster support</li> <li>Real-time data updates</li> <li>Custom metric views</li> </ul>"},{"location":"plugins/scaleops/frontend/about/#components","title":"Components","text":""},{"location":"plugins/scaleops/frontend/about/#scaleopsdashboard","title":"ScaleOpsDashboard","text":"<p>The main component that provides: - Cost optimization overview - Resource utilization metrics - Savings analysis - Performance insights  </p> <p>Example usage: <pre><code>import { ScaleOpsDashboard, isScaleopsAvailable } from '@terasky/backstage-plugin-scaleops-frontend';\n\nconst entityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/scaleops\" \n      if={isScaleopsAvailable}\n      title=\"ScaleOps\"\n    &gt;\n      &lt;ScaleOpsDashboard /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre></p>"},{"location":"plugins/scaleops/frontend/about/#technical-details","title":"Technical Details","text":""},{"location":"plugins/scaleops/frontend/about/#integration-points","title":"Integration Points","text":"<ul> <li>ScaleOps API</li> <li>Authentication service</li> <li>Proxy configuration</li> <li>Entity catalog</li> </ul>"},{"location":"plugins/scaleops/frontend/about/#authentication-methods","title":"Authentication Methods","text":"<ul> <li>Basic authentication</li> <li>Token-based auth</li> <li>Future auth options planned</li> </ul>"},{"location":"plugins/scaleops/frontend/about/#data-visualization","title":"Data Visualization","text":"<ul> <li>Cost metrics</li> <li>Resource usage</li> <li>Savings potential</li> <li>Performance data</li> </ul>"},{"location":"plugins/scaleops/frontend/about/#use-cases","title":"Use Cases","text":""},{"location":"plugins/scaleops/frontend/about/#cost-optimization","title":"Cost Optimization","text":"<ol> <li>Monitor resource costs</li> <li>Identify savings opportunities</li> <li>Track optimization progress</li> <li>Analyze spending patterns</li> </ol>"},{"location":"plugins/scaleops/frontend/about/#resource-management","title":"Resource Management","text":"<ol> <li>Track utilization</li> <li>Monitor performance</li> <li>Optimize resources</li> <li>Plan capacity</li> </ol>"},{"location":"plugins/scaleops/frontend/about/#team-collaboration","title":"Team Collaboration","text":"<ol> <li>Share insights</li> <li>Track improvements</li> <li>Plan optimizations</li> <li>Document savings</li> </ol>"},{"location":"plugins/scaleops/frontend/about/#example-integrations","title":"Example Integrations","text":""},{"location":"plugins/scaleops/frontend/about/#basic-integration","title":"Basic Integration","text":"<pre><code>import {\n  ScaleOpsDashboard,\n  isScaleopsAvailable,\n} from '@terasky/backstage-plugin-scaleops-frontend';\n\nconst serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/scaleops\" \n      if={isScaleopsAvailable}\n      title=\"ScaleOps Dashboard\"\n    &gt;\n      &lt;ScaleOpsDashboard /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/scaleops/frontend/about/#advanced-integration","title":"Advanced Integration","text":"<pre><code>import {\n  ScaleOpsDashboard,\n  isScaleopsAvailable,\n} from '@terasky/backstage-plugin-scaleops-frontend';\n\nconst scaleopsContent = (\n  &lt;&gt;\n    &lt;EntitySwitch&gt;\n      &lt;EntitySwitch.Case if={isScaleopsAvailable}&gt;\n        &lt;Grid container spacing={3}&gt;\n          &lt;Grid item xs={12}&gt;\n            &lt;ScaleOpsDashboard /&gt;\n          &lt;/Grid&gt;\n        &lt;/Grid&gt;\n      &lt;/EntitySwitch.Case&gt;\n    &lt;/EntitySwitch&gt;\n  &lt;/&gt;\n);\n\nconst serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/cost-optimization\" \n      title=\"Cost Optimization\"\n    &gt;\n      {scaleopsContent}\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/scaleops/frontend/about/#screenshots","title":"Screenshots","text":""},{"location":"plugins/scaleops/frontend/about/#dashboard-overview","title":"Dashboard Overview","text":"<p> Main dashboard showing cost optimization opportunities</p>"},{"location":"plugins/scaleops/frontend/about/#detailed-analysis","title":"Detailed Analysis","text":"<p> Detailed view of resource utilization and potential savings</p> <p>For installation and configuration details, refer to the Installation Guide and Configuration Guide.</p>"},{"location":"plugins/scaleops/frontend/configure/","title":"Configuring the ScaleOps Frontend Plugin","text":"<p>This guide covers the configuration options available for the ScaleOps frontend plugin.</p>"},{"location":"plugins/scaleops/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The configuration in <code>app-config.yaml</code> is still respected:</p> <pre><code>scaleops:\n  baseUrl: 'https://your-scaleops-instance.com'\n  linkToDashboard: true\n  authentication:\n    enabled: true\n    user: 'YOUR_USERNAME'\n    password: 'YOUR_PASSWORD'\n</code></pre> <p>The plugin will be automatically integrated into the appropriate entity pages without requiring manual route configuration.</p>"},{"location":"plugins/scaleops/frontend/configure/#configuration-file","title":"Configuration File","text":"<p>The plugin is configured through your <code>app-config.yaml</code>. Here's a comprehensive example:</p> <pre><code>scaleops:\n  # Base URL of your ScaleOps instance\n  baseUrl: 'https://your-scaleops-instance.com'\n\n  # Enable direct links to ScaleOps dashboard\n  linkToDashboard: true\n\n  # Authentication configuration\n  authentication:\n    enabled: true\n    user: 'YOUR_USERNAME'\n    password: 'YOUR_PASSWORD'\n</code></pre>"},{"location":"plugins/scaleops/frontend/configure/#authentication-options","title":"Authentication Options","text":""},{"location":"plugins/scaleops/frontend/configure/#internal-authentication","title":"Internal Authentication","text":"<pre><code>authentication:\n  enabled: true\n  user: 'username'\n  password: 'password'\n</code></pre>"},{"location":"plugins/scaleops/frontend/configure/#no-authentication","title":"No Authentication","text":"<pre><code>authentication:\n  enabled: false\n</code></pre>"},{"location":"plugins/scaleops/frontend/configure/#environment-variables","title":"Environment Variables","text":"<pre><code>authentication:\n  enabled: true\n  user: ${SCALEOPS_USERNAME}\n  password: ${SCALEOPS_PASSWORD}\n</code></pre>"},{"location":"plugins/scaleops/frontend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Authentication</p> <ul> <li>Use environment variables</li> <li>Rotate credentials regularly</li> <li>Implement proper secret management</li> <li>Use secure authentication methods</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Set appropriate refresh intervals</li> <li>Configure caching if needed</li> <li>Monitor API usage</li> <li>Handle errors gracefully</li> </ul> </li> <li> <p>Integration</p> <ul> <li>Use consistent configuration</li> <li>Document custom settings</li> <li>Monitor dashboard performance</li> <li>Maintain security standards</li> </ul> </li> </ol> <p>For installation instructions, refer to the Installation Guide.</p>"},{"location":"plugins/scaleops/frontend/install/","title":"Installing the ScaleOps Frontend Plugin","text":"<p>This guide will help you install and set up the ScaleOps frontend plugin in your Backstage instance.</p>"},{"location":"plugins/scaleops/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A working Backstage instance</li> <li>Access to a ScaleOps instance</li> <li>Authentication credentials (if required)</li> <li>Proper proxy configuration</li> </ol>"},{"location":"plugins/scaleops/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/scaleops/frontend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/app add @terasky/backstage-plugin-scaleops-frontend\n</code></pre>"},{"location":"plugins/scaleops/frontend/install/#2-add-to-entity-page","title":"2. Add to Entity Page","text":"<p>Modify your entity page configuration in <code>packages/app/src/components/catalog/EntityPage.tsx</code>:</p> <pre><code>import { ScaleOpsDashboard, isScaleopsAvailable } from '@terasky/backstage-plugin-scaleops-frontend';\n\nconst serviceEntityPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route \n      path=\"/scaleops\" \n      if={isScaleopsAvailable}\n      title=\"ScaleOps\"\n    &gt;\n      &lt;ScaleOpsDashboard /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n</code></pre>"},{"location":"plugins/scaleops/frontend/install/#3-configure-authentication","title":"3. Configure Authentication","text":"<p>Add authentication configuration to your <code>app-config.yaml</code>:</p>"},{"location":"plugins/scaleops/frontend/install/#with-internal-authentication","title":"With Internal Authentication","text":"<pre><code>scaleops:\n  baseUrl: 'https://your-scaleops-instance.com'\n  linkToDashboard: true\n  authentication:\n    enabled: true\n    user: 'YOUR_USERNAME'\n    password: 'YOUR_PASSWORD'\n\nproxy:\n  endpoints:\n    '/scaleops':\n      target: 'https://your-scaleops-instance.com'\n      changeOrigin: true\n</code></pre>"},{"location":"plugins/scaleops/frontend/install/#without-authentication","title":"Without Authentication","text":"<pre><code>scaleops:\n  baseUrl: 'https://your-scaleops-instance.com'\n  linkToDashboard: true\n  authentication:\n    enabled: false\n\nproxy:\n  endpoints:\n    '/scaleops':\n      target: 'https://your-scaleops-instance.com'\n      changeOrigin: true\n</code></pre>"},{"location":"plugins/scaleops/frontend/install/#4-configure-environment-variables","title":"4. Configure Environment Variables","text":"<p>Set up any required environment variables:</p> <pre><code>export SCALEOPS_USERNAME=your-username\nexport SCALEOPS_PASSWORD=your-password\n</code></pre>"},{"location":"plugins/scaleops/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { scaleopsPlugin } from '@terasky/backstage-plugin-scaleops-frontend/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    scaleopsPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/scaleops/frontend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The ScaleOps dashboard is accessible</li> <li>Cost data is being displayed</li> <li>Authentication is working</li> <li>Links to ScaleOps are functioning</li> </ol>"},{"location":"plugins/scaleops/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Dashboard Not Loading</p> <ul> <li>Check proxy configuration</li> <li>Verify authentication settings</li> <li>Check ScaleOps instance URL</li> <li>Review browser console</li> </ul> </li> <li> <p>Authentication Issues</p> <ul> <li>Verify credentials</li> <li>Check environment variables</li> <li>Review proxy headers</li> <li>Test ScaleOps access</li> </ul> </li> <li> <p>Data Not Displaying</p> <ul> <li>Check API connectivity</li> <li>Verify data availability</li> <li>Review permissions</li> <li>Check entity configuration</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide.</p>"},{"location":"plugins/terraform-scaffolder/overview/","title":"Terraform Scaffolder Plugin","text":"<p>The Terraform Scaffolder plugin for Backstage provides a powerful interface for scaffolding new services and resources using Terraform modules. It enables teams to discover, configure, and use Terraform modules directly within the Backstage Software Templates interface, making infrastructure provisioning a seamless part of the service creation process.</p>"},{"location":"plugins/terraform-scaffolder/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/terraform-scaffolder/overview/#frontend-plugin","title":"Frontend Plugin","text":"<p>The frontend plugin provides a user interface for:</p> <ul> <li>Discovering available Terraform modules from multiple sources</li> <li>Configuring module variables with type-safe inputs</li> <li>Validating module configurations before template execution</li> <li>Displaying module documentation and descriptions</li> <li>Supporting complex variable types (maps, lists, objects)</li> <li>Handling sensitive variables appropriately</li> <li>Managing multiple versions of modules</li> </ul> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/terraform-scaffolder/overview/#key-features","title":"Key Features","text":""},{"location":"plugins/terraform-scaffolder/overview/#module-discovery","title":"Module Discovery","text":"<p>The plugin supports three different ways to discover and list Terraform modules:</p> <ol> <li>Configuration-based Modules: Define modules directly in your <code>app-config.yaml</code></li> <li>Catalog-based Modules: Discover modules from your Backstage catalog</li> <li>Registry-based Modules: Automatically fetch modules from the Terraform Registry</li> </ol>"},{"location":"plugins/terraform-scaffolder/overview/#multi-version-support","title":"Multi-Version Support","text":"<ul> <li>Support for multiple versions of the same module</li> <li>Version selection during template creation</li> <li>Automatic version sorting and latest version detection</li> </ul>"},{"location":"plugins/terraform-scaffolder/overview/#private-repository-support","title":"Private Repository Support","text":"<ul> <li>Built-in support for private GitHub repositories</li> <li>Configurable proxy settings for secure access</li> <li>Token-based authentication handling</li> </ul>"},{"location":"plugins/terraform-scaffolder/overview/#additional-features","title":"Additional Features","text":"<ul> <li>Type-Safe Inputs: Automatic form generation based on module variables</li> <li>Variable Validation: Built-in validation for required fields and type checking</li> <li>Complex Types Support: Support for maps, lists, and nested object variables</li> <li>Sensitive Data Handling: Special handling for sensitive variables</li> <li>Documentation: Integrated display of variable descriptions and module documentation</li> </ul>"},{"location":"plugins/terraform-scaffolder/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the Terraform Scaffolder plugin:</p> <ol> <li>Follow the Installation Guide</li> <li>Configure the plugin using the Configuration Guide</li> <li>Start creating infrastructure through your templates</li> </ol>"},{"location":"plugins/terraform-scaffolder/overview/#documentation-structure","title":"Documentation Structure","text":"<p>Frontend Plugin - About - Learn about the plugin's components and features - Installation - Step-by-step installation guide - Configuration - Detailed configuration options</p>"},{"location":"plugins/terraform-scaffolder/frontend/about/","title":"Terraform Scaffolder Frontend Plugin","text":"<p>The frontend component of the Terraform Scaffolder plugin provides a rich user interface for discovering and configuring Terraform modules within Backstage Software Templates.</p>"},{"location":"plugins/terraform-scaffolder/frontend/about/#components","title":"Components","text":""},{"location":"plugins/terraform-scaffolder/frontend/about/#terraformmoduleform","title":"TerraformModuleForm","text":"<p>The main form component that provides:</p> <ul> <li>Module selection from multiple sources (Config, Catalog, Registry)</li> <li>Version selection for modules with multiple versions</li> <li>Dynamic form generation based on module variables</li> <li>Type-safe input fields for all Terraform variable types</li> <li>Validation of required fields</li> <li>Support for sensitive variables</li> <li>Display of module documentation</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/about/#terraformmoduleschema","title":"TerraformModuleSchema","text":"<p>The schema component that:</p> <ul> <li>Defines the structure of module configurations</li> <li>Validates input against Terraform variable types</li> <li>Handles complex types like maps and lists</li> <li>Provides type definitions for template parameters</li> <li>Supports version-specific schema validation</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/about/#features","title":"Features","text":""},{"location":"plugins/terraform-scaffolder/frontend/about/#module-discovery","title":"Module Discovery","text":"<ul> <li>Multiple module source types:</li> <li>Configuration-based modules</li> <li>Catalog-based modules</li> <li>Registry-based modules</li> <li>Rich module metadata display</li> <li>Module search and filtering</li> <li>Version management and selection</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/about/#version-management","title":"Version Management","text":"<ul> <li>Support for multiple module versions</li> <li>Automatic version sorting and comparison</li> <li>Latest version detection</li> <li>Version-specific variable handling</li> <li>Support for both tags and branches</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/about/#private-repository-support","title":"Private Repository Support","text":"<ul> <li>Secure access to private GitHub repositories</li> <li>Proxy configuration for raw content</li> <li>Token-based authentication</li> <li>Automatic URL rewriting</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/about/#variable-configuration","title":"Variable Configuration","text":"<ul> <li>Automatic form generation based on variables.tf</li> <li>Support for all Terraform variable types:</li> <li>String</li> <li>Number</li> <li>Boolean</li> <li>List</li> <li>Map</li> <li>Complex objects</li> <li>Default value handling</li> <li>Required field validation</li> <li>Sensitive variable handling</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/about/#type-safety","title":"Type Safety","text":"<ul> <li>Runtime type checking</li> <li>Validation before template execution</li> <li>Error messages for invalid inputs</li> <li>Version-specific type validation</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/about/#documentation","title":"Documentation","text":"<ul> <li>Inline variable descriptions</li> <li>Module documentation display</li> <li>Version-specific documentation</li> <li>Usage examples</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/about/#api","title":"API","text":"<p>The plugin provides an enhanced client API for interacting with Terraform modules:</p> <pre><code>interface TerraformScaffolderApi {\n  getModuleReferences(): Promise&lt;TerraformModuleReference[]&gt;;\n  getModuleVersions(moduleRef: TerraformModuleReference): Promise&lt;string[]&gt;;\n  getModuleVariables(moduleRef: TerraformModuleReference, version?: string): Promise&lt;TerraformVariable[]&gt;;\n}\n</code></pre>"},{"location":"plugins/terraform-scaffolder/frontend/about/#types","title":"Types","text":"<pre><code>interface TerraformModuleReference {\n  name: string;\n  url: string;\n  refs?: string[];\n  description?: string;\n  isRegistryModule?: boolean;\n}\n\ninterface TerraformVariable {\n  name: string;\n  type: string;\n  description?: string;\n  default?: any;\n  required: boolean;\n  sensitive: boolean;\n  originalDefinition?: string;\n}\n</code></pre>"},{"location":"plugins/terraform-scaffolder/frontend/about/#integration","title":"Integration","text":"<p>The plugin integrates with Backstage's Software Templates system through:</p> <ol> <li>Custom field extensions</li> <li>Form validation</li> <li>Template parameter processing</li> <li>Configuration API integration</li> <li>Proxy integration for private repositories</li> <li>Catalog integration for module discovery</li> </ol> <p>For installation and configuration details, see the Installation and Configuration guides.</p>"},{"location":"plugins/terraform-scaffolder/frontend/configure/","title":"Configuring the Terraform Scaffolder Plugin","text":"<p>This guide covers the configuration options available for the Terraform Scaffolder plugin.</p>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#module-sources-configuration","title":"Module Sources Configuration","text":"<p>The plugin supports three different ways to configure module sources:</p>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#1-configuration-based-modules","title":"1. Configuration-based Modules","text":"<p>Configure modules directly in your <code>app-config.yaml</code>:</p> <pre><code>terraformScaffolder:\n  # Enable proxy support for private GitHub repositories\n  useProxyForGitHub: true\n\n  moduleReferences:\n    - name: 'AWS ECR Module'\n      url: 'https://github.com/terraform-aws-modules/terraform-aws-ecr'\n      refs:\n        - 'v3.1.0'\n        - 'v3.0.0'\n      description: 'AWS ECR Module'\n\n    # Registry module reference\n    - name: 'VPC Module'\n      url: 'terraform-aws-modules/vpc/aws'  # Registry path format\n      refs:\n        - 'v6.0.1'\n        - 'v6.0.0'\n      description: 'AWS VPC Module'\n</code></pre>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#module-reference-options","title":"Module Reference Options","text":"Field Type Required Description name string Yes Display name for the module url string Yes GitHub URL or registry path refs string[] No List of versions (tags/branches) description string No Module description for UI"},{"location":"plugins/terraform-scaffolder/frontend/configure/#2-catalog-based-modules","title":"2. Catalog-based Modules","text":"<p>Define modules in your Backstage catalog using annotations:</p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Resource\nmetadata:\n  name: my-terraform-module\n  annotations:\n    terasky.backstage.io/terraform-module-url: 'https://github.com/org/module'\n    terasky.backstage.io/terraform-module-name: 'My Module'\n    terasky.backstage.io/terraform-module-ref: 'v1.0.0'\n    terasky.backstage.io/terraform-module-description: 'Description of the module'\nspec:\n  type: terraform-module\n  # ... other spec fields\n</code></pre>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#3-registry-based-modules","title":"3. Registry-based Modules","text":"<p>Configure Terraform Registry integration:</p> <pre><code>terraformScaffolder:\n  registryReferences:\n    returnAllVersions: true  # Fetch all versions for each module\n    namespaces:\n      - terraform-aws-modules\n      - vmware\n</code></pre>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#private-repository-access","title":"Private Repository Access","text":""},{"location":"plugins/terraform-scaffolder/frontend/configure/#github-proxy-configuration","title":"GitHub Proxy Configuration","text":"<p>For private GitHub repositories, configure both the plugin and proxy settings:</p> <ol> <li> <p>Enable proxy in the plugin: <pre><code>terraformScaffolder:\n  useProxyForGitHub: true\n</code></pre></p> </li> <li> <p>Configure the proxy endpoint: <pre><code>proxy:\n  endpoints:\n    '/github-raw':\n      target: 'https://raw.githubusercontent.com'\n      changeOrigin: true\n      headers:\n        Authorization: 'Token ${GITHUB_TOKEN}'\n</code></pre></p> </li> </ol>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#template-configuration","title":"Template Configuration","text":""},{"location":"plugins/terraform-scaffolder/frontend/configure/#basic-field-usage","title":"Basic Field Usage","text":"<pre><code>parameters:\n  - title: Infrastructure\n    properties:\n      infrastructure:\n        title: Terraform Module\n        type: string\n        ui:field: TerraformModule\n</code></pre>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#variable-handling","title":"Variable Handling","text":"<p>The plugin automatically handles different variable types:</p>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#simple-types","title":"Simple Types","text":"<ul> <li>string</li> <li>number</li> <li>boolean</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#complex-types","title":"Complex Types","text":"<ul> <li>list</li> <li>map</li> <li>object</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#sensitive-variables","title":"Sensitive Variables","text":"<p>Variables marked as sensitive in variables.tf are automatically handled:</p> <pre><code>variable \"password\" {\n  type      = string\n  sensitive = true\n}\n</code></pre> <p>These will be: 1. Masked in the UI 2. Treated securely in templates 3. Never logged or displayed</p>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#best-practices","title":"Best Practices","text":""},{"location":"plugins/terraform-scaffolder/frontend/configure/#module-organization","title":"Module Organization","text":"<ul> <li>Use consistent naming conventions</li> <li>Provide clear descriptions</li> <li>Use semantic versioning for refs</li> <li>Group related modules together</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#security","title":"Security","text":"<ul> <li>Use specific refs instead of 'main'</li> <li>Properly mark sensitive variables</li> <li>Use private repositories for sensitive modules</li> <li>Configure proxy settings for private repos</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#version-management","title":"Version Management","text":"<ul> <li>Use semantic versioning for module versions</li> <li>Test modules before adding new versions</li> <li>Keep version lists up to date</li> <li>Document breaking changes between versions</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/configure/#maintenance","title":"Maintenance","text":"<ul> <li>Regular updates of module refs</li> <li>Version tracking</li> <li>Documentation updates</li> <li>Monitor module usage</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/install/","title":"Installing the Terraform Scaffolder Plugin","text":"<p>This guide will help you install and set up the Terraform Scaffolder plugin in your Backstage instance.</p>"},{"location":"plugins/terraform-scaffolder/frontend/install/#prerequisites","title":"Prerequisites","text":"<ul> <li>Backstage application</li> <li>Node.js and npm/yarn</li> <li>Access to Terraform modules (e.g., GitHub repositories, Terraform Registry)</li> <li>GitHub token (if using private repositories)</li> </ul>"},{"location":"plugins/terraform-scaffolder/frontend/install/#installation-steps","title":"Installation Steps","text":"<ol> <li>Install the plugin package:</li> </ol> <pre><code># Using yarn\nyarn --cwd packages/app add @backstage/plugin-terraform-scaffolder\n</code></pre> <ol> <li>Register the plugin in your Backstage app:</li> </ol> <pre><code>// packages/app/src/apis.ts\nimport { terraformScaffolderPlugin } from '@backstage/plugin-terraform-scaffolder';\n\nexport const apis = [\n  // ... other APIs\n  terraformScaffolderPlugin,\n];\n</code></pre> <ol> <li>Configure the plugin in your <code>app-config.yaml</code>:</li> </ol> <pre><code>terraformScaffolder:\n  # Enable proxy support for private GitHub repositories\n  useProxyForGitHub: true\n\n  # Registry module configuration (optional)\n  registryReferences:\n    returnAllVersions: true\n    namespaces:\n      - terraform-aws-modules\n      - vmware\n\n  # Direct module references\n  moduleReferences:\n    - name: 'AWS ECR Module'\n      url: 'https://github.com/terraform-aws-modules/terraform-aws-ecr'\n      refs:\n        - 'v3.1.0'\n      description: 'AWS ECR Module'\n</code></pre> <ol> <li>If using private GitHub repositories, configure the proxy:</li> </ol> <pre><code>proxy:\n  endpoints:\n    '/github-raw':\n      target: 'https://raw.githubusercontent.com'\n      changeOrigin: true\n      headers:\n        Authorization: 'Token ${GITHUB_TOKEN}'\n</code></pre> <ol> <li>Add the field extension to your template:</li> </ol> <pre><code>apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: terraform-infrastructure\n  title: Create Infrastructure\nspec:\n  parameters:\n    - title: Infrastructure\n      properties:\n        infrastructure:\n          title: Terraform Module\n          type: string\n          ui:field: TerraformModule\n</code></pre>"},{"location":"plugins/terraform-scaffolder/frontend/install/#verification","title":"Verification","text":"<p>To verify the installation:</p> <ol> <li>Navigate to your software templates</li> <li>Create a new component using a template with the TerraformModule field</li> <li>Verify that you can:</li> <li>Select from available modules</li> <li>Choose module versions</li> <li>Configure module variables</li> <li>See validation messages</li> <li>Submit the form successfully</li> <li>Access private repositories (if configured)</li> </ol>"},{"location":"plugins/terraform-scaffolder/frontend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Module Not Found</li> <li>Check module URL in app-config.yaml</li> <li>Verify GitHub access permissions</li> <li>Check module ref/branch exists</li> <li> <p>Verify registry namespace configuration</p> </li> <li> <p>Private Repository Access</p> </li> <li>Check GitHub token permissions</li> <li>Verify proxy configuration</li> <li>Ensure useProxyForGitHub is enabled</li> <li> <p>Check proxy endpoint headers</p> </li> <li> <p>Type Errors</p> </li> <li>Ensure all required API dependencies are installed</li> <li>Check for version mismatches</li> <li> <p>Verify type definitions in variables.tf</p> </li> <li> <p>Form Validation Errors</p> </li> <li>Verify variables.tf exists in module</li> <li>Check variable type definitions</li> <li>Ensure version references are correct</li> </ol>"},{"location":"plugins/terraform-scaffolder/frontend/install/#next-steps","title":"Next Steps","text":"<p>After installation:</p> <ol> <li>Configure your module sources:</li> <li>Add configuration-based modules</li> <li>Set up catalog-based modules</li> <li> <p>Configure registry integration</p> </li> <li> <p>Set up security:</p> </li> <li>Configure private repository access</li> <li>Set up proxy settings</li> <li> <p>Manage GitHub tokens</p> </li> <li> <p>Create and test templates:</p> </li> <li>Create templates using the TerraformModule field</li> <li>Test with different module versions</li> <li> <p>Verify variable handling</p> </li> <li> <p>Plan for production:</p> </li> <li>Set up CI/CD for your Terraform deployments</li> <li>Document module usage</li> <li>Plan version management strategy</li> </ol> <p>For detailed configuration options, see the Configuration guide.</p>"},{"location":"plugins/vcf-automation/overview/","title":"VCF Automation Plugins","text":"<p>The VCF Automation plugins provide comprehensive visibility and management capabilities for VMware Cloud Foundation (VCF) deployments within Backstage. It enables teams to monitor deployments, manage resources, and oversee project configurations through an intuitive interface. The plugins support Aria Automation 8.x as well as VCF Automation 9.x, including both vm-apps (classic) and all-apps organization types.</p>"},{"location":"plugins/vcf-automation/overview/#features","title":"Features","text":"<ul> <li>Deployment Monitoring: Track VCF deployment status and operations</li> <li>Resource Management: Manage vSphere VMs and other VCF resources including CCI Supervisor resources</li> <li>Project Configuration: Configure and monitor VCF projects across different organization types</li> <li>CCI Support: Full support for Cloud Consuption Interface (CCI) Supervisor namespaces and resources</li> <li>Multi-Organization Type: Support for both vm-apps (classic) and all-apps organization models in VCF 9</li> <li>Permission Controls: Fine-grained access control integration</li> <li>Entity Integration: Seamless catalog entity synchronization with proper entity relationships</li> <li>Status Tracking: Real-time deployment and resource status with live Kubernetes object monitoring</li> <li>YAML Visualization: Beautiful syntax-highlighted YAML rendering for Kubernetes manifests</li> <li>YAML Editing: Interactive YAML editing capabilities for CCI Supervisor resources with Monaco Editor</li> </ul>"},{"location":"plugins/vcf-automation/overview/#screenshots","title":"Screenshots","text":""},{"location":"plugins/vcf-automation/overview/#project-overview","title":"Project Overview","text":""},{"location":"plugins/vcf-automation/overview/#project-details","title":"Project Details","text":""},{"location":"plugins/vcf-automation/overview/#deployment-overview","title":"Deployment Overview","text":""},{"location":"plugins/vcf-automation/overview/#deployment-details","title":"Deployment Details","text":""},{"location":"plugins/vcf-automation/overview/#vsphere-vm-overview-vcfa-8-and-vm-apps-orgs-in-vcfa-9","title":"vSphere VM Overview (VCFA 8 and VM Apps orgs in VCFA 9)","text":""},{"location":"plugins/vcf-automation/overview/#vsphere-vm-details-vcfa-8-and-vm-apps-orgs-in-vcfa-9","title":"vSphere VM Details (VCFA 8 and VM Apps orgs in VCFA 9)","text":""},{"location":"plugins/vcf-automation/overview/#resource-overview-vcfa-8-and-vm-apps-orgs-in-vcfa-9","title":"Resource Overview (VCFA 8 and VM Apps orgs in VCFA 9)","text":""},{"location":"plugins/vcf-automation/overview/#resource-details-vcfa-8-and-vm-apps-orgs-in-vcfa-9","title":"Resource Details (VCFA 8 and VM Apps orgs in VCFA 9)","text":""},{"location":"plugins/vcf-automation/overview/#cci-supervisor-namespace-overview-vcfa-9-all-apps-orgs","title":"CCI Supervisor Namespace Overview (VCFA 9 All Apps Orgs)","text":""},{"location":"plugins/vcf-automation/overview/#cci-supervisor-namespace-details-vcfa-9-all-apps-orgs","title":"CCI Supervisor Namespace Details (VCFA 9 All Apps Orgs)","text":""},{"location":"plugins/vcf-automation/overview/#cci-supervisor-resource-overview-vcfa-9-all-apps-orgs","title":"CCI Supervisor Resource Overview (VCFA 9 All Apps Orgs)","text":""},{"location":"plugins/vcf-automation/overview/#cci-supervisor-resource-details-vcfa-9-all-apps-orgs","title":"CCI Supervisor Resource Details (VCFA 9 All Apps Orgs)","text":""},{"location":"plugins/vcf-automation/overview/#basic-information","title":"Basic Information","text":""},{"location":"plugins/vcf-automation/overview/#manifest-details","title":"Manifest Details","text":""},{"location":"plugins/vcf-automation/overview/#object-status","title":"Object Status","text":""},{"location":"plugins/vcf-automation/overview/#resource-conditions","title":"Resource Conditions","text":""},{"location":"plugins/vcf-automation/overview/#defined-resource-manifest","title":"Defined Resource Manifest","text":""},{"location":"plugins/vcf-automation/overview/#live-kubernetes-object-manifest","title":"Live Kubernetes Object Manifest","text":""},{"location":"plugins/vcf-automation/overview/#cci-supervisor-resource-yaml-editing-vcfa-9-all-apps-orgs","title":"CCI Supervisor Resource YAML Editing (VCFA 9 All Apps Orgs)","text":"<p>The VCF Automation plugin provides powerful YAML editing capabilities for CCI Supervisor resources, allowing users to directly modify Kubernetes resource manifests through a professional Monaco Editor interface.</p>"},{"location":"plugins/vcf-automation/overview/#edit-resource-manifest-button-overview-page","title":"Edit Resource Manifest Button (Overview Page)","text":"<p>For CCI resources (both standalone and deployment-managed) with proper permissions, an \"Edit Resource Manifest\" button appears in the resource overview page, providing quick access to the YAML editor modal.</p>"},{"location":"plugins/vcf-automation/overview/#yaml-editor-modal-overview-page","title":"YAML Editor Modal (Overview Page)","text":"<p> The modal includes: - Monaco Editor: Professional code editor with YAML syntax highlighting - Real-time Validation: Live YAML syntax validation with error feedback - Fixed Status Bar: Validation status remains visible at the bottom - Save Confirmation: Confirmation dialog before applying changes</p>"},{"location":"plugins/vcf-automation/overview/#edit-manifest-tab-details-page","title":"Edit Manifest Tab (Details Page)","text":"<p> The dedicated \"Edit Manifest\" tab provides: - Integrated Editor: Monaco Editor embedded directly in the details page - Auto-loading: Manifest automatically loads when tab is selected - Full-height Editor: Optimized for comfortable editing experience - Inline Actions: Save and Cancel buttons within the tab interface</p>"},{"location":"plugins/vcf-automation/overview/#plugin-components","title":"Plugin Components","text":""},{"location":"plugins/vcf-automation/overview/#frontend-plugin","title":"Frontend Plugin","text":"<p>The plugin provides frontend components for: - Deployment visualization - Resource management - Project configuration - Status monitoring  </p> <p>Learn more about the frontend plugin</p>"},{"location":"plugins/vcf-automation/overview/#backend-plugin","title":"Backend Plugin","text":"<p>The plugin provides a backend deployment that: - Handles API integration - Manages permissions - Processes operations - Tracks resources  </p> <p>Learn more about the backend plugin</p>"},{"location":"plugins/vcf-automation/overview/#ingestor-plugin","title":"Ingestor Plugin","text":"<p>The plugin provides a backend that: - Discovers entities in your VCF Automation environment - Generates the relevant Backstage entities to represent the VCF Automation resources - Adds required metadata to the generated entities to allow the frontend plugin to pull runtime data - Adds, updates and deletes the entities in the Backstage catalog based on the current state in VCF Automation</p> <p>Learn more about the ingestor plugin</p>"},{"location":"plugins/vcf-automation/overview/#available-components","title":"Available Components","text":""},{"location":"plugins/vcf-automation/overview/#deployment-components","title":"Deployment Components","text":"<ul> <li><code>VCFAutomationDeploymentOverview</code>: High-level deployment status</li> <li><code>VCFAutomationDeploymentDetails</code>: Detailed deployment information</li> </ul>"},{"location":"plugins/vcf-automation/overview/#vm-components","title":"VM Components","text":"<ul> <li><code>VCFAutomationVSphereVMOverview</code>: VM status overview</li> <li><code>VCFAutomationVSphereVMDetails</code>: Detailed VM configuration</li> </ul>"},{"location":"plugins/vcf-automation/overview/#resource-components","title":"Resource Components","text":"<ul> <li><code>VCFAutomationGenericResourceOverview</code>: Resource status</li> <li><code>VCFAutomationGenericResourceDetails</code>: Resource configuration</li> </ul>"},{"location":"plugins/vcf-automation/overview/#project-components","title":"Project Components","text":"<ul> <li><code>VCFAutomationProjectOverview</code>: Project status overview (supports both vm-apps and all-apps)</li> <li><code>VCFAutomationProjectDetails</code>: Project configuration details (supports both vm-apps and all-apps)</li> </ul>"},{"location":"plugins/vcf-automation/overview/#cci-components-new","title":"CCI Components (New)","text":"<ul> <li><code>VCFAutomationCCINamespaceOverview</code>: CCI Supervisor Namespace overview with VM classes, storage classes, and zones</li> <li><code>VCFAutomationCCINamespaceDetails</code>: Detailed CCI Supervisor Namespace information with status tables</li> <li><code>VCFAutomationCCIResourceOverview</code>: CCI Supervisor Resource overview with manifest and object data, including YAML editing modal</li> <li><code>VCFAutomationCCIResourceDetails</code>: Detailed CCI Supervisor Resource with tabbed views, YAML rendering, and integrated YAML editor tab</li> </ul>"},{"location":"plugins/vcf-automation/overview/#entity-types-created","title":"Entity Types Created","text":"<p>The ingestor creates the following Backstage entity types:</p> <ul> <li>Domain: VCF Projects (with project-specific external links)</li> <li>System: VCF Deployments (with deployment-specific external links)</li> <li>Component: </li> <li>vSphere Virtual Machines (Cloud.vSphere.Machine)</li> <li>CCI Supervisor Namespaces (CCI.Supervisor.Namespace)</li> <li>CCI Supervisor Resources (CCI.Supervisor.Resource)</li> <li>Resource: Other VCF resources (generic resources)</li> </ul>"},{"location":"plugins/vcf-automation/overview/#entity-relationships","title":"Entity Relationships","text":"<ul> <li>CCI Supervisor Resources are marked as <code>subcomponentOf</code> their parent CCI Supervisor Namespace</li> <li>Deployments belong to their parent Project domain</li> <li>Resources are part of their parent Deployment system</li> <li>Dependencies are properly tracked between resources using <code>dependsOn</code> relationships</li> </ul>"},{"location":"plugins/vcf-automation/overview/#prerequisites","title":"Prerequisites","text":"<p>Before getting started, ensure you have:</p> <ol> <li>VCF Automation Backend Plugin installed</li> <li>VCF Ingestor Plugin configured</li> <li>Access to VCF deployments</li> <li>Proper permissions setup</li> </ol>"},{"location":"plugins/vcf-automation/overview/#mcp-actions-integration","title":"MCP Actions Integration","text":"<p>The VCF Automation plugin provides MCP (Model Control Protocol) actions for interacting with VCF Automation resources. To enable these actions:</p> <ol> <li> <p>First, ensure you have the MCP actions backend plugin installed and configured. See the MCP Actions Backend Plugin documentation for setup instructions.</p> </li> <li> <p>Add the plugin to your actions configuration in <code>app-config.yaml</code>:</p> </li> </ol> <pre><code>backend:\n  actions:\n    pluginSources:\n      - 'catalog'\n      - 'vcf-automation'\n      # ... other action sources\n</code></pre>"},{"location":"plugins/vcf-automation/overview/#available-mcp-actions","title":"Available MCP Actions","text":"<p>The plugin provides the following MCP actions:</p> <ul> <li><code>get_vcf_automation_instances</code>: Get configured VCF Automation instances</li> <li>Input: None</li> <li> <p>Output: List of VCFA instances with their configurations</p> </li> <li> <p><code>get_vcf_automation_projects</code>: List projects in a VCF Automation instance</p> </li> <li>Input: Optional instance name</li> <li> <p>Output: List of projects with IDs and names</p> </li> <li> <p><code>get_vcf_automation_project_details</code>: Get detailed project information</p> </li> <li>Input: Project ID and optional instance name</li> <li> <p>Output: Full project details</p> </li> <li> <p><code>get_supervisor_namespaces_from_vcf_automation</code>: List supervisor namespaces</p> </li> <li>Input: Optional instance name</li> <li> <p>Output: List of supervisor namespaces</p> </li> <li> <p><code>get_supervisor_namespace_from_vcf_automation</code>: Get namespace details</p> </li> <li>Input: Namespace ID and optional instance name</li> <li> <p>Output: Full namespace details</p> </li> <li> <p><code>get_vcf_automation_deployments</code>: List all deployments</p> </li> <li>Input: Optional instance name</li> <li> <p>Output: List of deployments</p> </li> <li> <p><code>get_vcf_automation_deployment_details</code>: Get deployment details</p> </li> <li>Input: Deployment ID and optional instance name</li> <li> <p>Output: Deployment details, history, events, and resources</p> </li> <li> <p><code>vm_power_action_from_vcf_automation</code>: Execute VM power actions</p> </li> <li>Input: Action type, VM details, and optional instance name</li> <li> <p>Output: Operation status and details</p> </li> <li> <p><code>get_resource_details_from_vcf_automation</code>: Get resource details</p> </li> <li>Input: Deployment ID, resource ID, and optional instance name</li> <li> <p>Output: Full resource details</p> </li> <li> <p><code>get_supervisor_resources_from_vcf_automation</code>: List supervisor resources</p> </li> <li>Input: Optional instance name</li> <li> <p>Output: List of supervisor resources</p> </li> <li> <p><code>get_supervisor_resource_from_vcf_automation</code>: Get supervisor resource details</p> </li> <li>Input: Resource ID and optional instance name</li> <li> <p>Output: Full resource details</p> </li> <li> <p><code>get_vcf_automation_supervisor_resource_manifest</code>: Get resource manifest</p> </li> <li>Input: Resource details and optional instance name</li> <li> <p>Output: Resource manifest</p> </li> <li> <p><code>update_vcf_automation_supervisor_resource_manifest</code>: Update resource manifest</p> </li> <li>Input: Resource details, new manifest, and optional instance name</li> <li>Output: Updated manifest and operation status</li> </ul>"},{"location":"plugins/vcf-automation/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the VCF Automation plugin:</p> <ol> <li>Install frontend and backend plugins</li> <li>Configure API integration</li> <li>Set up entity synchronization</li> <li>Configure permissions</li> <li>Configure MCP actions in your app-config.yaml</li> <li>Add components to entity pages</li> </ol> <p>For detailed installation and configuration instructions, refer to the frontend and backend documentation linked above.</p>"},{"location":"plugins/vcf-automation/backend/about/","title":"VCF Automation Backend Plugin","text":""},{"location":"plugins/vcf-automation/backend/about/#overview","title":"Overview","text":"<p>The VCF Automation backend plugin provides the backend services required for the VCF Automation frontend plugin. It handles API integration with VCF services, manages permissions, and processes deployment and resource operations.</p>"},{"location":"plugins/vcf-automation/backend/about/#features","title":"Features","text":""},{"location":"plugins/vcf-automation/backend/about/#api-integration","title":"API Integration","text":"<ul> <li>Seamless integration with VCF Automation services</li> <li>API endpoint management</li> <li>Service communication</li> </ul>"},{"location":"plugins/vcf-automation/backend/about/#permission-management","title":"Permission Management","text":"<ul> <li>Built-in support for Backstage's permission framework</li> <li>Access control management</li> <li>Resource authorization</li> </ul>"},{"location":"plugins/vcf-automation/backend/about/#entity-processing","title":"Entity Processing","text":"<ul> <li>Entity relationship mapping</li> <li>Entity updates</li> <li>State management</li> </ul>"},{"location":"plugins/vcf-automation/backend/about/#operation-management","title":"Operation Management","text":"<ul> <li>Deployment operations</li> <li>Resource management</li> <li>Operation processing</li> </ul>"},{"location":"plugins/vcf-automation/backend/about/#event-handling","title":"Event Handling","text":"<ul> <li>VCF events management</li> <li>Event streaming</li> <li>Notification handling</li> </ul>"},{"location":"plugins/vcf-automation/backend/about/#api-endpoints","title":"API Endpoints","text":"<p>The plugin exposes the following endpoints:</p> <pre><code>// Get deployment details\nGET /api/vcf-automation/deployments/:id\n\n// Get resource details\nGET /api/vcf-automation/resources/:id\n\n// Get project details\nGET /api/vcf-automation/projects/:id\n\n// Execute deployment operations\nPOST /api/vcf-automation/deployments/:id/operations\n\n// Stream VCF events\nGET /api/vcf-automation/events\n</code></pre>"},{"location":"plugins/vcf-automation/backend/about/#links","title":"Links","text":"<ul> <li>Installation Guide</li> <li>Configuration Guide</li> </ul>"},{"location":"plugins/vcf-automation/backend/configure/","title":"Configuring the VCF Automation Backend Plugin","text":"<p>This guide covers the configuration options available for the VCF Automation backend plugin.</p>"},{"location":"plugins/vcf-automation/backend/configure/#configuration-file","title":"Configuration File","text":"<p>The plugin is configured through your <code>app-config.yaml</code>. Here's the basic configuration:</p> <pre><code>vcfAutomation:\n  name: my-vcf-01\n  majorVersion: 9\n  orgName: my-org # This is needed only in VCFA 9 and above\n  organizationType: 'all-apps' # Options: 'vm-apps' (default) or 'all-apps' for VCF 9 organization types\n  baseUrl: 'https://your-vcf-automation-instance'\n  authentication:\n    username: 'your-username'\n    password: 'your-password'\n</code></pre> <p>The plugin does support multi instance config in the following format:</p> <pre><code>vcfAutomation:\n  instances:\n  - name: my-vcf-01\n    baseUrl: 'https://your-vcf-automation-instance'\n    majorVersion: 8\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n      domain: 'your-domain'\n  - name: my-vcf-02\n    baseUrl: 'https://your-vcf-02-automation-instance'\n    majorVersion: 9\n    orgName: my-org # This is needed only in VCFA 9 and above\n    organizationType: 'all-apps' # Options: 'vm-apps' (default) or 'all-apps' for VCF 9 organization types\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n</code></pre>"},{"location":"plugins/vcf-automation/backend/configure/#api-endpoints","title":"API Endpoints","text":"<p>The plugin exposes the following endpoints:</p> <ul> <li><code>GET /api/vcf-automation/deployments/:id</code> - Get deployment details</li> <li><code>GET /api/vcf-automation/resources/:id</code> - Get resource details</li> <li><code>GET /api/vcf-automation/projects/:id</code> - Get project details</li> <li><code>GET /api/vcf-automation/projects</code> - Get all projects</li> <li><code>GET /api/vcf-automation/deployments</code> - Get all deployments</li> <li><code>GET /api/vcf-automation/deployments/:id/resources</code> - Get all resources for a deployment</li> <li><code>POST /api/vcf-automation/deployments/:id/operations</code> - Execute deployment operations</li> <li><code>GET /api/vcf-automation/events</code> - Stream VCF events</li> <li><code>GET /api/vcf-automation/supervisor-resources</code> - List all supervisor resources (paginated)</li> <li><code>GET /api/vcf-automation/supervisor-resources/:id</code> - Get specific supervisor resource details</li> <li><code>GET /api/vcf-automation/supervisor-namespaces</code> - List all supervisor namespaces</li> <li><code>GET /api/vcf-automation/supervisor-namespaces/:id</code> - Get specific supervisor namespace details</li> <li><code>GET /api/vcf-automation/resources/:resourceId/power-actions/:action</code> - Check VM power action validity (deployment-managed)</li> <li><code>POST /api/vcf-automation/resources/:resourceId/power-actions/:action</code> - Execute VM power action (deployment-managed)</li> <li><code>GET /api/vcf-automation/standalone-vms/:namespaceUrnId/:namespaceName/:vmName/status</code> - Get standalone VM status</li> <li><code>PUT /api/vcf-automation/standalone-vms/:namespaceUrnId/:namespaceName/:vmName/power-state</code> - Update standalone VM power state</li> </ul> <p>Note: VM power management requires the <code>vcf-automation.vm-power-management.run</code> permission, which is defined in the <code>vcf-automation-common</code> plugin.</p>"},{"location":"plugins/vcf-automation/backend/configure/#links","title":"Links","text":"<ul> <li>Installation Guide</li> <li>About the plugin</li> </ul>"},{"location":"plugins/vcf-automation/backend/install/","title":"Installing the VCF Automation Backend Plugin","text":"<p>This guide will help you install and set up the VCF Automation backend plugin in your Backstage instance.</p>"},{"location":"plugins/vcf-automation/backend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing the plugin, ensure you have:</p> <ol> <li>A running Backstage backend instance</li> <li>Access to a VCF Automation service</li> <li>VCF Ingestor Plugin - Required for entity synchronization</li> </ol>"},{"location":"plugins/vcf-automation/backend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/vcf-automation/backend/install/#1-add-the-package","title":"1. Add the Package","text":"<p>Install the plugin package using yarn:</p> <pre><code>yarn --cwd packages/backend add @terasky/backstage-plugin-vcf-automation-backend\n</code></pre>"},{"location":"plugins/vcf-automation/backend/install/#2-add-to-backend","title":"2. Add to Backend","text":"<p>Modify your backend in <code>packages/backend/src/index.ts</code>:</p> <pre><code>import { createBackend } from '@backstage/backend-defaults';\n\nconst backend = createBackend();\n\n// Add the VCF Automation backend plugin\nbackend.add(import('@terasky/plugin-vcf-automation-backend'));\n\nbackend.start();\n</code></pre>"},{"location":"plugins/vcf-automation/backend/install/#3-configure-authentication","title":"3. Configure Authentication","text":"<p>Add authentication configuration to your <code>app-config.yaml</code>:</p> <p>Single Instance: <pre><code>vcfAutomation:\n  baseUrl: 'https://your-vcf-automation-instance'\n  name: demo\n  majorVersion: 8\n  authentication:\n    username: 'your-username'\n    password: 'your-password'\n    domain: 'your-domain'\n</code></pre></p> <p>Multi Instance: <pre><code>vcfAutomation:\n  instances:\n  - name: my-vcf-01\n    baseUrl: 'https://your-vcf-automation-instance'\n    majorVersion: 9\n    orgName: my-org # This is needed only in VCFA 9 and above\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n  - name: my-vcf-02\n    baseUrl: 'https://your-vcf-02-automation-instance'\n    majorVersion: 8\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n      domain: 'your-domain'\n</code></pre></p>"},{"location":"plugins/vcf-automation/backend/install/#whats-next","title":"What's Next?","text":"<ul> <li>Configure the plugin</li> <li>Learn about the plugin's features</li> </ul>"},{"location":"plugins/vcf-automation/backend/install/#verification","title":"Verification","text":"<p>After installation, verify that:</p> <ol> <li>The plugin appears in your package.json dependencies</li> <li>The backend starts without errors</li> <li>API endpoints are accessible</li> <li>Authentication is working</li> <li>Permissions are enforced</li> </ol>"},{"location":"plugins/vcf-automation/backend/install/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Authentication Issues</p> <ul> <li>Verify credentials</li> <li>Check environment variables</li> <li>Test VCF service access</li> <li>Review error logs</li> </ul> </li> <li> <p>API Connection Problems</p> <ul> <li>Check service URL</li> <li>Verify network access</li> <li>Review proxy settings</li> <li>Test API endpoints</li> </ul> </li> <li> <p>Permission Errors</p> <ul> <li>Check role configuration</li> <li>Verify user permissions</li> <li>Review access policies</li> <li>Test with admin account</li> </ul> </li> <li> <p>Event Streaming Issues</p> <ul> <li>Check WebSocket connection</li> <li>Verify event subscription</li> <li>Review stream configuration</li> <li>Test event flow</li> </ul> </li> </ol> <p>For configuration options and customization, proceed to the Configuration Guide.</p>"},{"location":"plugins/vcf-automation/frontend/about/","title":"VCF Automation Frontend Plugin","text":""},{"location":"plugins/vcf-automation/frontend/about/#overview","title":"Overview","text":"<p>The VCF Automation plugin for Backstage provides visibility into VCF deployments, resources, and projects. It offers detailed views of deployment operations, resource states, and project configurations. The plugin integrates with Backstage's permission framework to ensure secure access control.</p>"},{"location":"plugins/vcf-automation/frontend/about/#features","title":"Features","text":""},{"location":"plugins/vcf-automation/frontend/about/#vsphere-vm-management","title":"VSphere VM Management","text":"<ul> <li>Detailed view of VM configurations and status</li> <li>VM monitoring and overview</li> <li>Configuration management</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#deployment-operations","title":"Deployment Operations","text":"<ul> <li>Track deployment status and history</li> <li>Deployment overview and details</li> <li>Operation monitoring</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#resource-management","title":"Resource Management","text":"<ul> <li>Monitor various VCF resource types</li> <li>Resource configuration views</li> <li>Status tracking</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#project-administration","title":"Project Administration","text":"<ul> <li>Manage VCF project settings</li> <li>Resource organization</li> <li>Project overview and details</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#permission-integration","title":"Permission Integration","text":"<ul> <li>Built-in support for Backstage's permission framework</li> <li>Secure access control</li> <li>Role-based permissions</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#cci-supervisor-resource-management","title":"CCI Supervisor Resource Management","text":"<ul> <li>Interactive YAML editing for standalone CCI resources</li> <li>Monaco Editor integration with syntax highlighting</li> <li>Real-time YAML validation and error feedback</li> <li>Modal and tab-based editing interfaces</li> <li>Permission-controlled access to editing capabilities</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#components","title":"Components","text":"<p>The plugin provides several components for different entity types:</p>"},{"location":"plugins/vcf-automation/frontend/about/#project-domain-components","title":"Project (Domain) Components","text":"<ul> <li><code>VCFAutomationProjectOverview</code>: High-level project summary</li> <li><code>VCFAutomationProjectDetails</code>: Detailed project information</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#deployment-components","title":"Deployment Components","text":"<ul> <li><code>VCFAutomationDeploymentOverview</code>: Quick deployment status</li> <li><code>VCFAutomationDeploymentDetails</code>: In-depth deployment information</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#vsphere-vm-components","title":"VSphere VM Components","text":"<ul> <li><code>VCFAutomationVSphereVMOverview</code>: VM status overview</li> <li><code>VCFAutomationVSphereVMDetails</code>: Detailed VM configurations</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#generic-resource-components","title":"Generic Resource Components","text":"<ul> <li><code>VCFAutomationGenericResourceOverview</code>: Resource summary</li> <li><code>VCFAutomationGenericResourceDetails</code>: Detailed resource information</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#cci-supervisor-components","title":"CCI Supervisor Components","text":"<ul> <li><code>VCFAutomationCCINamespaceOverview</code>: CCI Supervisor Namespace overview with resource summaries</li> <li><code>VCFAutomationCCINamespaceDetails</code>: Detailed CCI Supervisor Namespace configuration and status</li> <li><code>VCFAutomationCCIResourceOverview</code>: CCI Supervisor Resource overview with YAML editing modal</li> <li><code>VCFAutomationCCIResourceDetails</code>: Detailed CCI Supervisor Resource with integrated YAML editor tab</li> </ul>"},{"location":"plugins/vcf-automation/frontend/about/#entity-integration","title":"Entity Integration","text":"<p>The plugin integrates with the following entity types:</p>"},{"location":"plugins/vcf-automation/frontend/about/#vsphere-vm-component","title":"VSphere VM Component","text":"<pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: my-vm\nspec:\n  type: Cloud.vSphere.Machine\n  system: my-deployment  # References parent deployment\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/about/#vcf-deployment","title":"VCF Deployment","text":"<pre><code>apiVersion: backstage.io/v1alpha1\nkind: System\nmetadata:\n  name: my-deployment\n  annotations:\n    terasky.backstage.io/vcf-automation-deployment-status: 'true'\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/about/#generic-resource","title":"Generic Resource","text":"<pre><code>apiVersion: backstage.io/v1alpha1\nkind: Resource\nmetadata:\n  name: my-resource\n  annotations:\n    terasky.backstage.io/vcf-automation-resource-type: 'network'\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/about/#project-domain","title":"Project (Domain)","text":"<pre><code>apiVersion: backstage.io/v1alpha1\nkind: Domain\nmetadata:\n  name: my-project\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/about/#cci-supervisor-namespace-component","title":"CCI Supervisor Namespace Component","text":"<pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: my-cci-namespace\n  annotations:\n    terasky.backstage.io/vcf-automation-resource-origin: 'STANDALONE'\nspec:\n  type: CCI.Supervisor.Namespace\n  domain: my-project  # References parent project\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/about/#cci-supervisor-resource-component","title":"CCI Supervisor Resource Component","text":"<pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: my-cci-resource\n  annotations:\n    terasky.backstage.io/vcf-automation-resource-origin: 'STANDALONE'\n    terasky.backstage.io/vcf-automation-cci-resource-manifest: '{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",...}'\n    terasky.backstage.io/vcf-automation-cci-resource-object: '{\"apiVersion\":\"v1\",\"kind\":\"ConfigMap\",...}'\nspec:\n  type: CCI.Supervisor.Resource\n  subcomponentOf: my-cci-namespace  # References parent namespace\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/about/#links","title":"Links","text":"<ul> <li>Installation Guide</li> <li>Configuration Guide</li> </ul>"},{"location":"plugins/vcf-automation/frontend/configure/","title":"Configuring the VCF Automation Frontend Plugin","text":"<p>This guide covers the configuration options available for the VCF Automation frontend plugin.</p>"},{"location":"plugins/vcf-automation/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The configuration in <code>app-config.yaml</code> is still respected as described below.</p>"},{"location":"plugins/vcf-automation/frontend/configure/#configuration","title":"Configuration","text":"<p>Add the following to your <code>app-config.yaml</code>:  </p> <p>Single Instance: <pre><code>vcfAutomation:\n  name: my-vcf-01\n  baseUrl: http://your-vcf-automation-service\n  majorVersion: 9 # 8 or 9 supported\n  orgName: my-org # Required for VCF 9\n  organizationType: 'all-apps' # Options: 'vm-apps' (default) or 'all-apps' for VCF 9\n  # Enable permission checks\n  enablePermissions: true\n  # Auth details\n  authentication:\n    username: 'your-username'\n    password: 'your-password'\n    domain: 'your-domain' # Required for Aria Automation 8.x\n</code></pre></p> <p>Multi Instance: <pre><code>vcfAutomation:\n  enablePermissions: true\n  instances:\n  - name: my-vcf-01\n    baseUrl: 'https://your-vcf-automation-instance'\n    majorVersion: 8\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n      domain: 'your-domain'\n  - name: my-vcf-02\n    baseUrl: 'https://your-vcf-02-automation-instance'\n    majorVersion: 9\n    orgName: my-org # Required for VCF 9\n    organizationType: 'all-apps' # Options: 'vm-apps' (default) or 'all-apps' for VCF 9\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n</code></pre></p>"},{"location":"plugins/vcf-automation/frontend/configure/#links","title":"Links","text":"<ul> <li>Installation Guide</li> <li>About the plugin</li> </ul>"},{"location":"plugins/vcf-automation/frontend/configure/#configuration-file","title":"Configuration File","text":"<p>The plugin is configured through your <code>app-config.yaml</code>. Here's a comprehensive example:</p> <pre><code>vcfAutomation:\n  enablePermissions: true\n  instances:\n  - name: my-vcf-01\n    baseUrl: 'https://your-vcf-automation-instance'\n    majorVersion: 8\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n      domain: 'your-domain'\n  - name: my-vcf-02\n    baseUrl: 'https://your-vcf-02-automation-instance'\n    majorVersion: 9\n    orgName: my-org # Required for VCF 9\n    organizationType: 'all-apps' # Options: 'vm-apps' (default) or 'all-apps' for VCF 9\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/configure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Component Configuration</p> <ul> <li>Set appropriate refresh intervals</li> <li>Handle errors gracefully</li> <li>Use consistent styling</li> <li>Implement proper validation</li> </ul> </li> <li> <p>Permission Management</p> <ul> <li>Define clear role boundaries</li> <li>Implement least privilege</li> <li>Document access levels</li> <li>Regular permission audits</li> </ul> </li> <li> <p>Performance Optimization</p> <ul> <li>Cache API responses</li> <li>Minimize refresh frequency</li> <li>Implement error boundaries</li> <li>Monitor resource usage</li> </ul> </li> <li> <p>Security</p> <ul> <li>Use secure tokens</li> <li>Implement HTTPS</li> <li>Validate input data</li> <li>Regular security audits</li> </ul> </li> </ol>"},{"location":"plugins/vcf-automation/frontend/configure/#cci-supervisor-resource-yaml-editing","title":"CCI Supervisor Resource YAML Editing","text":"<p>The VCF Automation plugin provides powerful YAML editing capabilities for CCI Supervisor resources in VCF Automation 9.x with all-apps organization types. This feature allows users to directly modify Kubernetes resource manifests through an integrated Monaco Editor.</p>"},{"location":"plugins/vcf-automation/frontend/configure/#prerequisites","title":"Prerequisites","text":"<ul> <li>VCF Automation 9.x environment with all-apps organization type</li> <li>CCI Supervisor resources (both standalone and deployment-managed resources are supported)</li> <li>User must have the <code>vcf-automation.supervisor-resource.edit</code> permission</li> </ul>"},{"location":"plugins/vcf-automation/frontend/configure/#permission-configuration","title":"Permission Configuration","text":"<p>To enable YAML editing functionality, ensure the <code>vcf-automation.supervisor-resource.edit</code> permission is properly configured in your permission system:</p> <pre><code>// In your permission policy\nimport { supervisorResourceEditPermission } from '@terasky/backstage-plugin-vcf-automation-common';\n\n// Allow specific users/roles to edit CCI resources\nconst policy: PermissionPolicy = {\n  handle: async (request, user) =&gt; {\n    if (isPermission(request.permission, supervisorResourceEditPermission)) {\n      // Add your authorization logic here\n      return { result: AuthorizeResult.ALLOW };\n    }\n    // ... other permissions\n  },\n};\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/configure/#features","title":"Features","text":""},{"location":"plugins/vcf-automation/frontend/configure/#1-resource-overview-modal-editor","title":"1. Resource Overview Modal Editor","text":"<ul> <li>Location: CCI Supervisor Resource Overview page</li> <li>Trigger: \"Edit Resource Manifest\" button (appears when user has permissions)</li> <li>Interface: Full-screen modal with Monaco Editor</li> <li>Features: </li> <li>YAML syntax highlighting</li> <li>Real-time validation with error feedback</li> <li>Save confirmation dialog</li> <li>Automatic page refresh after successful save</li> </ul>"},{"location":"plugins/vcf-automation/frontend/configure/#2-resource-details-tab-editor","title":"2. Resource Details Tab Editor","text":"<ul> <li>Location: CCI Supervisor Resource Details page</li> <li>Trigger: \"Edit Manifest\" tab (automatically loads manifest when selected)</li> <li>Interface: Embedded tab with full-height Monaco Editor</li> <li>Features:</li> <li>Integrated directly into the details page</li> <li>Auto-loading of resource manifest</li> <li>Inline save/cancel actions</li> <li>Real-time YAML validation</li> </ul>"},{"location":"plugins/vcf-automation/frontend/configure/#supported-resource-types","title":"Supported Resource Types","text":"<p>The YAML editor supports any Kubernetes resource type available in CCI Supervisor namespaces, including:</p> <ul> <li>VirtualMachine: VMware vSphere virtual machines</li> <li>TanzuKubernetesCluster: Tanzu Kubernetes clusters</li> <li>ConfigMap: Configuration data</li> <li>Secret: Sensitive data</li> <li>Pod: Individual container instances</li> <li>Service: Network services</li> <li>Deployment: Application deployments</li> <li>And any other valid Kubernetes resources</li> </ul>"},{"location":"plugins/vcf-automation/frontend/configure/#usage-workflow","title":"Usage Workflow","text":"<ol> <li>Access: Navigate to a CCI Supervisor Resource entity page</li> <li>Permission Check: Verify you have the required edit permission</li> <li>Edit: </li> <li>Modal: Click \"Edit Resource Manifest\" button in overview</li> <li>Tab: Click \"Edit Manifest\" tab in details view</li> <li>Modify: Edit the YAML using the Monaco Editor with syntax highlighting</li> <li>Validate: Real-time validation ensures YAML syntax correctness</li> <li>Save: Click \"Save Changes\" and confirm in the dialog</li> <li>Apply: Changes are applied directly to the Kubernetes resource</li> </ol>"},{"location":"plugins/vcf-automation/frontend/configure/#technical-details","title":"Technical Details","text":"<ul> <li>Editor: Monaco Editor (VS Code editor) with YAML language support</li> <li>Validation: Real-time YAML parsing using js-yaml library</li> <li>API: Uses VCF Automation's Kubernetes proxy endpoints</li> <li>Security: Permission-based access control</li> <li>Error Handling: Comprehensive error messages and user feedback</li> </ul>"},{"location":"plugins/vcf-automation/frontend/configure/#limitations","title":"Limitations","text":"<ul> <li>Requires VCF Automation 9.x with all-apps organization type</li> <li>User must have appropriate VCF Automation permissions in addition to Backstage permissions</li> <li>Resource must have valid apiVersion, kind, namespace, and name metadata</li> <li>Resource context must contain valid namespace URN ID information</li> </ul>"},{"location":"plugins/vcf-automation/frontend/configure/#troubleshooting","title":"Troubleshooting","text":"<p>Editor not appearing: Verify user has <code>vcf-automation.supervisor-resource.edit</code> permission</p> <p>Save fails: Verify YAML syntax is valid and user has write permissions in VCF Automation</p> <p>For installation instructions, refer to the Installation Guide.</p>"},{"location":"plugins/vcf-automation/frontend/install/","title":"Installing the VCF Automation Frontend Plugin","text":"<p>This guide will help you install and set up the VCF Automation frontend plugin in your Backstage instance.</p>"},{"location":"plugins/vcf-automation/frontend/install/#prerequisites","title":"Prerequisites","text":"<p>Before installing this plugin, ensure you have:</p> <ol> <li>VCF Automation Backend Plugin - Required for API integration</li> <li>VCF Ingestor Plugin - Required for entity synchronization</li> </ol>"},{"location":"plugins/vcf-automation/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/vcf-automation/frontend/install/#1-install-the-plugin","title":"1. Install the Plugin","text":"<p>Add the plugin to your Backstage project:</p> <pre><code># From your Backstage root directory\nyarn --cwd packages/app add @terasky/backstage-plugin-vcf-automation\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/install/#2-register-the-plugin","title":"2. Register the Plugin","text":"<p>Add the plugin to your app's APIs in <code>packages/app/src/apis.ts</code>:</p> <pre><code>import {\n  vcfAutomationApiRef,\n  VcfAutomationClient,\n} from '@terasky/backstage-plugin-vcf-automation';\n\nexport const apis: AnyApiFactory[] = [\n  // ... other API factories\n  createApiFactory({\n    api: vcfAutomationApiRef,\n    deps: { discoveryApi: discoveryApiRef, identityApi: identityApiRef },\n    factory: ({ discoveryApi, identityApi }) =&gt; \n      new VcfAutomationClient({ discoveryApi, identityApi }),\n  }),\n];\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/install/#3-add-to-apptsx","title":"3. Add to App.tsx","text":"<p>Add the plugin to your <code>packages/app/src/App.tsx</code>:</p> <pre><code>import { vcfAutomationPlugin } from '@terasky/backstage-plugin-vcf-automation';\n\nconst app = createApp({\n  apis,\n  bindRoutes({ bind }) {\n    // ... other bindings\n    bind(vcfAutomationPlugin.externalRoutes, {\n      catalogIndex: catalogPlugin.routes.catalogIndex,\n    });\n  },\n});\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/install/#4-add-components-to-entity-pages","title":"4. Add Components to Entity Pages","text":"<p>Add the VCF Automation components to your entity pages in <code>packages/app/src/components/catalog/EntityPage.tsx</code>:</p> <pre><code>import {\n  VCFAutomationDeploymentOverview,\n  VCFAutomationDeploymentDetails,\n  VCFAutomationVSphereVMOverview,\n  VCFAutomationVSphereVMDetails,\n  VCFAutomationGenericResourceOverview,\n  VCFAutomationGenericResourceDetails,\n  VCFAutomationProjectOverview,\n  VCFAutomationProjectDetails,\n} from '@terasky/backstage-plugin-vcf-automation';\nimport { Entity } from '@backstage/catalog-model';\n\n// For VSphere VMs\nconst vcfAutomationVSphereVMPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route path=\"/\" title=\"Overview\"&gt;\n      &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;EntityAboutCard variant=\"gridItem\" /&gt;\n        &lt;/Grid&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;VCFAutomationVSphereVMOverview /&gt;\n        &lt;/Grid&gt;\n      &lt;/Grid&gt;\n    &lt;/EntityLayout.Route&gt;\n    &lt;EntityLayout.Route path=\"/vcf-automation\" title=\"VCF Automation\"&gt;\n      &lt;VCFAutomationVSphereVMDetails /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n\n// Add to your component page switch\nconst componentPage = (\n  &lt;EntitySwitch&gt;\n    &lt;EntitySwitch.Case if={isComponentType('Cloud.vSphere.Machine')}&gt;\n      {vcfAutomationVSphereVMPage}\n    &lt;/EntitySwitch.Case&gt;\n    // ... other cases\n  &lt;/EntitySwitch&gt;\n);\n\n// For VCF Deployments\nconst hasVcfAutomationDeploymentStatus = (entity: Entity): boolean =&gt; \n  Boolean(entity.metadata?.annotations?.['terasky.backstage.io/vcf-automation-deployment-status']);\n\nconst vcfAutomationDeploymentPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route path=\"/\" title=\"Overview\"&gt;\n      &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;VCFAutomationDeploymentOverview /&gt;\n        &lt;/Grid&gt;\n      &lt;/Grid&gt;\n    &lt;/EntityLayout.Route&gt;\n    &lt;EntityLayout.Route path=\"/vcf-automation\" title=\"VCF Automation\"&gt;\n      &lt;VCFAutomationDeploymentDetails /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n\n// For Generic Resources\nconst hasVcfAutomationResourceType = (entity: Entity): boolean =&gt; \n  Boolean(entity.metadata?.annotations?.['terasky.backstage.io/vcf-automation-resource-type']);\n\nconst vcfAutomationGenericResourcePage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route path=\"/\" title=\"Overview\"&gt;\n      &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;VCFAutomationGenericResourceOverview /&gt;\n        &lt;/Grid&gt;\n      &lt;/Grid&gt;\n    &lt;/EntityLayout.Route&gt;\n    &lt;EntityLayout.Route path=\"/vcf-automation\" title=\"VCF Automation\"&gt;\n      &lt;VCFAutomationGenericResourceDetails /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n\n// For Projects (in Domain page)\nconst domainPage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route path=\"/\" title=\"Overview\"&gt;\n      &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;VCFAutomationProjectOverview /&gt;\n        &lt;/Grid&gt;\n      &lt;/Grid&gt;\n    &lt;/EntityLayout.Route&gt;\n    &lt;EntityLayout.Route path=\"/vcf-automation\" title=\"VCF Automation\"&gt;\n      &lt;VCFAutomationProjectDetails /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n\n// Add a Resources Page\nconst resourcePage = (\n  &lt;EntitySwitch&gt;\n    &lt;EntitySwitch.Case if={hasVcfAutomationResourceType}&gt;\n      {vcfAutomationGenericResourcePage}\n    &lt;/EntitySwitch.Case&gt;\n    &lt;EntitySwitch.Case&gt;\n      {defaultEntityPage}\n    &lt;/EntitySwitch.Case&gt;\n  &lt;/EntitySwitch&gt;\n);\n\n// CCI Component Pages (New in latest version)\nconst cciNamespacePage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route path=\"/\" title=\"Overview\"&gt;\n      &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;VCFAutomationCCINamespaceOverview /&gt;\n        &lt;/Grid&gt;\n      &lt;/Grid&gt;\n    &lt;/EntityLayout.Route&gt;\n    &lt;EntityLayout.Route path=\"/details\" title=\"Details\"&gt;\n      &lt;VCFAutomationCCINamespaceDetails /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n\nconst cciResourcePage = (\n  &lt;EntityLayout&gt;\n    &lt;EntityLayout.Route path=\"/\" title=\"Overview\"&gt;\n      &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;VCFAutomationCCIResourceOverview /&gt;\n        &lt;/Grid&gt;\n      &lt;/Grid&gt;\n    &lt;/EntityLayout.Route&gt;\n    &lt;EntityLayout.Route path=\"/details\" title=\"Details\"&gt;\n      &lt;VCFAutomationCCIResourceDetails /&gt;\n    &lt;/EntityLayout.Route&gt;\n  &lt;/EntityLayout&gt;\n);\n\n// Component Page with CCI Support\nconst componentPage = (\n  &lt;EntitySwitch&gt;\n    &lt;EntitySwitch.Case if={isComponentType('CCI.Supervisor.Namespace')}&gt;\n      {cciNamespacePage}\n    &lt;/EntitySwitch.Case&gt;\n    &lt;EntitySwitch.Case if={isComponentType('CCI.Supervisor.Resource')}&gt;\n      {cciResourcePage}\n    &lt;/EntitySwitch.Case&gt;\n    &lt;EntitySwitch.Case if={hasVcfAutomationVSphereVMType}&gt;\n      {vcfAutomationVSphereVMPage}\n    &lt;/EntitySwitch.Case&gt;\n    &lt;EntitySwitch.Case&gt;\n      {defaultEntityPage}\n    &lt;/EntitySwitch.Case&gt;\n  &lt;/EntitySwitch&gt;\n);\n\n// Update the entityPage constant to include all pages\nexport const entityPage = (\n  &lt;EntitySwitch&gt;\n    &lt;EntitySwitch.Case if={isKind('component')} children={componentPage} /&gt;\n    &lt;EntitySwitch.Case if={isKind('resource')} children={resourcePage} /&gt;\n    &lt;EntitySwitch.Case if={isKind('domain')} children={domainPage} /&gt;\n    &lt;EntitySwitch.Case if={isKind('system')} children={systemPage} /&gt;\n    // ... other cases\n  &lt;/EntitySwitch&gt;\n);\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/install/#cci-component-type-checks","title":"CCI Component Type Checks","text":"<p>Add the following helper functions for CCI component type checking:</p> <pre><code>import { Entity } from '@backstage/catalog-model';\n\nexport const isComponentType = (type: string) =&gt; (entity: Entity) =&gt;\n  entity?.kind === 'Component' &amp;&amp; entity.spec?.type === type;\n</code></pre>"},{"location":"plugins/vcf-automation/frontend/install/#available-components-summary","title":"Available Components Summary","text":"<p>The VCF Automation frontend plugin now provides the following components:</p>"},{"location":"plugins/vcf-automation/frontend/install/#traditional-components","title":"Traditional Components","text":"<ul> <li><code>VCFAutomationDeploymentOverview</code> &amp; <code>VCFAutomationDeploymentDetails</code> - For VCF deployments</li> <li><code>VCFAutomationVSphereVMOverview</code> &amp; <code>VCFAutomationVSphereVMDetails</code> - For vSphere VMs</li> <li><code>VCFAutomationGenericResourceOverview</code> &amp; <code>VCFAutomationGenericResourceDetails</code> - For generic resources</li> <li><code>VCFAutomationProjectOverview</code> &amp; <code>VCFAutomationProjectDetails</code> - For VCF projects</li> </ul>"},{"location":"plugins/vcf-automation/frontend/install/#cci-components-new","title":"CCI Components (New)","text":"<ul> <li><code>VCFAutomationCCINamespaceOverview</code> &amp; <code>VCFAutomationCCINamespaceDetails</code> - For CCI Supervisor Namespaces</li> <li><code>VCFAutomationCCIResourceOverview</code> &amp; <code>VCFAutomationCCIResourceDetails</code> - For CCI Supervisor Resources</li> <li><code>VCFAutomationVMPowerManagement</code> - For VM power management (automatically included in CCI resource overview for VMs)</li> </ul>"},{"location":"plugins/vcf-automation/frontend/install/#entity-type-mappings","title":"Entity Type Mappings","text":"<ul> <li>CCI.Supervisor.Namespace \u2192 Uses CCI Namespace components</li> <li>CCI.Supervisor.Resource \u2192 Uses CCI Resource components  </li> <li>Cloud.vSphere.Machine \u2192 Uses vSphere VM components</li> <li>Other types \u2192 Uses generic resource components</li> </ul>"},{"location":"plugins/vcf-automation/frontend/install/#vm-power-management","title":"VM Power Management","text":"<p>For VirtualMachine components in all-apps organizations, the plugin provides power management capabilities:</p>"},{"location":"plugins/vcf-automation/frontend/install/#features","title":"Features","text":"<ul> <li>Power State Display: Shows current VM power state (PoweredOn/PoweredOff)</li> <li>Power Actions: Power On/Off buttons based on current state  </li> <li>Permission Control: Requires <code>vcf-automation.vm-power-management.run</code> permission (defined in vcf-automation-common)</li> <li>Confirmation Dialogs: Confirms actions before execution</li> <li>Support for Both VM Types:</li> <li>Deployment-managed VMs: Uses deployment API to check action validity and execute</li> <li>Standalone VMs: Uses Kubernetes API to check status and update power state</li> </ul>"},{"location":"plugins/vcf-automation/frontend/install/#permissions","title":"Permissions","text":"<p>Add the following permission to your permission policy:</p> <pre><code>import { vmPowerManagementPermission } from '@terasky/backstage-plugin-vcf-automation-common';\n\n// In your permission policy:\n{\n  permission: vmPowerManagementPermission,\n  result: AuthorizeResult.ALLOW, // or implement conditional logic as needed\n}\n</code></pre> <p>The permission is defined in the <code>vcf-automation-common</code> plugin and automatically registered with the permission system.</p>"},{"location":"plugins/vcf-automation/frontend/install/#usage","title":"Usage","text":"<p>The power management component is automatically included in <code>VCFAutomationCCIResourceOverview</code> for VirtualMachine entities in all-apps organizations. No additional configuration is required.</p>"},{"location":"plugins/vcf-automation/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { vcfAutomationPlugin } from '@terasky/backstage-plugin-vcf-automation/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    vcfAutomationPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/vcf-automation/frontend/install/#whats-next","title":"What's Next?","text":"<ul> <li>Configure the plugin</li> <li>Learn about the plugin's features</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/about/","title":"VCF Automation Ingestor Plugin","text":""},{"location":"plugins/vcf-automation/ingestor/about/#overview","title":"Overview","text":"<p>The VCF Automation Ingestor plugin ingests VCF Automation deployments into the Backstage catalog. It automatically creates and maintains various entity types based on VCF Automation resources.</p>"},{"location":"plugins/vcf-automation/ingestor/about/#features","title":"Features","text":""},{"location":"plugins/vcf-automation/ingestor/about/#systems-integration","title":"Systems Integration","text":"<ul> <li>Creates system entities from VCF Automation deployments</li> <li>Maintains deployment metadata and relationships</li> <li>Tracks deployment ownership and domain information</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/about/#component-management","title":"Component Management","text":"<ul> <li>Creates component entities from VSphere Machine resources</li> <li>Maintains VM configurations and relationships</li> <li>Tracks system dependencies</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/about/#resource-processing","title":"Resource Processing","text":"<ul> <li>Creates resource entities from VCF Automation resources</li> <li>Maintains resource metadata and relationships</li> <li>Tracks dependencies between resources</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/about/#domain-integration","title":"Domain Integration","text":"<ul> <li>Creates domain entities from VCF Automation projects</li> <li>Maintains project ownership information</li> <li>Manages project relationships</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/about/#authentication","title":"Authentication","text":"<ul> <li>Bearer token authentication with VCF Automation API</li> <li>Automatic token refresh handling</li> <li>Secure credential management</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/about/#entity-types","title":"Entity Types","text":""},{"location":"plugins/vcf-automation/ingestor/about/#systems","title":"Systems","text":"<p>Systems are created from VCF Automation deployments with the following properties: - <code>name</code>: The deployment ID - <code>owner</code>: The deployment owner in the format <code>{ownerType}:{ownedBy}</code> - <code>domain</code>: The project ID  </p>"},{"location":"plugins/vcf-automation/ingestor/about/#components","title":"Components","text":"<p>Components are created from VCF Automation resources of type <code>Cloud.vSphere.Machine</code> with: - <code>title</code>: The resource name - <code>name</code>: The resource ID - <code>type</code>: The resource type (<code>Cloud.vSphere.Machine</code>) - <code>owner</code>: The deployment owner - <code>system</code>: The parent deployment - <code>lifecycle</code>: Set to 'production' - <code>dependsOn</code>: List of dependent resources  </p>"},{"location":"plugins/vcf-automation/ingestor/about/#resources","title":"Resources","text":"<p>Resources are created from all other VCF Automation resource types with: - <code>title</code>: The resource name - <code>name</code>: The resource ID - <code>type</code>: The resource type - <code>owner</code>: The deployment owner - <code>system</code>: The parent deployment ID - <code>dependsOn</code>: List of dependent resource IDs  </p>"},{"location":"plugins/vcf-automation/ingestor/about/#domains","title":"Domains","text":"<p>Domains are created from VCF Automation projects with: - <code>name</code>: The project ID - <code>owner</code>: The project owner  </p>"},{"location":"plugins/vcf-automation/ingestor/about/#links","title":"Links","text":"<ul> <li>Installation Guide</li> <li>Configuration Guide</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/configure/","title":"Configuring the VCF Automation Ingestor Plugin","text":"<p>This guide covers the configuration options available for the VCF Automation Ingestor plugin.</p>"},{"location":"plugins/vcf-automation/ingestor/configure/#simple-configuration","title":"Simple Configuration","text":"<p>For a single VCF Automation instance you can provide config as follows:</p> <p>Add the following to your <code>app-config.yaml</code>:</p> <pre><code>vcfAutomation:\n  name: my-vcf-01\n  majorVersion: 8 # 9 is also supported\n  baseUrl: 'https://your-vcf-automation-instance'\n  orgName: my-org # This is needed only in VCFA 9 and above\n  organizationType: 'all-apps' # Options: 'vm-apps' (default) or 'all-apps' for VCF 9 organization types\n  authentication:\n    username: 'your-username'\n    password: 'your-password'\n    domain: 'your-domain' # This is needed only in Aria Automation 8.x\n</code></pre>"},{"location":"plugins/vcf-automation/ingestor/configure/#multi-instance-config","title":"Multi Instance Config","text":"<p>The plugin does support multi instance config in the following format:</p> <pre><code>vcfAutomation:\n  instances:\n  - name: my-vcf-01\n    baseUrl: 'https://your-vcf-automation-instance'\n    majorVersion: 9\n    orgName: my-org # This is needed only in VCFA 9 and above\n    organizationType: 'all-apps' # Options: 'vm-apps' (default) or 'all-apps' for VCF 9 organization types\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n      domain: 'your-domain' # This is needed only in Aria Automation 8.x\n  - name: my-vcf-02\n    baseUrl: 'https://your-vcf-02-automation-instance'\n    majorVersion: 8\n    authentication:\n      username: 'your-username'\n      password: 'your-password'\n      domain: 'your-domain' # This is needed only in Aria Automation 8.x\n</code></pre>"},{"location":"plugins/vcf-automation/ingestor/configure/#authentication","title":"Authentication","text":"<p>The plugin uses bearer token authentication with the VCF Automation API. It automatically handles token refresh when needed. The token is obtained by making a POST request to <code>/csp/gateway/am/api/login</code> with the configured credentials.</p>"},{"location":"plugins/vcf-automation/ingestor/configure/#refresh-schedule","title":"Refresh Schedule","text":"<p>The plugin refreshes the entities every 30 minutes by default. Each refresh: 1. Authenticates with the VCF Automation API 2. Fetches all deployments using pagination 3. For all-apps organization type, fetches detailed resource data for CCI resources 4. Transforms the deployments and their resources into Backstage entities 5. Generates appropriate external links to VCF Automation UI based on organization type:    - vm-apps (classic): <code>/automation/#/consume/deployment/{id}</code>    - all-apps: <code>/automation/#/build-and-deploy/all-resources/deployments/{id}</code> 6. Creates proper entity relationships:    - CCI.Supervisor.Resource entities are marked as <code>subcomponentOf</code> their parent CCI.Supervisor.Namespace    - Dependencies are tracked using <code>dependsOn</code> relationships    - Entity references use correct types (Component vs Resource) 7. Updates the Backstage catalog</p>"},{"location":"plugins/vcf-automation/ingestor/configure/#entity-types-and-mappings","title":"Entity Types and Mappings","text":"<p>The ingestor creates different Backstage entity types based on the VCF resource type:</p>"},{"location":"plugins/vcf-automation/ingestor/configure/#domain-entities-projects","title":"Domain Entities (Projects)","text":"<ul> <li>VCF Projects \u2192 Backstage Domain</li> <li>Contains project metadata (administrators, zones, constraints, etc.)</li> <li>Supports both vm-apps and all-apps project structures</li> <li>External links point to project-filtered deployment views</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/configure/#system-entities-deployments-standalone-resources","title":"System Entities (Deployments &amp; Standalone Resources)","text":"<ul> <li>VCF Deployments \u2192 Backstage System</li> <li>Contains deployment metadata (status, cost, ownership, etc.)</li> <li>External links point to specific deployment views</li> <li>Part of parent Project domain</li> <li>Standalone Resources Container \u2192 Backstage System (for all-apps only)</li> <li>Named <code>{project-name}-standalone-resources</code> with ID <code>{project-id}-standalone-resources</code></li> <li>Created only when a project has standalone supervisor resources</li> <li>Contains all standalone CCI supervisor resources for that project</li> <li>Part of parent Project domain</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/configure/#component-entities","title":"Component Entities","text":"<ul> <li>Cloud.vSphere.Machine \u2192 Backstage Component (type: <code>Cloud.vSphere.Machine</code>)</li> <li>CCI.Supervisor.Namespace \u2192 Backstage Component (type: <code>CCI.Supervisor.Namespace</code>)</li> <li>CCI.Supervisor.Resource \u2192 Backstage Component (type: <code>CCI.Supervisor.Resource</code>)</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/configure/#resource-entities-generic-resources","title":"Resource Entities (Generic Resources)","text":"<ul> <li>All other resource types \u2192 Backstage Resource</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/configure/#cci-resource-support","title":"CCI Resource Support","text":"<p>For all-apps organization types, the ingestor provides enhanced support for Cloud Compute Infrastructure (CCI) resources:</p>"},{"location":"plugins/vcf-automation/ingestor/configure/#ccisupervisornamespace","title":"CCI.Supervisor.Namespace","text":"<ul> <li>Created as Component entities</li> <li>Two sources:</li> <li>Deployment-managed: From deployment resource details</li> <li>Direct ingestion: From <code>/cci/kubernetes/apis/infrastructure.cci.vmware.com/v1alpha2/supervisornamespaces</code> API</li> <li>Contains rich namespace metadata:</li> <li>VM classes and their limits</li> <li>Storage classes and quotas  </li> <li>Zone information</li> <li>Status conditions</li> <li>Namespace endpoint URLs</li> <li>Project Association: Linked to project domains via <code>infrastructure.cci.vmware.com/project-id</code> annotation</li> <li>Hierarchy: Part of <code>{project-id}-standalone-resources</code> system (for standalone namespaces)</li> <li>Annotations include:</li> <li><code>terasky.backstage.io/vcf-automation-cci-namespace-endpoint</code></li> <li><code>terasky.backstage.io/vcf-automation-cci-namespace-phase</code></li> <li><code>terasky.backstage.io/vcf-automation-supervisor-namespace-data</code> (for direct ingestion)</li> <li><code>terasky.backstage.io/vcf-automation-resource-origin</code> ('SUPERVISOR_NAMESPACE' for standalone)</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/configure/#ccisupervisorresource","title":"CCI.Supervisor.Resource","text":"<ul> <li>Created as Component entities</li> <li>Complex Subcomponent Relationships:</li> <li>Deployment-managed: <ul> <li>Standard: <code>subcomponentOf</code> their parent CCI.Supervisor.Namespace</li> <li>Cluster VMs: VirtualMachines with <code>cluster.x-k8s.io/cluster-name</code> label become <code>subcomponentOf</code> the Cluster component</li> </ul> </li> <li>Standalone: <ul> <li>Standard: <code>subcomponentOf</code> their matching CCI.Supervisor.Namespace (ingested separately)</li> <li>Cluster VMs: VirtualMachines with <code>capv.vmware.com/cluster.name</code> label become <code>subcomponentOf</code> the Cluster component</li> </ul> </li> <li>Contains complete Kubernetes resource data:</li> <li>Manifest: Original resource template/specification</li> <li>Object: Live Kubernetes object with current status</li> <li>Context: CCI context information</li> <li>Dependencies: Tracked via <code>dependsOn</code> relationships</li> <li>Smart External Links: Based on resource kind:</li> <li>VirtualMachine: Links to VM service view</li> <li>Service: Links to network service view  </li> <li>Cluster: Links to TKG service view</li> <li>Other types: No external link (still ingested)</li> <li>Smart Tagging: All CCI resources from all-apps organizations get tagged with <code>kind:&lt;RESOURCE_KIND&gt;</code> (e.g., <code>kind:virtualmachine</code>, <code>kind:service</code>, <code>kind:cluster</code>)</li> <li>Remote Console Links: VirtualMachine components get remote console links with format <code>/automation/#/machines/remote-console/&lt;PROJECT&gt;/&lt;NAMESPACE&gt;/&lt;VM&gt;</code></li> <li>Annotations include:</li> <li><code>terasky.backstage.io/vcf-automation-cci-resource-manifest</code> (JSON)</li> <li><code>terasky.backstage.io/vcf-automation-cci-resource-object</code> (JSON)</li> <li><code>terasky.backstage.io/vcf-automation-cci-resource-context</code></li> <li><code>terasky.backstage.io/vcf-automation-resource-origin</code> ('DEPLOYED', 'STANDALONE', or 'SUPERVISOR_NAMESPACE')</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/configure/#api-endpoint-usage","title":"API Endpoint Usage","text":"<p>The ingestor uses different API endpoints based on organization type:</p>"},{"location":"plugins/vcf-automation/ingestor/configure/#vm-apps-classic","title":"vm-apps (Classic)","text":"<ul> <li>Projects: <code>/iaas/api/projects/{id}</code></li> <li>Deployments: Standard deployment API</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/configure/#all-apps","title":"all-apps","text":"<ul> <li>Projects: <code>/project-service/api/projects/{id}</code></li> <li>Deployments: Standard deployment API</li> <li>Resource Details: <code>/deployment/api/deployments/{id}/resources</code> (for CCI resources)</li> <li>Standalone Supervisor Resources: <code>/deployment/api/supervisor-resources</code> (paginated)</li> <li>Supervisor Namespaces: <code>/cci/kubernetes/apis/infrastructure.cci.vmware.com/v1alpha2/supervisornamespaces</code> (standalone)</li> <li>Projects: <code>/project-service/api/projects</code> (for project name resolution)  </li> </ul>"},{"location":"plugins/vcf-automation/ingestor/configure/#links","title":"Links","text":"<ul> <li>Installation Guide</li> <li>About the plugin</li> </ul>"},{"location":"plugins/vcf-automation/ingestor/install/","title":"Installing the VCF Automation Ingestor Plugin","text":"<p>This guide will help you install and set up the VCF Automation Ingestor plugin in your Backstage instance.</p>"},{"location":"plugins/vcf-automation/ingestor/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/vcf-automation/ingestor/install/#1-install-the-plugin","title":"1. Install the Plugin","text":"<p>Install the plugin package in your Backstage backend:</p> <pre><code>yarn add --cwd packages/backend @terasky/backstage-plugin-vcf-automation-ingestor\n</code></pre>"},{"location":"plugins/vcf-automation/ingestor/install/#2-register-the-plugin","title":"2. Register the Plugin","text":"<p>Import and register the plugin in your <code>packages/backend/index.ts</code>:</p> <pre><code>backend.add(import('@terasky/backstage-plugin-vcf-automation-ingestor'));\n</code></pre>"},{"location":"plugins/vcf-automation/ingestor/install/#whats-next","title":"What's Next?","text":"<ul> <li>Configure the plugin</li> <li>Learn about the plugin's features</li> </ul>"},{"location":"plugins/vcf-operations/overview/","title":"VCF Operations Plugins","text":"<p>The VCF Operations plugins provide comprehensive observability and metrics monitoring capabilities for VMware Cloud Foundation (VCF) environments within Backstage. These plugins enable teams to monitor infrastructure performance, analyze resource utilization, and visualize operational metrics through an intuitive interface integrated with VCF Operations (vRealize Operations).</p>"},{"location":"plugins/vcf-operations/overview/#features","title":"Features","text":"<ul> <li>Performance Metrics Monitoring: Real-time visualization of CPU, memory, disk, and network metrics</li> <li>Categorized Metrics: Organized metric selection with categories for CPU, Memory, Storage, Network, System Health, and Alerts</li> <li>Multi-Resource Support: Support for VMs (standalone and non-standalone), Supervisor Namespaces, projects, and Kubernetes clusters</li> <li>Interactive Charts: Time-series charts with customizable time ranges and aggregation options</li> <li>Automatic Resource Detection: Intelligent detection of VCF Operations resources based on entity metadata</li> <li>Auto-refresh Capabilities: Configurable automatic refresh with manual refresh options</li> <li>Multi-Instance Support: Support for multiple VCF Operations instances with instance selection</li> <li>Permission Controls: Access control integration with Backstage permissions</li> <li>Dark Mode Support: Full compatibility with light and dark themes</li> <li>Collapsible Categories: Organized metric categories with expand/collapse functionality</li> <li>Resource-Specific Metrics: Tailored metric sets for different resource types (VMs, projects, clusters, namespaces)</li> </ul>"},{"location":"plugins/vcf-operations/overview/#architecture","title":"Architecture","text":"<p>The VCF Operations plugin suite consists of three complementary packages:</p>"},{"location":"plugins/vcf-operations/overview/#frontend-plugin-vcf-operations","title":"Frontend Plugin (<code>vcf-operations</code>)","text":"<ul> <li>VCFOperationsExplorer Component: Main metrics visualization interface</li> <li>Categorized Metrics Selection: Left panel with organized metric categories</li> <li>Interactive Charts: Right panel with scrollable time-series charts</li> <li>Smart Controls: Top control bar with time range, aggregation, and refresh options</li> </ul>"},{"location":"plugins/vcf-operations/overview/#backend-plugin-vcf-operations-backend","title":"Backend Plugin (<code>vcf-operations-backend</code>)","text":"<ul> <li>VCF Operations API Integration: Direct communication with VCF Operations APIs</li> <li>Authentication Management: Token-based authentication with automatic refresh</li> <li>Resource Discovery: Intelligent resource lookup and mapping</li> <li>Metrics Data Processing: Time-series data retrieval and transformation</li> <li>VCF 9 Support: Compatible with VCF Operations v9 (any-apps tenants only)</li> </ul>"},{"location":"plugins/vcf-operations/overview/#common-library-vcf-operations-common","title":"Common Library (<code>vcf-operations-common</code>)","text":"<ul> <li>Permission Definitions: Shared permission model for access control</li> <li>Type Definitions: Common interfaces and types across plugins</li> </ul>"},{"location":"plugins/vcf-operations/overview/#screenshots","title":"Screenshots","text":""},{"location":"plugins/vcf-operations/overview/#metrics-explorer-interface","title":"Metrics Explorer Interface","text":"<p>The main interface features: - Top Control Bar: Time range, aggregation, and refresh controls - Left Panel: Categorized metrics with select/deselect capabilities - Right Panel: Interactive charts with real-time data visualization</p>"},{"location":"plugins/vcf-operations/overview/#category-based-metric-selection","title":"Category-Based Metric Selection","text":"<p>Features organized metric categories with collapsible sections (all collapsed by default): - CPU Metrics: Usage %, MHz, Ready time, Co-Stop, Demand, Entitlement - Memory Metrics: Usage %, Consumed KB, Contention, Swap rates, Workload - Storage Metrics: Disk Usage %, Datastore Usage %, Latency metrics - Network Metrics: Usage KBps, Transmit/Receive rates, Dropped packets - System Health: Health scores, badges (compliance, efficiency, health, risk, workload), availability - Alerts &amp; Monitoring: Alert counts by severity (critical, warning, info, immediate) - Capacity Analytics: Remaining capacity %, time remaining, recommended sizes (clusters only) - Cost Metrics: MTD costs, metering, billing information (projects only) - Power &amp; Environment: Power usage (VMs only)</p>"},{"location":"plugins/vcf-operations/overview/#real-time-performance-charts","title":"Real-Time Performance Charts","text":"<p>Interactive time-series visualization with: - Configurable time ranges (1 hour to 30 days) - Multiple aggregation options (Average, Min, Max, Sum, Latest) - Responsive charts with zoom and tooltip capabilities - Automatic data refresh options</p>"},{"location":"plugins/vcf-operations/overview/#supported-resource-types","title":"Supported Resource Types","text":""},{"location":"plugins/vcf-operations/overview/#virtual-machines","title":"Virtual Machines","text":"<ul> <li>Standalone VMs: Resources with <code>kind:virtualmachine</code> and <code>standalone-resource</code> tags</li> <li>Non-Standalone VMs: Resources with <code>kind:virtualmachine</code> tag (extracts VM name from console links)</li> <li>Metrics: CPU, memory, storage, network, system health, alerts, power consumption</li> <li>Query Method: Direct API search by VM name with VMWARE adapter filter</li> </ul>"},{"location":"plugins/vcf-operations/overview/#supervisor-namespaces","title":"Supervisor Namespaces","text":"<ul> <li>CCI Namespaces: Components with <code>spec.type: \"CCI.Supervisor.Namespace\"</code></li> <li>Alternative Detection: Resources with <code>terasky.backstage.io/vcf-automation-cci-namespace-endpoint</code> annotation</li> <li>Metrics: Health badges, hardware config, CPU/memory usage, pod/VM counts, alerts</li> <li>Query Method: Property-based search or URN-based lookup</li> </ul>"},{"location":"plugins/vcf-operations/overview/#vcf-automation-projects","title":"VCF Automation Projects","text":"<ul> <li>Project Domains: Domain entities with <code>spec.type: \"vcf-automation-project\"</code> </li> <li>Metrics: Health badges, cost tracking (MTD costs, metering), resource usage, alerts</li> <li>Query Method: POST query to VCF Operations with ProjectAssignment search   <pre><code>{\n  \"name\": [\"projectName\"],\n  \"adapterKind\": [\"VCFAutomation\"], \n  \"resourceKind\": [\"ProjectAssignment\"]\n}\n</code></pre></li> </ul>"},{"location":"plugins/vcf-operations/overview/#kubernetes-clusters","title":"Kubernetes Clusters","text":"<ul> <li>Cluster Components: Resources with <code>kind:cluster</code> tag</li> <li>Standalone Support: Removes \"(Standalone)\" suffix if <code>standalone-resource</code> tag present</li> <li>Metrics: Health badges, capacity analytics, CPU/memory workload, VM summaries</li> <li>Query Method: POST query to VCF Operations with ResourcePool search   <pre><code>{\n  \"name\": [\"clusterName\"],\n  \"adapterKind\": [\"VMWARE\"],\n  \"resourceKind\": [\"ResourcePool\"] \n}\n</code></pre></li> </ul>"},{"location":"plugins/vcf-operations/overview/#planned-support","title":"Planned Support","text":"<ul> <li>VCF Automation 8 based entities Support: Legacy VCF Operations v8 compatibility (in development)</li> <li>VM-Apps Tenants: VCF 9 vm-apps tenant support (in development)</li> <li>Deployments: VCF Automation Deployments support (future enhancement)</li> </ul>"},{"location":"plugins/vcf-operations/overview/#vcf-version-compatibility","title":"VCF Version Compatibility","text":""},{"location":"plugins/vcf-operations/overview/#currently-supported","title":"Currently Supported","text":"<ul> <li>VCF 9: Any-apps tenants only</li> <li>VCF Operations v9: Full API compatibility</li> </ul>"},{"location":"plugins/vcf-operations/overview/#limitations","title":"Limitations","text":"<ul> <li>VCF 8: Not currently supported (in development)</li> <li>VCF 9 VM-Apps Tenants: Not currently supported (in development)</li> </ul> <p>The plugin is specifically designed and tested for VCF 9 environments with any-apps tenant configurations. Support for VCF 8 and VCF 9 vm-apps tenants is being actively developed.</p>"},{"location":"plugins/vcf-operations/overview/#configuration-example","title":"Configuration Example","text":"<pre><code>vcfOperations:\n  instances:\n    - name: vcf-ops-prod\n      baseUrl: 'https://vcf-ops.company.local'\n      majorVersion: 9  # VCF 9 with any-apps tenants\n      relatedVCFAInstances:\n        - vcfa-instance-name\n      authentication:\n        username: 'admin'\n        password: 'VMware123!VMware123!'\n    - name: vcf-ops-dev\n      baseUrl: 'https://vcf-ops-dev.company.local'\n      majorVersion: 9  # VCF 9 with any-apps tenants\n      authentication:\n        username: 'monitoring'\n        password: 'SecurePassword123!'\n</code></pre>"},{"location":"plugins/vcf-operations/overview/#component-usage","title":"Component Usage","text":""},{"location":"plugins/vcf-operations/overview/#as-a-tab-component","title":"As a Tab Component","text":"<p>Add the VCF Operations Explorer as a tab to entity pages:</p> <pre><code>import { VCFOperationsExplorerComponent } from '@terasky/backstage-plugin-vcf-operations';\n\n// In your entity page\n    &lt;EntityLayout.Route path=\"/vcf-automation\" title=\"VCF Automation\"&gt;\n      &lt;VCFAutomationCCIResourceDetails /&gt;\n    &lt;/EntityLayout.Route&gt;\n</code></pre>"},{"location":"plugins/vcf-operations/overview/#key-benefits","title":"Key Benefits","text":"<ol> <li>Unified Observability: Single interface for monitoring VCF infrastructure metrics</li> <li>Context-Aware: Automatically detects and displays relevant metrics for each entity</li> <li>User-Friendly: Intuitive categorized interface with smart defaults</li> <li>Flexible: Supports multiple time ranges, aggregation methods, and refresh options</li> <li>Scalable: Multi-instance support for complex VCF environments</li> <li>Integrated: Seamless integration with Backstage catalog and permission systems</li> </ol>"},{"location":"plugins/vcf-operations/overview/#mcp-actions-integration","title":"MCP Actions Integration","text":"<p>The VCF Operations plugin provides MCP (Model Control Protocol) actions for interacting with VCF Operations resources. To enable these actions:</p> <ol> <li> <p>First, ensure you have the MCP actions backend plugin installed and configured. See the MCP Actions Backend Plugin documentation for setup instructions.</p> </li> <li> <p>Add the plugin to your actions configuration in <code>app-config.yaml</code>:</p> </li> </ol> <pre><code>backend:\n  actions:\n    pluginSources:\n      - 'catalog'\n      - 'vcf-operations'\n      # ... other action sources\n</code></pre>"},{"location":"plugins/vcf-operations/overview/#available-mcp-actions","title":"Available MCP Actions","text":"<p>The plugin provides the following MCP actions:</p> <ul> <li><code>get_vcf_operations_instances</code>: Get configured VCF Operations instances</li> <li>Input: None</li> <li> <p>Output: List of instances with their configurations</p> </li> <li> <p><code>get_vcf_operations_resource_metrics</code>: Get resource metrics</p> </li> <li>Input: Resource ID, metric keys, time range, and optional instance name</li> <li> <p>Output: Time-series metric data</p> </li> <li> <p><code>get_latest_vcf_operations_resource_metrics</code>: Get latest metrics</p> </li> <li>Input: Resource IDs, metric keys, and optional instance name</li> <li> <p>Output: Latest metric values</p> </li> <li> <p><code>get_vcf_operations_resource_details</code>: Get resource details</p> </li> <li>Input: Resource ID and optional instance name</li> <li> <p>Output: Full resource details</p> </li> <li> <p><code>get_available_metrics_from_vcf_operations</code>: Get available metrics</p> </li> <li>Input: Resource ID and optional instance name</li> <li> <p>Output: List of available metrics for the resource</p> </li> <li> <p><code>search_vcf_operations_resources</code>: Search resources</p> </li> <li>Input: Name, adapter kind, resource kind, and optional instance name</li> <li> <p>Output: List of matching resources</p> </li> <li> <p><code>find_vcf_operations_resource_by_name</code>: Find resource by name</p> </li> <li>Input: Resource name, optional type and instance name</li> <li> <p>Output: Resource details if found</p> </li> <li> <p><code>find_vcf_operations_resource_by_property</code>: Find resource by property</p> </li> <li>Input: Property key, value, and optional instance name</li> <li>Output: Resource details if found</li> </ul>"},{"location":"plugins/vcf-operations/overview/#getting-started","title":"Getting Started","text":"<ol> <li>Install the plugins following the installation guides for each component</li> <li>Configure VCF Operations instances in your app-config.yaml</li> <li>Set up permissions to control access to metrics data</li> <li>Configure MCP actions in your app-config.yaml</li> <li>Add the component to your entity pages or create dedicated routes</li> <li>Start monitoring your VCF infrastructure with real-time metrics</li> </ol> <p>The VCF Operations plugins provide a powerful foundation for infrastructure observability within your Backstage portal, enabling teams to make informed decisions based on real-time performance data.</p>"},{"location":"plugins/vcf-operations/backend/about/","title":"VCF Operations Backend Plugin","text":"<p>The VCF Operations Backend plugin provides the server-side functionality for integrating with VMware vRealize Operations (VCF Operations) APIs. It handles authentication, resource discovery, and metrics data retrieval from VCF Operations instances.</p>"},{"location":"plugins/vcf-operations/backend/about/#overview","title":"Overview","text":"<p>The backend plugin acts as a secure proxy between Backstage and VCF Operations, providing:</p> <ul> <li>API Integration: Direct communication with VCF Operations REST APIs</li> <li>Authentication Management: Secure token-based authentication with automatic refresh</li> <li>Resource Discovery: Intelligent resource lookup and mapping capabilities</li> <li>Metrics Processing: Time-series data retrieval and transformation</li> <li>Multi-Instance Support: Management of multiple VCF Operations environments</li> <li>Permission Integration: Backstage permission system integration</li> </ul>"},{"location":"plugins/vcf-operations/backend/about/#key-features","title":"Key Features","text":""},{"location":"plugins/vcf-operations/backend/about/#authentication-security","title":"Authentication &amp; Security","text":"<ul> <li>Token-Based Auth: Secure vRealizeOpsToken authentication</li> <li>Automatic Refresh: Token refresh with 6-hour validity periods</li> <li>Credential Management: Secure handling of VCF Operations credentials</li> <li>Retry Logic: Exponential backoff for failed authentication attempts</li> </ul>"},{"location":"plugins/vcf-operations/backend/about/#resource-discovery","title":"Resource Discovery","text":"<ul> <li>Smart Lookup: Multiple resource discovery strategies</li> <li>VirtualMachine Priority: Prioritizes VM resources in searches</li> <li>Fallback Mechanisms: Multiple search approaches for maximum compatibility</li> <li>Property-Based Search: Advanced property condition filtering</li> </ul>"},{"location":"plugins/vcf-operations/backend/about/#metrics-handling","title":"Metrics Handling","text":"<ul> <li>Time-Series Data: Comprehensive metrics data retrieval</li> <li>Aggregation Support: Multiple rollup types (AVG, MIN, MAX, SUM, LATEST)</li> <li>Interval Management: Dynamic interval calculation based on time ranges</li> <li>Data Transformation: Response format normalization for frontend consumption</li> </ul>"},{"location":"plugins/vcf-operations/backend/about/#api-endpoints","title":"API Endpoints","text":"<p>The backend provides the following REST endpoints:</p>"},{"location":"plugins/vcf-operations/backend/about/#health-check","title":"Health Check","text":"<p><pre><code>GET /api/vcf-operations/health\n</code></pre> Returns the health status of the backend service.</p>"},{"location":"plugins/vcf-operations/backend/about/#instance-management","title":"Instance Management","text":"<p><pre><code>GET /api/vcf-operations/instances\n</code></pre> Returns list of configured VCF Operations instances.</p>"},{"location":"plugins/vcf-operations/backend/about/#resource-discovery_1","title":"Resource Discovery","text":"<p><pre><code>GET /api/vcf-operations/resources/find-by-name?resourceName={name}&amp;instance={instance}\n</code></pre> Find resources by name with VirtualMachine prioritization.</p> <p><pre><code>GET /api/vcf-operations/resources/find-by-property?propertyKey={key}&amp;propertyValue={value}&amp;instance={instance}\n</code></pre> Find resources by property conditions.</p> <p><pre><code>POST /api/vcf-operations/resources/query?instance={instance}\n</code></pre> Advanced resource search with complex query conditions.</p>"},{"location":"plugins/vcf-operations/backend/about/#metrics-retrieval","title":"Metrics Retrieval","text":"<p><pre><code>GET /api/vcf-operations/resources/{resourceId}/metrics?statKeys={keys}&amp;begin={timestamp}&amp;end={timestamp}&amp;rollUpType={type}&amp;instance={instance}\n</code></pre> Get time-series metrics data for a specific resource.</p> <p><pre><code>GET /api/vcf-operations/resources/{resourceId}/available-metrics?instance={instance}\n</code></pre> Get list of available metrics for a resource.</p> <p><pre><code>GET /api/vcf-operations/metrics/latest?resourceIds={ids}&amp;statKeys={keys}&amp;instance={instance}\n</code></pre> Get latest metric values for multiple resources.</p> <p>The VCF Operations Backend plugin provides a robust, secure, and scalable foundation for integrating VCF Operations data into your Backstage environment.</p>"},{"location":"plugins/vcf-operations/backend/configure/","title":"Configuring VCF Operations Backend Plugin","text":"<p>This guide covers how to configure the VCF Operations Backend plugin for your environment.</p>"},{"location":"plugins/vcf-operations/backend/configure/#basic-configuration","title":"Basic Configuration","text":""},{"location":"plugins/vcf-operations/backend/configure/#single-instance-setup","title":"Single Instance Setup","text":"<p>For a single VCF Operations instance, add the following to your <code>app-config.yaml</code>:</p> <pre><code>vcfOperations:\n  instances:\n    - name: production-vcf\n      baseUrl: 'https://vcf-ops.company.com'\n      majorVersion: 9\n      authentication:\n        username: 'backstage-service'\n        password: 'secure-password'\n</code></pre>"},{"location":"plugins/vcf-operations/backend/configure/#multiple-instance-setup","title":"Multiple Instance Setup","text":"<p>For multiple VCF Operations instances:</p> <pre><code>vcfOperations:\n  instances:\n    - name: production-vcf\n      baseUrl: 'https://prod-vcf.company.com'\n      majorVersion: 9\n      relatedVCFAInstances:\n        - prod-vcfa-primary\n        - prod-vcfa-secondary\n      authentication:\n        username: 'prod-monitor'\n        password: 'prod-password'\n    - name: staging-vcf\n      baseUrl: 'https://staging-vcf.company.com'\n      majorVersion: 8\n      authentication:\n        username: 'staging-monitor'\n        password: 'staging-password'\n        domain: 'staging.local'  # Optional domain\n</code></pre>"},{"location":"plugins/vcf-operations/backend/configure/#configuration-parameters","title":"Configuration Parameters","text":""},{"location":"plugins/vcf-operations/backend/configure/#instance-configuration","title":"Instance Configuration","text":"Parameter Type Required Description <code>name</code> string Yes Unique identifier for the VCF Operations instance <code>baseUrl</code> string Yes Full URL to the VCF Operations instance <code>majorVersion</code> number No VCF Operations version (8 or 9). Default: 8 <code>relatedVCFAInstances</code> string[] No* Associated VCF Automation instances <code>authentication</code> object Yes Authentication credentials <p>* Required when multiple instances are configured</p>"},{"location":"plugins/vcf-operations/backend/configure/#authentication-configuration","title":"Authentication Configuration","text":"Parameter Type Required Description <code>username</code> string Yes VCF Operations username <code>password</code> string Yes VCF Operations password <code>domain</code> string No Authentication domain (if required)"},{"location":"plugins/vcf-operations/backend/configure/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"plugins/vcf-operations/backend/configure/#organization-type-support-vcf-9","title":"Organization Type Support (VCF 9)","text":"<pre><code>vcfOperations:\n  instances:\n    - name: vcf-9-instance\n      baseUrl: 'https://vcf9.company.com'\n      majorVersion: 9\n      authentication:\n        username: 'admin'\n        password: 'password'\n</code></pre>"},{"location":"plugins/vcf-operations/backend/configure/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"plugins/vcf-operations/backend/configure/#development-environment","title":"Development Environment","text":"<pre><code># app-config.local.yaml\nvcfOperations:\n  instances:\n    - name: dev-vcf\n      baseUrl: 'https://dev-vcf.company.com'\n      majorVersion: 9\n      authentication:\n        username: 'dev-user'\n        password: 'dev-password'\n</code></pre>"},{"location":"plugins/vcf-operations/backend/configure/#production-environment","title":"Production Environment","text":"<pre><code># app-config.production.yaml\nvcfOperations:\n  instances:\n    - name: prod-vcf-primary\n      baseUrl: 'https://vcf-prod-01.company.com'\n      majorVersion: 9\n      relatedVCFAInstances:\n        - vcfa-prod-cluster-01\n        - vcfa-prod-cluster-02\n      authentication:\n        username: '${VCF_OPS_USERNAME}'  # Use environment variables\n        password: '${VCF_OPS_PASSWORD}'\n    - name: prod-vcf-secondary\n      baseUrl: 'https://vcf-prod-02.company.com'\n      majorVersion: 9\n      authentication:\n        username: '${VCF_OPS_USERNAME}'\n        password: '${VCF_OPS_PASSWORD}'\n</code></pre>"},{"location":"plugins/vcf-operations/backend/configure/#security-configuration","title":"Security Configuration","text":""},{"location":"plugins/vcf-operations/backend/configure/#using-environment-variables","title":"Using Environment Variables","text":"<p>Store sensitive credentials in environment variables:</p> <pre><code># .env\nVCF_OPS_USERNAME=backstage-service\nVCF_OPS_PASSWORD=super-secure-password\n</code></pre> <pre><code># app-config.yaml\nvcfOperations:\n  instances:\n    - name: production-vcf\n      baseUrl: 'https://vcf-ops.company.com'\n      majorVersion: 9\n      authentication:\n        username: '${VCF_OPS_USERNAME}'\n        password: '${VCF_OPS_PASSWORD}'\n</code></pre>"},{"location":"plugins/vcf-operations/backend/configure/#using-kubernetes-secrets","title":"Using Kubernetes Secrets","text":"<p>For Kubernetes deployments:</p> <pre><code># kubernetes-secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: vcf-operations-credentials\ntype: Opaque\ndata:\n  username: &lt;base64-encoded-username&gt;\n  password: &lt;base64-encoded-password&gt;\n</code></pre> <pre><code># deployment.yaml\nspec:\n  containers:\n    - name: backstage\n      env:\n        - name: VCF_OPS_USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: vcf-operations-credentials\n              key: username\n        - name: VCF_OPS_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: vcf-operations-credentials\n              key: password\n</code></pre>"},{"location":"plugins/vcf-operations/backend/configure/#validation-and-testing","title":"Validation and Testing","text":""},{"location":"plugins/vcf-operations/backend/configure/#configuration-validation","title":"Configuration Validation","text":"<p>The plugin validates configuration on startup. Check logs for validation errors:</p> <pre><code>[vcf-operations] VcfOperationsService initialized with 2 instance(s)\n[vcf-operations] Instance 'production-vcf' configured for version 9\n[vcf-operations] Instance 'staging-vcf' configured for version 8\n</code></pre>"},{"location":"plugins/vcf-operations/backend/configure/#testing-connectivity","title":"Testing Connectivity","text":"<p>Test VCF Operations connectivity:</p> <pre><code># Health check\ncurl http://localhost:7007/api/vcf-operations/health\n\n# Instance list\ncurl http://localhost:7007/api/vcf-operations/instances\n</code></pre> <p>The VCF Operations Backend plugin provides flexible configuration options to integrate with various VCF Operations environments while maintaining security and performance best practices.</p>"},{"location":"plugins/vcf-operations/backend/install/","title":"Installing VCF Operations Backend Plugin","text":"<p>This guide walks you through installing the VCF Operations Backend plugin in your Backstage application.</p>"},{"location":"plugins/vcf-operations/backend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/vcf-operations/backend/install/#1-install-the-package","title":"1. Install the Package","text":"<p>Add the backend plugin to your Backstage application:</p> <pre><code># From your Backstage root directory\nyarn --cwd packages/backend add @terasky/backstage-plugin-vcf-operations-backend\n</code></pre>"},{"location":"plugins/vcf-operations/backend/install/#2-register-the-plugin","title":"2. Register the Plugin","text":"<p>Add the plugin to your backend in <code>packages/backend/src/index.ts</code>:</p> <pre><code>import { createBackend } from '@backstage/backend-defaults';\n\nconst backend = createBackend();\n\n// ... other plugin registrations\n\n// Add VCF Operations backend plugin\nbackend.add(import('@terasky/backstage-plugin-vcf-operations-backend'));\n\nbackend.start();\n</code></pre>"},{"location":"plugins/vcf-operations/backend/install/#verification","title":"Verification","text":""},{"location":"plugins/vcf-operations/backend/install/#1-start-the-backend","title":"1. Start the Backend","text":"<p>Start your Backstage backend to ensure the plugin loads correctly:</p> <pre><code>yarn dev\n</code></pre>"},{"location":"plugins/vcf-operations/backend/install/#2-check-health-endpoint","title":"2. Check Health Endpoint","text":"<p>Verify the plugin is running by checking the health endpoint:</p> <pre><code>curl http://localhost:7007/api/vcf-operations/health\n</code></pre> <p>Expected response: <pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre></p>"},{"location":"plugins/vcf-operations/backend/install/#3-check-logs","title":"3. Check Logs","text":"<p>Look for VCF Operations plugin initialization in your backend logs:</p> <pre><code>[vcf-operations] VcfOperationsService initialized with 1 instance(s)\n[vcf-operations] Permissions registered: vcf-operations.metrics.view\n</code></pre>"},{"location":"plugins/vcf-operations/backend/install/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure the Backend - Set up VCF Operations instances and authentication</li> <li>Install Frontend Plugin - Add the frontend components for metric visualization</li> <li>Configure Permissions - Set up access control for VCF Operations data</li> <li>Test Integration - Verify end-to-end functionality with your VCF Operations environment</li> </ol> <p>The VCF Operations Backend plugin provides the foundation for VCF Operations integration - once installed and configured, you can add the frontend components to start visualizing your infrastructure metrics.</p>"},{"location":"plugins/vcf-operations/frontend/about/","title":"VCF Operations Frontend Plugin","text":"<p>The VCF Operations Frontend plugin provides a comprehensive metrics visualization interface for monitoring VMware VCF Operations data within Backstage. It offers an intuitive, feature-rich dashboard for analyzing infrastructure performance and resource utilization.</p>"},{"location":"plugins/vcf-operations/frontend/about/#overview","title":"Overview","text":"<p>The frontend plugin delivers a powerful metrics exploration experience with:</p> <ul> <li>Interactive Metrics Dashboard: Real-time visualization of infrastructure metrics</li> <li>Categorized Metric Selection: Organized categories for easy metric discovery</li> <li>Flexible Time Controls: Customizable time ranges and aggregation options</li> <li>Automatic Resource Detection: Intelligent mapping of Backstage entities to VCF Operations resources</li> <li>Responsive Design: Optimized for both desktop and mobile viewing</li> <li>Theme Support: Full compatibility with light and dark themes</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#core-components","title":"Core Components","text":""},{"location":"plugins/vcf-operations/frontend/about/#vcfoperationsexplorer","title":"VCFOperationsExplorer","text":"<p>The main component providing the complete metrics exploration interface:</p> <pre><code>import { VCFOperationsExplorerComponent } from '@terasky/backstage-plugin-vcf-operations';\n\n&lt;VCFOperationsExplorerComponent /&gt;\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/about/#user-interface-layout","title":"User Interface Layout","text":""},{"location":"plugins/vcf-operations/frontend/about/#top-control-bar","title":"Top Control Bar","text":"<p>The control bar provides essential configuration options:</p> <ul> <li>Instance Selection: Choose between multiple VCF Operations instances</li> <li>Time Range: Select from predefined ranges or custom time periods</li> <li>Aggregation Method: Choose data aggregation (Average, Min, Max, Sum, Latest)</li> <li>Auto-refresh: Toggle automatic data refresh every 30 seconds</li> <li>Manual Refresh: On-demand data refresh button</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#left-panel-metrics-selection","title":"Left Panel - Metrics Selection","text":"<p>Organized metric categories with intelligent selection controls:</p>"},{"location":"plugins/vcf-operations/frontend/about/#category-structure","title":"Category Structure","text":"<ul> <li>CPU Metrics: Usage percentage, MHz, ready time, co-stop</li> <li>Memory Metrics: Usage percentage, consumed KB</li> <li>Storage Metrics: Disk usage, datastore utilization</li> <li>Network Metrics: Network usage in KBps</li> <li>System Health: Health scores, badges, availability</li> <li>Alerts &amp; Monitoring: Alert counts by severity level</li> <li>Power &amp; Environment: Power consumption metrics</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#selection-features","title":"Selection Features","text":"<ul> <li>Category Checkboxes: Select/deselect entire metric categories</li> <li>Individual Metric Toggles: Fine-grained metric selection</li> <li>Select All/Clear All: Bulk selection controls</li> <li>Visual Indicators: Selection counts and progress indicators</li> <li>Indeterminate States: Category checkboxes show partial selection</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#right-panel-chart-visualization","title":"Right Panel - Chart Visualization","text":"<p>Dynamic chart area with responsive layout:</p> <ul> <li>Time-Series Charts: Interactive line charts with zoom and pan</li> <li>Multiple Metrics: Simultaneous display of selected metrics</li> <li>Chart Controls: Individual chart legends and tooltips</li> <li>Responsive Layout: Adaptive sizing for different screen sizes</li> <li>Scroll Support: Vertical scrolling for multiple charts</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#metric-categories","title":"Metric Categories","text":""},{"location":"plugins/vcf-operations/frontend/about/#cpu-metrics","title":"CPU Metrics","text":"<p>Monitor processor performance and utilization:</p> <ul> <li>CPU Usage (%): Percentage of CPU utilization</li> <li>CPU Usage (MHz): CPU usage in megahertz</li> <li>CPU Ready (ms): Time spent waiting for CPU resources</li> <li>CPU Co-Stop (ms): Time spent in co-scheduling delays</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#memory-metrics","title":"Memory Metrics","text":"<p>Track memory utilization and consumption:</p> <ul> <li>Memory Usage (%): Percentage of memory utilization</li> <li>Memory Consumed (KB): Actual memory consumption in kilobytes</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#storage-metrics","title":"Storage Metrics","text":"<p>Monitor storage performance and capacity:</p> <ul> <li>Disk Usage (%): Disk utilization percentage</li> <li>Datastore Usage (%): Datastore capacity utilization</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#network-metrics","title":"Network Metrics","text":"<p>Analyze network performance and throughput:</p> <ul> <li>Network Usage (KBps): Network throughput in kilobytes per second</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#system-health-metrics","title":"System Health Metrics","text":"<p>Overall system health and status indicators:</p> <ul> <li>Health Score: Overall system health rating</li> <li>Health Badge: Health status badge</li> <li>Efficiency Badge: System efficiency indicator</li> <li>Risk Badge: Risk assessment indicator</li> <li>Compliance Badge: Compliance status</li> <li>Availability: System availability percentage</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#alerts-monitoring","title":"Alerts &amp; Monitoring","text":"<p>Alert and notification metrics:</p> <ul> <li>Total Alerts: Total number of active alerts</li> <li>Critical Alerts: Number of critical severity alerts</li> <li>Warning Alerts: Number of warning severity alerts</li> <li>Info Alerts: Number of informational alerts</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#power-environment","title":"Power &amp; Environment","text":"<p>Environmental and power consumption metrics:</p> <ul> <li>Power Usage (W): Power consumption in watts</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#resource-detection-logic","title":"Resource Detection Logic","text":"<p>The frontend automatically detects VCF Operations resources based on entity metadata:</p>"},{"location":"plugins/vcf-operations/frontend/about/#virtual-machines","title":"Virtual Machines","text":""},{"location":"plugins/vcf-operations/frontend/about/#standalone-vms","title":"Standalone VMs","text":"<ul> <li>Detection: Entities with <code>kind:virtualmachine</code> and <code>standalone-resource</code> tags</li> <li>Name Extraction: Removes \" (Standalone)\" suffix from entity title</li> <li>Example: \"my-vm (Standalone)\" \u2192 searches for \"my-vm\"</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#non-standalone-vms","title":"Non-Standalone VMs","text":"<ul> <li>Detection: Entities with <code>kind:virtualmachine</code> tag (without <code>standalone-resource</code>)</li> <li>Name Extraction: Parses \"Open Remote Console\" link from entity metadata</li> <li>URL Parsing: Extracts last segment from remote console URL</li> <li>Example: <code>/machines/remote-console/vra/cluster/vm-name</code> \u2192 searches for \"vm-name\"</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#supervisor-namespaces","title":"Supervisor Namespaces","text":"<ul> <li>Detection: Entities with <code>terasky.backstage.io/vcf-automation-cci-namespace-endpoint</code> annotation</li> <li>URN Extraction: Parses namespace URN from CCI endpoint URL</li> <li>Property Matching: Matches against <code>summary|vcfa_ns_uuid</code> property in VCF Operations</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#vcf-automation-projects","title":"VCF Automation Projects","text":"<ul> <li>Detection: Domain entities with type <code>vcf-automation-project</code></li> <li>Name Matching: Direct mapping of entity title to VCF Operations resource name</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#planned-support","title":"Planned Support","text":"<ul> <li>Clusters: Kubernetes cluster resources (development in progress)</li> <li>Deployments: Application deployment resources (development in progress)</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#user-experience-features","title":"User Experience Features","text":""},{"location":"plugins/vcf-operations/frontend/about/#smart-defaults","title":"Smart Defaults","text":"<ul> <li>Pre-selected Metrics: CPU, Memory, and Network usage automatically selected</li> <li>Default Time Range: 24-hour view for immediate insights</li> <li>Automatic Loading: Metrics load immediately upon selection</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#interactive-controls","title":"Interactive Controls","text":"<ul> <li>One-Click Category Selection: Select entire metric categories with single click</li> <li>Bulk Operations: Select all or clear all metrics quickly</li> <li>Real-time Updates: Automatic refresh with configurable intervals</li> <li>Manual Refresh: On-demand data refresh for immediate updates</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#visual-feedback","title":"Visual Feedback","text":"<ul> <li>Loading Indicators: Clear feedback during data loading</li> <li>Error Messages: Helpful error descriptions with suggested actions</li> <li>Progress Indicators: Selection counts and status information</li> <li>Hover Effects: Interactive elements with visual feedback</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#responsive-design","title":"Responsive Design","text":"<ul> <li>Mobile Support: Optimized layout for mobile and tablet devices</li> <li>Flexible Panels: Resizable and collapsible interface elements</li> <li>Adaptive Charts: Charts resize based on available space</li> <li>Theme Integration: Seamless integration with Backstage themes</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#api-integration","title":"API Integration","text":""},{"location":"plugins/vcf-operations/frontend/about/#vcf-operations-client","title":"VCF Operations Client","text":"<p>The frontend communicates with the backend through a dedicated API client:</p> <pre><code>interface VcfOperationsApi {\n  getInstances(): Promise&lt;Instance[]&gt;;\n  findResourceByName(name: string, instance?: string): Promise&lt;Resource | null&gt;;\n  findResourceByProperty(key: string, value: string, instance?: string): Promise&lt;Resource | null&gt;;\n  getResourceMetrics(\n    resourceId: string,\n    statKeys: string[],\n    begin?: number,\n    end?: number,\n    rollUpType?: string,\n    instance?: string\n  ): Promise&lt;StatsResponse&gt;;\n}\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/about/#error-handling","title":"Error Handling","text":"<p>Comprehensive error handling with user-friendly messages:</p> <ul> <li>Connection Errors: Network connectivity issues</li> <li>Authentication Errors: Invalid credentials or permissions</li> <li>Resource Not Found: Missing resources with helpful suggestions</li> <li>Invalid Metrics: Unsupported metric keys with alternatives</li> <li>Time Range Errors: Invalid time ranges with automatic correction</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"plugins/vcf-operations/frontend/about/#efficient-data-loading","title":"Efficient Data Loading","text":"<ul> <li>Automatic Loading: Metrics load when selected, eliminating manual refresh</li> <li>Debounced Requests: Prevents excessive API calls during rapid selections</li> <li>Caching Strategy: Intelligent caching of resource metadata</li> <li>Progressive Loading: Charts render as data becomes available</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#memory-management","title":"Memory Management","text":"<ul> <li>Component Optimization: Efficient React component lifecycle management</li> <li>Chart Cleanup: Proper cleanup of chart instances and event listeners</li> <li>State Management: Optimized state updates and re-renders</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#network-efficiency","title":"Network Efficiency","text":"<ul> <li>Batch Requests: Multiple metrics requested in single API calls</li> <li>Request Cancellation: Cleanup of obsolete requests when selections change</li> <li>Compression: Efficient data transfer with response compression</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#accessibility-features","title":"Accessibility Features","text":""},{"location":"plugins/vcf-operations/frontend/about/#keyboard-navigation","title":"Keyboard Navigation","text":"<ul> <li>Tab Navigation: Full keyboard navigation support</li> <li>Focus Management: Clear focus indicators and logical tab order</li> <li>Keyboard Shortcuts: Efficient navigation with keyboard shortcuts</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#screen-reader-support","title":"Screen Reader Support","text":"<ul> <li>ARIA Labels: Comprehensive ARIA labeling for screen readers</li> <li>Semantic HTML: Proper HTML structure for accessibility</li> <li>Alt Text: Descriptive alternative text for visual elements</li> </ul>"},{"location":"plugins/vcf-operations/frontend/about/#visual-accessibility","title":"Visual Accessibility","text":"<ul> <li>High Contrast: Compatible with high contrast themes</li> <li>Color Blind Support: Color schemes accessible to color blind users</li> <li>Scalable Text: Respects user font size preferences</li> </ul> <p>The VCF Operations Frontend plugin provides a comprehensive, user-friendly interface for monitoring VCF infrastructure, enabling teams to quickly identify performance issues and optimize resource utilization through intuitive visualizations and intelligent automation.</p>"},{"location":"plugins/vcf-operations/frontend/configure/","title":"Configuring VCF Operations Frontend Plugin","text":"<p>This guide covers how to configure and customize the VCF Operations Frontend plugin for your organization's needs.</p>"},{"location":"plugins/vcf-operations/frontend/configure/#new-frontend-system-configuration-alpha","title":"New Frontend System Configuration (Alpha)","text":"<p>When using the new frontend system through the <code>/alpha</code> export, the plugin is configured automatically with sensible defaults. The configuration options described below are still available and can be customized through the app configuration.</p>"},{"location":"plugins/vcf-operations/frontend/configure/#basic-configuration","title":"Basic Configuration","text":"<p>The frontend plugin automatically inherits configuration from the backend plugin, but you can customize the user experience through various options.</p>"},{"location":"plugins/vcf-operations/frontend/configure/#permission-configuration","title":"Permission Configuration","text":""},{"location":"plugins/vcf-operations/frontend/configure/#basic-permission-control","title":"Basic Permission Control","text":"<p>Configure permissions in your <code>app-config.yaml</code>:</p> <pre><code>permission:\n  enabled: true\n  rules:\n    - allow: [vcf-operations.metrics.view]\n      resourceType: entity\n      conditions:\n        anyOf:\n          - rule: HAS_TAG\n            params:\n              tag: 'vcf-monitored'\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/configure/#role-based-access-control","title":"Role-Based Access Control","text":"<p>Configure different access levels:</p> <pre><code>permission:\n  enabled: true\n  rules:\n    # Infrastructure team - full access\n    - allow: [vcf-operations.metrics.view]\n      resourceType: entity\n      conditions:\n        allOf:\n          - rule: HAS_ANNOTATION\n            params:\n              annotation: 'backstage.io/managed-by-location'\n          - rule: IS_ENTITY_OWNER\n            params:\n              claims: ['group:infrastructure']\n\n    # Developers - limited access to their resources\n    - allow: [vcf-operations.metrics.view]\n      resourceType: entity\n      conditions:\n        anyOf:\n          - rule: IS_ENTITY_OWNER\n          - rule: HAS_SPEC\n            params:\n              key: 'owner'\n              value: 'user:$user'\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/configure/#environment-based-permissions","title":"Environment-Based Permissions","text":"<p>Different permissions for different environments:</p> <pre><code>permission:\n  enabled: true\n  rules:\n    # Production - restricted access\n    - allow: [vcf-operations.metrics.view]\n      resourceType: entity\n      conditions:\n        allOf:\n          - rule: HAS_TAG\n            params:\n              tag: 'environment:production'\n          - rule: IS_ENTITY_OWNER\n            params:\n              claims: ['group:platform-team']\n\n    # Development - open access\n    - allow: [vcf-operations.metrics.view]\n      resourceType: entity\n      conditions:\n        anyOf:\n          - rule: HAS_TAG\n            params:\n              tag: 'environment:development'\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/configure/#entity-configuration","title":"Entity Configuration","text":""},{"location":"plugins/vcf-operations/frontend/configure/#virtual-machine-configuration","title":"Virtual Machine Configuration","text":"<p>Configure entity metadata for VM monitoring:</p> <pre><code># catalog-info.yaml\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: web-server-vm\n  title: Web Server (Standalone)\n  tags:\n    - kind:virtualmachine\n    - standalone-resource\n    - vcf-monitored\n  annotations:\n    backstage.io/managed-by-location: 'url:https://github.com/company/infrastructure'\n  links:\n    - url: https://vcfa.company.com/automation/#/machines/remote-console/vra/cluster/web-server\n      title: Open Remote Console\nspec:\n  type: virtual-machine\n  owner: team:infrastructure\n  lifecycle: production\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/configure/#non-standalone-vm-configuration","title":"Non-Standalone VM Configuration","text":"<p>For VMs managed through VCF Automation:</p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: app-server\n  title: Application Server\n  tags:\n    - kind:virtualmachine\n    - vcf-monitored\n  links:\n    - url: https://vcfa.company.com/automation/#/build-and-deploy/all-resources/deployments/abc123\n      title: Open in VCF Automation\n    - url: https://vcfa.company.com/automation/#/machines/remote-console/vra/cluster-01/app-server-vm\n      title: Open Remote Console  # This link is used for resource discovery\nspec:\n  type: virtual-machine\n  owner: team:development\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/configure/#supervisor-namespace-configuration","title":"Supervisor Namespace Configuration","text":"<p>For CCI namespace monitoring:</p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: k8s-namespace\n  title: Kubernetes Namespace\n  tags:\n    - vcf-monitored\n  annotations:\n    terasky.backstage.io/vcf-automation-cci-namespace-endpoint: 'https://vcfa.company.com/proxy/k8s/namespaces/urn:vcloud:namespace:abc123-def456'\nspec:\n  type: namespace\n  owner: team:platform\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/configure/#vcf-automation-project-configuration","title":"VCF Automation Project Configuration","text":"<p>For project-level monitoring:</p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Domain\nmetadata:\n  name: web-services-project\n  title: Web Services Project\n  tags:\n    - vcf-monitored\nspec:\n  type: vcf-automation-project\n  owner: team:web-services\n</code></pre> <p>The VCF Operations Frontend plugin provides extensive configuration options to adapt to your organization's monitoring needs and user experience requirements.</p>"},{"location":"plugins/vcf-operations/frontend/install/","title":"Installing VCF Operations Frontend Plugin","text":"<p>This guide walks you through installing the VCF Operations Frontend plugin in your Backstage application.</p>"},{"location":"plugins/vcf-operations/frontend/install/#prerequisites","title":"Prerequisites","text":"<ul> <li>VCF Operations Backend plugin installed and configured</li> </ul>"},{"location":"plugins/vcf-operations/frontend/install/#installation-steps","title":"Installation Steps","text":""},{"location":"plugins/vcf-operations/frontend/install/#1-install-the-package","title":"1. Install the Package","text":"<p>Add the frontend plugin to your Backstage application:</p> <pre><code># From your Backstage root directory\nyarn --cwd packages/app add @terasky/backstage-plugin-vcf-operations\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/install/#2-add-to-entity-pages","title":"2. Add to Entity Pages","text":"<p>Add VCF Operations tabs to relevant entity pages in <code>packages/app/src/components/catalog/EntityPage.tsx</code>:</p>"},{"location":"plugins/vcf-operations/frontend/install/#for-virtual-machine-entities","title":"For Virtual Machine Entities","text":"<pre><code>import { VCFOperationsExplorerComponent } from '@terasky/backstage-plugin-vcf-operations';\nimport { isKind } from '@backstage/plugin-catalog';\n\n// Add to VM entity pages\nconst vmEntityPage = (\n  &lt;EntityPageLayout&gt;\n    &lt;EntityPageLayout.Route path=\"/\" title=\"Overview\"&gt;\n      &lt;EntityOrphanWarning /&gt;\n      &lt;Grid container spacing={3} alignItems=\"stretch\"&gt;\n        {/* ... other overview content */}\n      &lt;/Grid&gt;\n    &lt;/EntityPageLayout.Route&gt;\n\n    {/* Add VCF Operations tab */}\n    &lt;EntityPageLayout.Route path=\"/vcf-operations\" title=\"Metrics\"&gt;\n      &lt;VCFOperationsExplorerComponent /&gt;\n    &lt;/EntityPageLayout.Route&gt;\n\n    {/* ... other tabs */}\n  &lt;/EntityPageLayout&gt;\n);\n\n// Update entity page routing\nconst entityPage = (\n  &lt;EntitySwitch&gt;\n    {/* ... other cases */}\n    &lt;EntitySwitch.Case if={isKind('component')} children={componentPage} /&gt;\n    &lt;EntitySwitch.Case if={isKind('system')} children={systemPage} /&gt;\n\n    {/* Add VM support */}\n    &lt;EntitySwitch.Case \n      if={entity =&gt; entity.metadata.tags?.includes('kind:virtualmachine')}\n      children={vmEntityPage} \n    /&gt;\n\n    &lt;EntitySwitch.Case children={defaultEntityPage} /&gt;\n  &lt;/EntitySwitch&gt;\n);\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/install/#for-project-and-namespace-entities","title":"For Project and Namespace Entities","text":"<pre><code>// For VCF Automation projects\nconst projectEntityPage = (\n  &lt;EntityPageLayout&gt;\n    {/* ... other tabs */}\n    &lt;EntityPageLayout.Route path=\"/vcf-operations\" title=\"Operations Metrics\"&gt;\n      &lt;VCFOperationsExplorerComponent /&gt;\n    &lt;/EntityPageLayout.Route&gt;\n  &lt;/EntityPageLayout&gt;\n);\n\n// Update routing for domains\n&lt;EntitySwitch.Case \n  if={entity =&gt; entity.kind === 'Domain' &amp;&amp; entity.spec?.type === 'vcf-automation-project'}\n  children={projectEntityPage} \n/&gt;\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/install/#verification","title":"Verification","text":""},{"location":"plugins/vcf-operations/frontend/install/#1-start-the-frontend","title":"1. Start the Frontend","text":"<p>Start your Backstage frontend to ensure the plugin loads correctly:</p> <pre><code>yarn start\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/install/#2-check-plugin-registration","title":"2. Check Plugin Registration","text":"<p>Verify the plugin appears in your Backstage instance:</p> <ol> <li>Navigate to an entity with VCF Operations support</li> <li>Look for the \"Metrics\" or \"VCF Operations\" tab</li> <li>Check that the tab loads without errors</li> </ol>"},{"location":"plugins/vcf-operations/frontend/install/#3-test-functionality","title":"3. Test Functionality","text":"<p>Test the core functionality:</p> <ol> <li>Select different metrics categories</li> <li>Try different time ranges and aggregation options</li> <li>Verify auto-refresh functionality</li> <li>Test manual refresh button</li> </ol>"},{"location":"plugins/vcf-operations/frontend/install/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"plugins/vcf-operations/frontend/install/#permission-errors","title":"Permission Errors","text":"<p>If you see permission denied errors:</p> <ol> <li>Verify backend plugin is installed and configured</li> <li>Check permission configuration in app-config.yaml</li> <li>Ensure user has required permissions</li> </ol>"},{"location":"plugins/vcf-operations/frontend/install/#component-not-found-errors","title":"Component Not Found Errors","text":"<p>If components don't load:</p> <pre><code># Verify plugin packages are installed\nyarn list @terasky/backstage-plugin-vcf-operations\nyarn list @terasky/backstage-plugin-vcf-operations-common\n\n# Reinstall if necessary\nyarn cache clean\nyarn install\n</code></pre>"},{"location":"plugins/vcf-operations/frontend/install/#theme-integration-issues","title":"Theme Integration Issues","text":"<p>If styling appears broken:</p> <ol> <li>Ensure Material-UI version compatibility</li> <li>Check for theme conflicts</li> <li>Verify CSS import order</li> <li>Test with default Backstage theme</li> </ol>"},{"location":"plugins/vcf-operations/frontend/install/#new-frontend-system-support-alpha","title":"New Frontend System Support (Alpha)","text":"<p>The plugin now supports the new frontend system available in the <code>/alpha</code> export. To use this:</p> <pre><code>import { createApp } from '@backstage/frontend-defaults';\nimport { vcfOperationsPlugin } from '@terasky/backstage-plugin-vcf-operations/alpha';\n\nexport default createApp({\n  features: [\n    ...\n    vcfOperationsPlugin,\n    ...\n  ],\n});\n</code></pre> <p>This replaces the need for manual route configuration in <code>EntityPage.tsx</code> and other files. The plugin will be automatically integrated into the appropriate entity pages.</p>"},{"location":"plugins/vcf-operations/frontend/install/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure the Frontend - Set up component options and permissions</li> <li>Test Integration - Verify functionality with your VCF Operations environment</li> <li>Customize Styling - Adapt the interface to match your organization's branding</li> <li>Train Users - Provide documentation and training for end users</li> </ol>"},{"location":"plugins/vcf-operations/frontend/install/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during installation:</p> <ol> <li>Verify all prerequisites are met</li> <li>Review browser console for detailed error messages</li> <li>Ensure backend plugin is properly configured</li> <li>Test with a minimal configuration first</li> </ol> <p>The VCF Operations Frontend plugin provides a powerful interface for infrastructure monitoring - once installed and configured, your teams can start monitoring VCF Operations metrics directly within Backstage!</p>"}]}